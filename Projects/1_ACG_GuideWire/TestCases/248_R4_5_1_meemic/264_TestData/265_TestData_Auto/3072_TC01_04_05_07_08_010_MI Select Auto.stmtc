[
  {
    "TempId": 3072,
    "AUT": "",
    "Description": "Test Data Creation for Payment plan as EFT Scenarios\r\n",
    "StatusKey": "NEW",
    "isMobile": false,
    "TestCaseType": 1,
    "IsExecutable": true,
    "uri": "",
    "DataSheet": {
      "TestCase": null,
      "Parameters": [
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "1/24/1979",
              "ParameterId": 284255,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "1/24/1979",
              "ParameterId": 284255,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "1/24/1979",
              "ParameterId": 284255,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "1/24/1979",
              "ParameterId": 284255,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "1/24/1979",
              "ParameterId": 284255,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "1/24/1979",
              "ParameterId": 284255,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyInfoDOB",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Married",
              "ParameterId": 284256,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Married",
              "ParameterId": 284256,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Married",
              "ParameterId": 284256,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Married",
              "ParameterId": 284256,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Married",
              "ParameterId": 284256,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Married",
              "ParameterId": 284256,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyInfoMaritalStatus",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "aali@acg.aaa.com",
              "ParameterId": 284257,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "aali@acg.aaa.com",
              "ParameterId": 284257,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "aali@acg.aaa.com",
              "ParameterId": 284257,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "aali@acg.aaa.com",
              "ParameterId": 284257,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "aali@acg.aaa.com",
              "ParameterId": 284257,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "aali@acg.aaa.com",
              "ParameterId": 284257,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyInfoEmail",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "SHANNON",
              "ParameterId": 284258,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "SHANNON",
              "ParameterId": 284258,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "SHANNON",
              "ParameterId": 284258,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "SHANNON",
              "ParameterId": 284258,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "SHANNON",
              "ParameterId": 284258,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "SHANNON",
              "ParameterId": 284258,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_FirstName",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "YGGFTKNWXZ",
              "ParameterId": 284259,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "YGGFTKNWXZ",
              "ParameterId": 284259,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "YGGFTKNWXZ",
              "ParameterId": 284259,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "YGGFTKNWXZ",
              "ParameterId": 284259,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "YGGFTKNWXZ",
              "ParameterId": 284259,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "YGGFTKNWXZ",
              "ParameterId": 284259,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_LastName",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "1/24/1979",
              "ParameterId": 284260,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "1/24/1979",
              "ParameterId": 284260,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "1/24/1979",
              "ParameterId": 284260,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "1/24/1979",
              "ParameterId": 284260,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "1/24/1979",
              "ParameterId": 284260,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "2/7/1979",
              "ParameterId": 284260,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversDOB",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Female",
              "ParameterId": 284261,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Female",
              "ParameterId": 284261,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Female",
              "ParameterId": 284261,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Female",
              "ParameterId": 284261,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Female",
              "ParameterId": 284261,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Female",
              "ParameterId": 284261,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversGender",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Married",
              "ParameterId": 284262,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Married",
              "ParameterId": 284262,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Married",
              "ParameterId": 284262,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Married",
              "ParameterId": 284262,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Married",
              "ParameterId": 284262,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Married",
              "ParameterId": 284262,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversMaritalStatus",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "R576346792407",
              "ParameterId": 284263,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "R576346792407",
              "ParameterId": 284263,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "R576346792407",
              "ParameterId": 284263,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "R576346792407",
              "ParameterId": 284263,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "R576346792407",
              "ParameterId": 284263,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "R576346792407",
              "ParameterId": 284263,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversLicenseNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Michigan",
              "ParameterId": 284264,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Michigan",
              "ParameterId": 284264,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Michigan",
              "ParameterId": 284264,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Michigan",
              "ParameterId": 284264,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Michigan",
              "ParameterId": 284264,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Michigan",
              "ParameterId": 284264,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversLicenseStatus",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Active",
              "ParameterId": 284265,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Active",
              "ParameterId": 284265,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Active",
              "ParameterId": 284265,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Active",
              "ParameterId": 284265,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Active",
              "ParameterId": 284265,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Active",
              "ParameterId": 284265,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversStatus",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Employed",
              "ParameterId": 284266,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Employed",
              "ParameterId": 284266,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Employed",
              "ParameterId": 284266,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Employed",
              "ParameterId": 284266,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Employed",
              "ParameterId": 284266,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Employed",
              "ParameterId": 284266,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversEmpStatus",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Primary",
              "ParameterId": 284267,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Primary",
              "ParameterId": 284267,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Primary",
              "ParameterId": 284267,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Primary",
              "ParameterId": 284267,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Primary",
              "ParameterId": 284267,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Primary",
              "ParameterId": 284267,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversWorklossCoordi",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Continuous for prior 6 months or more",
              "ParameterId": 284268,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Continuous for prior 6 months or more",
              "ParameterId": 284268,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Continuous for prior 6 months or more",
              "ParameterId": 284268,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Continuous for prior 6 months or more",
              "ParameterId": 284268,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Continuous for prior 6 months or more",
              "ParameterId": 284268,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Continuous for prior 6 months or more",
              "ParameterId": 284268,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversPriorAutoInsurance",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "21st Century Insurance Company",
              "ParameterId": 284269,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "21st Century Insurance Company",
              "ParameterId": 284269,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "21st Century Insurance Company",
              "ParameterId": 284269,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "21st Century Insurance Company",
              "ParameterId": 284269,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "21st Century Insurance Company",
              "ParameterId": 284269,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "21st Century Insurance Company",
              "ParameterId": 284269,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversCarrierName",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "250",
              "ParameterId": 284270,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "250",
              "ParameterId": 284270,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "250",
              "ParameterId": 284270,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "250",
              "ParameterId": 284270,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "250",
              "ParameterId": 284270,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "250",
              "ParameterId": 284270,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversBidilyInjuryLimit",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "3",
              "ParameterId": 284271,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "3",
              "ParameterId": 284271,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "3",
              "ParameterId": 284271,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "3",
              "ParameterId": 284271,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "3",
              "ParameterId": 284271,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "3",
              "ParameterId": 284271,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriversFullYearWithPriorCarrier",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No-Opt Out",
              "ParameterId": 284272,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No-Opt Out",
              "ParameterId": 284272,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No-Opt Out",
              "ParameterId": 284272,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No-Opt Out",
              "ParameterId": 284272,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No-Opt Out",
              "ParameterId": 284272,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No-Opt Out",
              "ParameterId": 284272,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_ReportsInsuranceScoreOrdered",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Regular",
              "ParameterId": 284273,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Regular",
              "ParameterId": 284273,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Regular",
              "ParameterId": 284273,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Regular",
              "ParameterId": 284273,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Regular",
              "ParameterId": 284273,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Regular",
              "ParameterId": 284273,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VehiclesType",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Private Passenger",
              "ParameterId": 284274,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Private Passenger",
              "ParameterId": 284274,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Private Passenger",
              "ParameterId": 284274,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Private Passenger",
              "ParameterId": 284274,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Private Passenger",
              "ParameterId": 284274,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Private Passenger",
              "ParameterId": 284274,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VehiclesDesc",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 284275,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No",
              "ParameterId": 284275,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No",
              "ParameterId": 284275,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No",
              "ParameterId": 284275,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No",
              "ParameterId": 284275,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No",
              "ParameterId": 284275,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VehiclesYesorNoVehiclesYearPriorTo1981",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "VIN",
              "ParameterId": 284276,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "VIN",
              "ParameterId": 284276,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "VIN",
              "ParameterId": 284276,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "VIN",
              "ParameterId": 284276,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "VIN",
              "ParameterId": 284276,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "VIN",
              "ParameterId": 284276,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VehiclesSearchBy",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "1J4GK48K52W328918",
              "ParameterId": 284277,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "1J4GK48K52W328918",
              "ParameterId": 284277,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "1J4GK48K52W328918",
              "ParameterId": 284277,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "1J4GK48K52W328918",
              "ParameterId": 284277,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "1J4GK48K52W328918",
              "ParameterId": 284277,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "1J4GK48K52W328918",
              "ParameterId": 284277,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VehiclesVINNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "yes",
              "ParameterId": 284278,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "yes",
              "ParameterId": 284278,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "yes",
              "ParameterId": 284278,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "yes",
              "ParameterId": 284278,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "yes",
              "ParameterId": 284278,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "yes",
              "ParameterId": 284278,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VehiclesYesorNoAirbag",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Yes",
              "ParameterId": 284279,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Yes",
              "ParameterId": 284279,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Yes",
              "ParameterId": 284279,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Yes",
              "ParameterId": 284279,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Yes",
              "ParameterId": 284279,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Yes",
              "ParameterId": 284279,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VehiclesYesorNoABS",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Passive",
              "ParameterId": 284280,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Passive",
              "ParameterId": 284280,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Passive",
              "ParameterId": 284280,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Passive",
              "ParameterId": 284280,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Passive",
              "ParameterId": 284280,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Passive",
              "ParameterId": 284280,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VehiclesAntiTheftDropDown",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 284281,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No",
              "ParameterId": 284281,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No",
              "ParameterId": 284281,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No",
              "ParameterId": 284281,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No",
              "ParameterId": 284281,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No",
              "ParameterId": 284281,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VehiclesYesorNoAAASafetyInspection",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Pleasure",
              "ParameterId": 284282,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Pleasure",
              "ParameterId": 284282,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Pleasure",
              "ParameterId": 284282,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Pleasure",
              "ParameterId": 284282,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Pleasure",
              "ParameterId": 284282,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Pleasure",
              "ParameterId": 284282,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VehiclesVehicleUsage",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "10000",
              "ParameterId": 284283,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "10000",
              "ParameterId": 284283,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "10000",
              "ParameterId": 284283,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "10000",
              "ParameterId": 284283,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "10000",
              "ParameterId": 284283,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "10000",
              "ParameterId": 284283,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VehiclesAnnualMileage",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Yes",
              "ParameterId": 284284,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Yes",
              "ParameterId": 284284,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Yes",
              "ParameterId": 284284,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Yes",
              "ParameterId": 284284,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Yes",
              "ParameterId": 284284,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Yes",
              "ParameterId": 284284,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VehiclesYesorNoVehicleRegisteredName",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 284285,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No",
              "ParameterId": 284285,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No",
              "ParameterId": 284285,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No",
              "ParameterId": 284285,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No",
              "ParameterId": 284285,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No",
              "ParameterId": 284285,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VehiclesYesorNoPreviouslyTitled",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Michigan",
              "ParameterId": 284286,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Michigan",
              "ParameterId": 284286,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Michigan",
              "ParameterId": 284286,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Michigan",
              "ParameterId": 284286,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Michigan",
              "ParameterId": 284286,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Michigan",
              "ParameterId": 284286,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VehiclesRegisteredState",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Owned",
              "ParameterId": 284287,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Owned",
              "ParameterId": 284287,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Owned",
              "ParameterId": 284287,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Owned",
              "ParameterId": 284287,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Owned",
              "ParameterId": 284287,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Owned",
              "ParameterId": 284287,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VehiclesOwnership",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 284254,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No",
              "ParameterId": 284254,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No",
              "ParameterId": 284254,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No",
              "ParameterId": 284254,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No",
              "ParameterId": 284254,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No",
              "ParameterId": 284254,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyInfoYesorNoDocsConsent",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Yes",
              "ParameterId": 284253,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Yes",
              "ParameterId": 284253,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Yes",
              "ParameterId": 284253,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Yes",
              "ParameterId": 284253,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Yes",
              "ParameterId": 284253,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Yes",
              "ParameterId": 284253,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyInfoYesorNoPaperlessComm",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Yes",
              "ParameterId": 284252,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Yes",
              "ParameterId": 284252,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Yes",
              "ParameterId": 284252,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Yes",
              "ParameterId": 284252,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Yes",
              "ParameterId": 284252,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Yes",
              "ParameterId": 284252,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyInfoYesorNoFirstCompanyForInsurance",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 284251,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No",
              "ParameterId": 284251,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No",
              "ParameterId": 284251,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No",
              "ParameterId": 284251,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No",
              "ParameterId": 284251,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No",
              "ParameterId": 284251,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyInfoYesorNoAAAMembership",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 284250,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No",
              "ParameterId": 284250,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No",
              "ParameterId": 284250,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No",
              "ParameterId": 284250,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No",
              "ParameterId": 284250,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No",
              "ParameterId": 284250,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyInfoYesorNoPreviousAddr",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 284249,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No",
              "ParameterId": 284249,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No",
              "ParameterId": 284249,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No",
              "ParameterId": 284249,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No",
              "ParameterId": 284249,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No",
              "ParameterId": 284249,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_QualificationYesorNoSR22Financial",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 284248,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No",
              "ParameterId": 284248,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No",
              "ParameterId": 284248,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No",
              "ParameterId": 284248,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No",
              "ParameterId": 284248,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No",
              "ParameterId": 284248,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_QualificationYesorNoDeniedPayment",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 284247,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No",
              "ParameterId": 284247,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No",
              "ParameterId": 284247,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No",
              "ParameterId": 284247,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No",
              "ParameterId": 284247,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No",
              "ParameterId": 284247,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_QualificationYesorNoLicenseStatus",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 284246,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No",
              "ParameterId": 284246,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No",
              "ParameterId": 284246,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No",
              "ParameterId": 284246,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No",
              "ParameterId": 284246,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No",
              "ParameterId": 284246,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_QualificationYesorNoNonPaymentOfPremium",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 284245,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No",
              "ParameterId": 284245,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No",
              "ParameterId": 284245,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No",
              "ParameterId": 284245,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No",
              "ParameterId": 284245,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No",
              "ParameterId": 284245,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_QualificationYesorNoFullTimeResident",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "04/01/2024",
              "ParameterId": 284244,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "04/01/2024",
              "ParameterId": 284244,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "04/01/2024",
              "ParameterId": 284244,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "04/01/2024",
              "ParameterId": 284244,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "04/01/2024",
              "ParameterId": 284244,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "04/01/2024",
              "ParameterId": 284244,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_EffectiveDate",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Woodland Ave",
              "ParameterId": 284243,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Woodland Ave",
              "ParameterId": 284243,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Woodland Ave",
              "ParameterId": 284243,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Woodland Ave",
              "ParameterId": 284243,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Woodland Ave",
              "ParameterId": 284243,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Woodland Ave",
              "ParameterId": 284243,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_SelectStandardizeAddr",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "666-68-3757",
              "ParameterId": 284242,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "666-68-3757",
              "ParameterId": 284242,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "666-68-3757",
              "ParameterId": 284242,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "666-68-3757",
              "ParameterId": 284242,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "666-68-3757",
              "ParameterId": 284242,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "666-68-3757",
              "ParameterId": 284242,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_SSN",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "49120",
              "ParameterId": 284241,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "49120",
              "ParameterId": 284241,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "49120",
              "ParameterId": 284241,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "49120",
              "ParameterId": 284241,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "49120",
              "ParameterId": 284241,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "49120",
              "ParameterId": 284241,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_ZipCode",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Michigan",
              "ParameterId": 284240,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Michigan",
              "ParameterId": 284240,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Michigan",
              "ParameterId": 284240,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Michigan",
              "ParameterId": 284240,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Michigan",
              "ParameterId": 284240,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Michigan",
              "ParameterId": 284240,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_State",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Niles",
              "ParameterId": 284239,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Niles",
              "ParameterId": 284239,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Niles",
              "ParameterId": 284239,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Niles",
              "ParameterId": 284239,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Niles",
              "ParameterId": 284239,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Niles",
              "ParameterId": 284239,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_City",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Woodland Ave",
              "ParameterId": 284238,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Woodland Ave",
              "ParameterId": 284238,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Woodland Ave",
              "ParameterId": 284238,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Woodland Ave",
              "ParameterId": 284238,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Woodland Ave",
              "ParameterId": 284238,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Woodland Ave",
              "ParameterId": 284238,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_StreetName",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "1265",
              "ParameterId": 284237,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "1265",
              "ParameterId": 284237,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "1265",
              "ParameterId": 284237,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "1265",
              "ParameterId": 284237,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "1265",
              "ParameterId": 284237,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "1265",
              "ParameterId": 284237,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_HouseNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "913-355-5744",
              "ParameterId": 284236,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "913-355-5744",
              "ParameterId": 284236,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "913-355-5744",
              "ParameterId": 284236,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "913-355-5744",
              "ParameterId": 284236,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "913-355-5744",
              "ParameterId": 284236,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "913-355-5744",
              "ParameterId": 284236,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_MobilePhone",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "913-355-5744",
              "ParameterId": 284235,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "913-355-5744",
              "ParameterId": 284235,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "913-355-5744",
              "ParameterId": 284235,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "913-355-5744",
              "ParameterId": 284235,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "913-355-5744",
              "ParameterId": 284235,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "913-355-5744",
              "ParameterId": 284235,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_HomePhone",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "0884112995",
              "ParameterId": 284234,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "4196968412",
              "ParameterId": 284234,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "7996605559",
              "ParameterId": 284234,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "4052192941",
              "ParameterId": 284234,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "1297518898",
              "ParameterId": 284234,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "6485726262",
              "ParameterId": 284234,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_AccountNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "10/8/2021",
              "ParameterId": 284233,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "10/8/2021",
              "ParameterId": 284233,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "10/8/2021",
              "ParameterId": 284233,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "10/8/2021",
              "ParameterId": 284233,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "10/8/2021",
              "ParameterId": 284233,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "10/8/2021",
              "ParameterId": 284233,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_BQEffectiveDate",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "MI",
              "ParameterId": 284232,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "MI",
              "ParameterId": 284232,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "MI",
              "ParameterId": 284232,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "MI",
              "ParameterId": 284232,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "MI",
              "ParameterId": 284232,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "MI",
              "ParameterId": 284232,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_BQState",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "AUT",
              "ParameterId": 284231,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "AUT",
              "ParameterId": 284231,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "AUT",
              "ParameterId": 284231,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "AUT",
              "ParameterId": 284231,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "AUT",
              "ParameterId": 284231,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "AUT",
              "ParameterId": 284231,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_BQProduct",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 284288,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No",
              "ParameterId": 284288,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No",
              "ParameterId": 284288,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No",
              "ParameterId": 284288,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No",
              "ParameterId": 284288,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No",
              "ParameterId": 284288,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_YesorNoForVehicleModification",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 284289,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No",
              "ParameterId": 284289,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No",
              "ParameterId": 284289,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No",
              "ParameterId": 284289,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No",
              "ParameterId": 284289,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No",
              "ParameterId": 284289,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_YesorNoForSnowPlow",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No existing damage to the vehicle",
              "ParameterId": 284290,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No existing damage to the vehicle",
              "ParameterId": 284290,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No existing damage to the vehicle",
              "ParameterId": 284290,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No existing damage to the vehicle",
              "ParameterId": 284290,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No existing damage to the vehicle",
              "ParameterId": 284290,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No existing damage to the vehicle",
              "ParameterId": 284290,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_ExistingDamage",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "SHANNON YGGFTKNWXZ",
              "ParameterId": 284291,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "SHANNON YGGFTKNWXZ",
              "ParameterId": 284291,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "SHANNON YGGFTKNWXZ",
              "ParameterId": 284291,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "SHANNON YGGFTKNWXZ",
              "ParameterId": 284291,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "SHANNON YGGFTKNWXZ",
              "ParameterId": 284291,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "SHANNON YGGFTKNWXZ",
              "ParameterId": 284291,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_NamedInsured",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Essential AND EFT1",
              "ParameterId": 284292,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Advantage AND EFT1",
              "ParameterId": 284292,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Essential AND EFT1",
              "ParameterId": 284292,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Essential AND EFT1",
              "ParameterId": 284292,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Advantage AND EFT6",
              "ParameterId": 284292,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Essential AND EFT1",
              "ParameterId": 284292,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PaymentPlan",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 284293,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No",
              "ParameterId": 284293,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No",
              "ParameterId": 284293,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No",
              "ParameterId": 284293,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No",
              "ParameterId": 284293,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No",
              "ParameterId": 284293,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_AutoLosses",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 284294,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No",
              "ParameterId": 284294,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No",
              "ParameterId": 284294,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No",
              "ParameterId": 284294,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No",
              "ParameterId": 284294,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No",
              "ParameterId": 284294,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DrivingViolations",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 284295,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No",
              "ParameterId": 284295,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No",
              "ParameterId": 284295,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No",
              "ParameterId": 284295,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No",
              "ParameterId": 284295,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No",
              "ParameterId": 284295,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_EFTAddendum",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Classic",
              "ParameterId": 284296,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Classic",
              "ParameterId": 284296,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Classic",
              "ParameterId": 284296,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Classic",
              "ParameterId": 284296,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Classic",
              "ParameterId": 284296,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Classic",
              "ParameterId": 284296,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_MembershipCoverage",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "No",
              "ParameterId": 284297,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "No",
              "ParameterId": 284297,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "No",
              "ParameterId": 284297,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "No",
              "ParameterId": 284297,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "No",
              "ParameterId": 284297,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "No",
              "ParameterId": 284297,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_AAADriveParticipation",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "1/1/2020",
              "ParameterId": 284298,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "1/1/2020",
              "ParameterId": 284298,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "1/1/2020",
              "ParameterId": 284298,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "1/1/2020",
              "ParameterId": 284298,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "1/1/2020",
              "ParameterId": 284298,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "1/1/2020",
              "ParameterId": 284298,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_ExpirationDate",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "1/1/2021",
              "ParameterId": 284299,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "1/1/2021",
              "ParameterId": 284299,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "1/1/2021",
              "ParameterId": 284299,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "1/1/2021",
              "ParameterId": 284299,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "1/1/2021",
              "ParameterId": 284299,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "1/1/2021",
              "ParameterId": 284299,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PurchasedDate",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Information Technology",
              "ParameterId": 284300,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Information Technology",
              "ParameterId": 284300,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Information Technology",
              "ParameterId": 284300,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Information Technology",
              "ParameterId": 284300,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Information Technology",
              "ParameterId": 284300,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Information Technology",
              "ParameterId": 284300,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_Industry",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Dean",
              "ParameterId": 284301,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Dean",
              "ParameterId": 284301,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Dean",
              "ParameterId": 284301,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Dean",
              "ParameterId": 284301,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Dean",
              "ParameterId": 284301,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Dean",
              "ParameterId": 284301,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_Occupation",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Graduate Work or Degree",
              "ParameterId": 284302,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Graduate Work or Degree",
              "ParameterId": 284302,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Graduate Work or Degree",
              "ParameterId": 284302,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Graduate Work or Degree",
              "ParameterId": 284302,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Graduate Work or Degree",
              "ParameterId": 284302,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Graduate Work or Degree",
              "ParameterId": 284302,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_EducationLevel",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "4111111111111111",
              "ParameterId": 284303,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "4111111111111111",
              "ParameterId": 284303,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "4111111111111111",
              "ParameterId": 284303,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "4111111111111111",
              "ParameterId": 284303,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "4111111111111111",
              "ParameterId": 284303,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "4111111111111111",
              "ParameterId": 284303,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_ManagePaymentCreditCardNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "10",
              "ParameterId": 284304,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "10",
              "ParameterId": 284304,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "10",
              "ParameterId": 284304,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "10",
              "ParameterId": 284304,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "10",
              "ParameterId": 284304,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "10",
              "ParameterId": 284304,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_ManagePaymentExpMonth",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "2025",
              "ParameterId": 284305,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "2025",
              "ParameterId": 284305,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "2025",
              "ParameterId": 284305,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "2025",
              "ParameterId": 284305,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "2025",
              "ParameterId": 284305,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "2025",
              "ParameterId": 284305,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_ManagePaymentExpYear",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "QTE531018494 has been bound.",
              "ParameterId": 284306,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "QTE531018495 has been bound.",
              "ParameterId": 284306,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "QTE531018497 has been bound.",
              "ParameterId": 284306,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "QTE531018499 has been bound.",
              "ParameterId": 284306,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "QTE531018500 has been bound.",
              "ParameterId": 284306,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "QTE531018502 has been bound.",
              "ParameterId": 284306,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicySubmissionID",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "020-0151-56803",
              "ParameterId": 284307,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "020-0151-56803",
              "ParameterId": 284307,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "020-0151-56803",
              "ParameterId": 284307,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "020-0151-56803",
              "ParameterId": 284307,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "020-0151-56803",
              "ParameterId": 284307,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "020-0151-56803",
              "ParameterId": 284307,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_ReceiptNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "MSA731004214",
              "ParameterId": 284308,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "MSA731004215",
              "ParameterId": 284308,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "MSA731004216",
              "ParameterId": 284308,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "MSA731004217",
              "ParameterId": 284308,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "MSA731004218",
              "ParameterId": 284308,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "MSA731004219",
              "ParameterId": 284308,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PolicyNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "$100,000/$300,000",
              "ParameterId": 284309,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "$250,000/$500,000",
              "ParameterId": 284309,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "$500,000/$1,000,000",
              "ParameterId": 284309,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "$250,000/$500,000",
              "ParameterId": 284309,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "$500,000/$500,000",
              "ParameterId": 284309,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "$100,000/$300,000",
              "ParameterId": 284309,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_LiabilityBodilyInjuryLimit",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "$1,000,000",
              "ParameterId": 284310,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "$10,000",
              "ParameterId": 284310,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "$10,000",
              "ParameterId": 284310,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "$100,000",
              "ParameterId": 284310,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "$250,000",
              "ParameterId": 284310,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "$1,000,000",
              "ParameterId": 284310,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PropertyDamageLiabilityLimit",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "$1,00",
              "ParameterId": 284311,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "$1,000",
              "ParameterId": 284311,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "$1,000",
              "ParameterId": 284311,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "$750",
              "ParameterId": 284311,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "$1,000",
              "ParameterId": 284311,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "$1,000",
              "ParameterId": 284311,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_ComprehensiveDiductible",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "$2,000",
              "ParameterId": 284312,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "$2,000",
              "ParameterId": 284312,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "$2,000",
              "ParameterId": 284312,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "$2,000",
              "ParameterId": 284312,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "$2,000",
              "ParameterId": 284312,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "$2,000",
              "ParameterId": 284312,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_MedicalPaymentLimit",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "$500",
              "ParameterId": 284313,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "$500",
              "ParameterId": 284313,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "$500",
              "ParameterId": 284313,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "$500",
              "ParameterId": 284313,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "$500",
              "ParameterId": 284313,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "$500",
              "ParameterId": 284313,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_MotoristPropertyDamageDiductible",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "$50,000/$100,000",
              "ParameterId": 284314,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "$50,000/$100,000",
              "ParameterId": 284314,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "$50,000/$100,000",
              "ParameterId": 284314,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "$50,000/$100,000",
              "ParameterId": 284314,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "$50,000/$100,000",
              "ParameterId": 284314,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "$50,000/$100,000",
              "ParameterId": 284314,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_MotoristBodilyInjuryPackage",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "$50,000",
              "ParameterId": 284315,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "$50,000",
              "ParameterId": 284315,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "$50,000",
              "ParameterId": 284315,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "$50,000",
              "ParameterId": 284315,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "$50,000",
              "ParameterId": 284315,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "$50,000",
              "ParameterId": 284315,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_MotoristPropertyDamageLimit",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "$1,000",
              "ParameterId": 284316,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "$1,000",
              "ParameterId": 284316,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "$1,000",
              "ParameterId": 284316,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "$1,000",
              "ParameterId": 284316,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "$1,000",
              "ParameterId": 284316,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "$1,000",
              "ParameterId": 284316,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_ExtraEquipment",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "$50 / $1,500",
              "ParameterId": 284317,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "$50 / $1,500",
              "ParameterId": 284317,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "$50 / $1,500",
              "ParameterId": 284317,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "$50 / $1,500",
              "ParameterId": 284317,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "$50 / $1,500",
              "ParameterId": 284317,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "$50 / $1,500",
              "ParameterId": 284317,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_CarRentalLimit",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "$750",
              "ParameterId": 284318,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "$750",
              "ParameterId": 284318,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "$750",
              "ParameterId": 284318,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "$750",
              "ParameterId": 284318,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "$750",
              "ParameterId": 284318,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "$750",
              "ParameterId": 284318,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_CollisionDiductible",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Reduced",
              "ParameterId": 284319,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Reduced",
              "ParameterId": 284319,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Reduced",
              "ParameterId": 284319,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Reduced",
              "ParameterId": 284319,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Reduced",
              "ParameterId": 284319,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Reduced",
              "ParameterId": 284319,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_MotoristPropertyDamageOption",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Reduced",
              "ParameterId": 284320,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Reduced",
              "ParameterId": 284320,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Reduced",
              "ParameterId": 284320,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Reduced",
              "ParameterId": 284320,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Reduced",
              "ParameterId": 284320,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Reduced",
              "ParameterId": 284320,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_MotoristBodilyInjustOption",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "$2,000",
              "ParameterId": 284321,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "$1,000",
              "ParameterId": 284321,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "$1,000",
              "ParameterId": 284321,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "$500",
              "ParameterId": 284321,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "$750",
              "ParameterId": 284321,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "$2,000",
              "ParameterId": 284321,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_CollisionLimit",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "12031002101",
              "ParameterId": 284322,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "12031002101",
              "ParameterId": 284322,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "12031002101",
              "ParameterId": 284322,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "12031002101",
              "ParameterId": 284322,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "12031002101",
              "ParameterId": 284322,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "12031002101",
              "ParameterId": 284322,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_CensusTrack",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "password123",
              "ParameterId": 284323,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "password123",
              "ParameterId": 284323,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "password123",
              "ParameterId": 284323,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "password123",
              "ParameterId": 284323,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "password123",
              "ParameterId": 284323,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "password123",
              "ParameterId": 284323,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_Password",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "p77190",
              "ParameterId": 284324,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "p77190",
              "ParameterId": 284324,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "p77190",
              "ParameterId": 284324,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "p77190",
              "ParameterId": 284324,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "p77190",
              "ParameterId": 284324,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "p77190",
              "ParameterId": 284324,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_UserName",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "https://qa07pxyvip01.aaa-acg.net/aba/agentbrowser/#/CustomerSearch",
              "ParameterId": 284325,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "https://qa07pxyvip01.aaa-acg.net/aba/agentbrowser/#/CustomerSearch",
              "ParameterId": 284325,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "https://qa07pxyvip01.aaa-acg.net/aba/agentbrowser/#/CustomerSearch",
              "ParameterId": 284325,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "https://qa07pxyvip01.aaa-acg.net/aba/agentbrowser/#/CustomerSearch",
              "ParameterId": 284325,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "https://qa07pxyvip01.aaa-acg.net/aba/agentbrowser/#/CustomerSearch",
              "ParameterId": 284325,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "https://qa07pxyvip01.aaa-acg.net/aba/agentbrowser/#/CustomerSearch",
              "ParameterId": 284325,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_URL",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "$50,000/$100,000",
              "ParameterId": 284326,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "$50,000/$100,000",
              "ParameterId": 284326,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "$50,000/$100,000",
              "ParameterId": 284326,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "$50,000/$100,000",
              "ParameterId": 284326,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "$50,000/$100,000",
              "ParameterId": 284326,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "$50,000/$100,000",
              "ParameterId": 284326,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_MotoristBodilyInjuryLimit",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Stacked",
              "ParameterId": 284327,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Stacked",
              "ParameterId": 284327,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Stacked",
              "ParameterId": 284327,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Stacked",
              "ParameterId": 284327,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Stacked",
              "ParameterId": 284327,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Stacked",
              "ParameterId": 284327,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_MotoristStackingOption",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Named Insured",
              "ParameterId": 284328,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Named Insured",
              "ParameterId": 284328,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Named Insured",
              "ParameterId": 284328,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Named Insured",
              "ParameterId": 284328,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Named Insured",
              "ParameterId": 284328,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Named Insured",
              "ParameterId": 284328,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PersonalInjuryProtectionAppliesTo",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Excluded",
              "ParameterId": 284329,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Excluded",
              "ParameterId": 284329,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Excluded",
              "ParameterId": 284329,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Excluded",
              "ParameterId": 284329,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Excluded",
              "ParameterId": 284329,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Excluded",
              "ParameterId": 284329,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PersonalInjuryProtectionWorkLoss",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "$500",
              "ParameterId": 284330,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "$500",
              "ParameterId": 284330,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "$500",
              "ParameterId": 284330,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "$500",
              "ParameterId": 284330,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "$500",
              "ParameterId": 284330,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "$500",
              "ParameterId": 284330,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PersonalInjuryProtectionDeductible",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "p77190",
              "ParameterId": 284331,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "p77190",
              "ParameterId": 284331,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "p77190",
              "ParameterId": 284331,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "p77190",
              "ParameterId": 284331,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "p77190",
              "ParameterId": 284331,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "p77190",
              "ParameterId": 284331,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_UWUserName",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "4290147151158417",
              "ParameterId": 284332,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "4290147151158417",
              "ParameterId": 284332,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "4290147151158417",
              "ParameterId": 284332,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "4290147151158417",
              "ParameterId": 284332,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "4290147151158417",
              "ParameterId": 284332,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "4290147151158417",
              "ParameterId": 284332,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_MembershipNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "2023",
              "ParameterId": 284333,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "2023",
              "ParameterId": 284333,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "2023",
              "ParameterId": 284333,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "2023",
              "ParameterId": 284333,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "2023",
              "ParameterId": 284333,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "2023",
              "ParameterId": 284333,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_MemberSince",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "TERRY AND BROWN AND Male AND 6/21/1989 AND Married AND Home AND 2232332331 AND 3221322133 AND Yes AND Spouse AND M60017642276 AND 666-58-1961 AND Employed AND GA AND Information Technology AND Other AND Graduate Work or Degree AND No AND No AND Continuous for prior 6 months or more AND 21st Century Insurance Company AND 250 AND 01/01/2020 AND 3 AND Primary",
              "ParameterId": 284334,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "TERRY AND BROWN AND Male AND 6/21/1989 AND Married AND Home AND 2232332331 AND 3221322133 AND Yes AND Spouse AND M60017642276 AND 666-58-1961 AND Employed AND GA AND Information Technology AND Other AND Graduate Work or Degree AND No AND No AND Continuous for prior 6 months or more AND 21st Century Insurance Company AND 250 AND 01/01/2020 AND 3 AND Primary",
              "ParameterId": 284334,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "TERRY AND BROWN AND Male AND 6/21/1989 AND Married AND Home AND 2232332331 AND 3221322133 AND Yes AND Spouse AND M60017642276 AND 666-58-1961 AND Employed AND GA AND Information Technology AND Other AND Graduate Work or Degree AND No AND No AND Continuous for prior 6 months or more AND 21st Century Insurance Company AND 250 AND 01/01/2020 AND 3 AND Primary",
              "ParameterId": 284334,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "TERRY AND BROWN AND Male AND 6/21/1989 AND Married AND Home AND 2232332331 AND 3221322133 AND Yes AND Spouse AND M60017642276 AND 666-58-1961 AND Employed AND GA AND Information Technology AND Other AND Graduate Work or Degree AND No AND No AND Continuous for prior 6 months or more AND 21st Century Insurance Company AND 250 AND 01/01/2020 AND 3 AND Primary",
              "ParameterId": 284334,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "TERRY AND BROWN AND Male AND 6/21/1989 AND Married AND Home AND 2232332331 AND 3221322133 AND Yes AND Spouse AND M60017642276 AND 666-58-1961 AND Employed AND GA AND Information Technology AND Other AND Graduate Work or Degree AND No AND No AND Continuous for prior 6 months or more AND 21st Century Insurance Company AND 250 AND 01/01/2020 AND 3 AND Primary",
              "ParameterId": 284334,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "TERRY AND BROWN AND Male AND 6/21/1989 AND Married AND Home AND 2232332331 AND 3221322133 AND Yes AND Spouse AND M60017642276 AND 666-58-1961 AND Employed AND GA AND Information Technology AND Other AND Graduate Work or Degree AND No AND No AND Continuous for prior 6 months or more AND 21st Century Insurance Company AND 250 AND 01/01/2020 AND 3 AND Primary",
              "ParameterId": 284334,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_AdditionalDrivers",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Yes",
              "ParameterId": 284335,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Yes",
              "ParameterId": 284335,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Yes",
              "ParameterId": 284335,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Yes",
              "ParameterId": 284335,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Yes",
              "ParameterId": 284335,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Yes",
              "ParameterId": 284335,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_paperlessGeneralDocumentsConsentToText",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Regular AND Private Passenger AND No AND VIN AND 1J4GK48K52W328918 AND Yes AND Yes AND Passive AND No AND Pleasure AND 10000 AND Yes AND Owned AND No AND No existing damage to the vehicle AND IRIS AND Yes AND MI AND No",
              "ParameterId": 284336,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Regular AND Private Passenger AND No AND VIN AND 1J4GK48K52W328918 AND Yes AND Yes AND Passive AND No AND Pleasure AND 10000 AND Yes AND Owned AND No AND No existing damage to the vehicle AND IRIS AND Yes AND MI AND No",
              "ParameterId": 284336,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Regular AND Private Passenger AND No AND VIN AND 1J4GK48K52W328918 AND Yes AND Yes AND Passive AND No AND Pleasure AND 10000 AND Yes AND Owned AND No AND No existing damage to the vehicle AND IRIS AND Yes AND MI AND No",
              "ParameterId": 284336,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Regular AND Private Passenger AND No AND VIN AND 1J4GK48K52W328918 AND Yes AND Yes AND Passive AND No AND Pleasure AND 10000 AND Yes AND Owned AND No AND No existing damage to the vehicle AND IRIS AND Yes AND MI AND No",
              "ParameterId": 284336,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Regular AND Private Passenger AND No AND VIN AND 1J4GK48K52W328918 AND Yes AND Yes AND Passive AND No AND Pleasure AND 10000 AND Yes AND Owned AND No AND No existing damage to the vehicle AND IRIS AND Yes AND MI AND No",
              "ParameterId": 284336,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Regular AND Private Passenger AND No AND VIN AND 1J4GK48K52W328918 AND Yes AND Yes AND Passive AND No AND Pleasure AND 10000 AND Yes AND Owned AND No AND No existing damage to the vehicle AND IRIS AND Yes AND MI AND No",
              "ParameterId": 284336,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_AdddAdditionalvehicles",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "MI AND $500 AND $250",
              "ParameterId": 284337,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "MI AND $500 AND $250",
              "ParameterId": 284337,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "MI AND $500 AND $250",
              "ParameterId": 284337,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "MI AND $500 AND $250",
              "ParameterId": 284337,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "MI AND $500 AND $250",
              "ParameterId": 284337,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "MI AND $500 AND $250",
              "ParameterId": 284337,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_MIPICoverDetails",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "p77190",
              "ParameterId": 284338,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "p77190",
              "ParameterId": 284338,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "p77190",
              "ParameterId": 284338,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "p77190",
              "ParameterId": 284338,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "p77190",
              "ParameterId": 284338,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "p77190",
              "ParameterId": 284338,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_LoginUsername",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "05/15/2023",
              "ParameterId": 284339,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "05/15/2023",
              "ParameterId": 284339,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "05/15/2023",
              "ParameterId": 284339,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "05/15/2023",
              "ParameterId": 284339,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "05/15/2023",
              "ParameterId": 284339,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "05/15/2023",
              "ParameterId": 284339,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_CancelEffectiveDate",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Auto AND UW AND FNTest",
              "ParameterId": 284340,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Auto AND UW AND FNTest",
              "ParameterId": 284340,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Auto AND UW AND FNTest",
              "ParameterId": 284340,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Auto AND UW AND FNTest",
              "ParameterId": 284340,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Auto AND UW AND FNTest",
              "ParameterId": 284340,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Auto AND UW AND FNTest",
              "ParameterId": 284340,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PerformQuote",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Member Service Center",
              "ParameterId": 284341,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Member Service Center",
              "ParameterId": 284341,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Member Service Center",
              "ParameterId": 284341,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Member Service Center",
              "ParameterId": 284341,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Member Service Center",
              "ParameterId": 284341,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Member Service Center",
              "ParameterId": 284341,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_VerifyContent",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "11/22/2022",
              "ParameterId": 284342,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "11/22/2022",
              "ParameterId": 284342,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "11/22/2022",
              "ParameterId": 284342,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "11/22/2022",
              "ParameterId": 284342,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "11/22/2022",
              "ParameterId": 284342,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "11/22/2022",
              "ParameterId": 284342,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DocumentDate",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "The Auto Club Group AND 170404296",
              "ParameterId": 284343,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "The Auto Club Group AND 170404296",
              "ParameterId": 284343,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "The Auto Club Group AND 170404296",
              "ParameterId": 284343,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "The Auto Club Group AND 170404296",
              "ParameterId": 284343,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "The Auto Club Group AND 170404296",
              "ParameterId": 284343,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "The Auto Club Group AND 170404296",
              "ParameterId": 284343,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_OrgAndProdCode",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Received",
              "ParameterId": 284344,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Received",
              "ParameterId": 284344,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Received",
              "ParameterId": 284344,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Received",
              "ParameterId": 284344,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Received",
              "ParameterId": 284344,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Received",
              "ParameterId": 284344,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_StatusValue",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Paperless Discount Terms AND Required",
              "ParameterId": 284345,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Paperless Discount Terms AND Required",
              "ParameterId": 284345,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Paperless Discount Terms AND Required",
              "ParameterId": 284345,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Paperless Discount Terms AND Required",
              "ParameterId": 284345,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Paperless Discount Terms AND Required",
              "ParameterId": 284345,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Paperless Discount Terms AND Required",
              "ParameterId": 284345,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_TrailingDocs",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "ALICE PATERSON 02/02/1951 - Previous AND Received",
              "ParameterId": 284346,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "ALICE PATERSON 02/02/1951 - Previous AND Received",
              "ParameterId": 284346,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "ALICE PATERSON 02/02/1951 - Previous AND Received",
              "ParameterId": 284346,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "ALICE PATERSON 02/02/1951 - Previous AND Received",
              "ParameterId": 284346,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "ALICE PATERSON 02/02/1951 - Previous AND Received",
              "ParameterId": 284346,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "ALICE PATERSON 02/02/1951 - Previous AND Received",
              "ParameterId": 284346,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_TrailingDocsPC",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Educational Administrators",
              "ParameterId": 284347,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Educational Administrators",
              "ParameterId": 284347,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Educational Administrators",
              "ParameterId": 284347,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Educational Administrators",
              "ParameterId": 284347,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Educational Administrators",
              "ParameterId": 284347,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Educational Administrators",
              "ParameterId": 284347,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_FranchiseGroup",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Michigan",
              "ParameterId": 284348,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Michigan",
              "ParameterId": 284348,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Michigan",
              "ParameterId": 284348,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Michigan",
              "ParameterId": 284348,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Michigan",
              "ParameterId": 284348,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Michigan",
              "ParameterId": 284348,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_SchoolState",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "Yes",
              "ParameterId": 284349,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "Yes",
              "ParameterId": 284349,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "Yes",
              "ParameterId": 284349,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "Yes",
              "ParameterId": 284349,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "Yes",
              "ParameterId": 284349,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "Yes",
              "ParameterId": 284349,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_DriverAway",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": "$50,000/$100,000",
              "ParameterId": 284350,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": "$50,000/$100,000",
              "ParameterId": 284350,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": "$50,000/$100,000",
              "ParameterId": 284350,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": "$50,000/$100,000",
              "ParameterId": 284350,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": "$50,000/$100,000",
              "ParameterId": 284350,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": "$50,000/$100,000",
              "ParameterId": 284350,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_UninsuredMotor",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_QuoteNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_CancelQuoteNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_PDFFileName",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_RewritePolicyNumber",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_FilePath",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "DT_OrderMVRPerson",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": null,
              "ParameterId": 0,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": null,
              "ParameterId": 0,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": null,
              "ParameterId": 0,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": null,
              "ParameterId": 0,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": null,
              "ParameterId": 0,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": null,
              "ParameterId": 0,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "Iteration",
          "Created": null,
          "Modified": null
        },
        {
          "TempId": 0,
          "Iterations": [
            {
              "Iteration": 1,
              "Value": null,
              "ParameterId": 0,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 2,
              "Value": null,
              "ParameterId": 0,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 3,
              "Value": null,
              "ParameterId": 0,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 4,
              "Value": null,
              "ParameterId": 0,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 5,
              "Value": null,
              "ParameterId": 0,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            },
            {
              "Iteration": 6,
              "Value": null,
              "ParameterId": 0,
              "Skip": 0,
              "Name": null,
              "Created": null,
              "Modified": null
            }
          ],
          "DataSheetId": 3072,
          "IsEncrypted": false,
          "IsShared": false,
          "Name": "Skip",
          "Created": null,
          "Modified": null
        }
      ],
      "Name": null,
      "Created": null,
      "Modified": null
    },
    "Scenario": null,
    "Authentication": null,
    "TestSteps": [
      {
        "TempId": 113311,
        "StepNumber": 1,
        "ActionId": 1,
        "ComponentId": null,
        "CustomActionId": 886,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "UserDetails",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113303,
        "StepNumber": 2,
        "ActionId": 1,
        "ComponentId": null,
        "CustomActionId": 926,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": true,
        "Description": "GetRandomFirstAndLastName",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113324,
        "StepNumber": 3,
        "ActionId": 55,
        "ComponentId": 47,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Login_to_Agent_Browser",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113324,
            "ComponentId": 47,
            "ComponentStepId": 6018,
            "TestCase": null,
            "Value": "DT_URL",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113324,
            "ComponentId": 47,
            "ComponentStepId": 6019,
            "TestCase": null,
            "Value": "DT_URL",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113324,
            "ComponentId": 47,
            "ComponentStepId": 6020,
            "TestCase": null,
            "Value": "DT_URL",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113324,
            "ComponentId": 47,
            "ComponentStepId": 6021,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113324,
            "ComponentId": 47,
            "ComponentStepId": 6022,
            "TestCase": null,
            "Value": "executenextSteps:3",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113324,
            "ComponentId": 47,
            "ComponentStepId": 6024,
            "TestCase": null,
            "Value": "executenextSteps:3",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113324,
            "ComponentId": 47,
            "ComponentStepId": 6025,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113324,
            "ComponentId": 47,
            "ComponentStepId": 6026,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113324,
            "ComponentId": 47,
            "ComponentStepId": 6027,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113324,
            "ComponentId": 47,
            "ComponentStepId": 6033,
            "TestCase": null,
            "Value": "DT_UserName",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113324,
            "ComponentId": 47,
            "ComponentStepId": 6034,
            "TestCase": null,
            "Value": "DT_Password",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113324,
            "ComponentId": 47,
            "ComponentStepId": 6035,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113325,
        "StepNumber": 4,
        "ActionId": 55,
        "ComponentId": 24,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "ClickBeginQuote_bkp",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113325,
            "ComponentId": 24,
            "ComponentStepId": 5298,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113325,
            "ComponentId": 24,
            "ComponentStepId": 5299,
            "TestCase": null,
            "Value": "DT_BQProduct",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113325,
            "ComponentId": 24,
            "ComponentStepId": 5300,
            "TestCase": null,
            "Value": "DT_BQState",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113325,
            "ComponentId": 24,
            "ComponentStepId": 5301,
            "TestCase": null,
            "Value": "DT_BQEffectiveDate",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113325,
            "ComponentId": 24,
            "ComponentStepId": 5302,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113304,
        "StepNumber": 5,
        "ActionId": 47,
        "ComponentId": null,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Wait for page load",
        "Locator": null,
        "Value": "7",
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113314,
        "StepNumber": 6,
        "ActionId": 55,
        "ComponentId": 535,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "EnterAccInformation",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9679,
            "TestCase": null,
            "Value": "DT_FirstName",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9680,
            "TestCase": null,
            "Value": "DT_LastName",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9681,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9682,
            "TestCase": null,
            "Value": "5",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9683,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9684,
            "TestCase": null,
            "Value": "DT_HomePhone",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9685,
            "TestCase": null,
            "Value": "DT_MobilePhone",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9686,
            "TestCase": null,
            "Value": "DT_PolicyInfoEmail",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9687,
            "TestCase": null,
            "Value": "DT_HouseNumber",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9688,
            "TestCase": null,
            "Value": "DT_StreetName",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9689,
            "TestCase": null,
            "Value": "DT_City",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9690,
            "TestCase": null,
            "Value": "DT_State",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9691,
            "TestCase": null,
            "Value": "DT_ZipCode",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9692,
            "TestCase": null,
            "Value": "DT_SSN",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9693,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9694,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9695,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9696,
            "TestCase": null,
            "Value": "DT_DriversGender",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9697,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9699,
            "TestCase": null,
            "Value": "executenextSteps:1",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9700,
            "TestCase": null,
            "Value": "executenextSteps:1",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9701,
            "TestCase": null,
            "Value": "executenextSteps:1",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9702,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9703,
            "TestCase": null,
            "Value": "executenextSteps:1",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9704,
            "TestCase": null,
            "Value": "DT_CensusTrack",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9705,
            "TestCase": null,
            "Value": "executenextSteps:1",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9706,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9707,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9708,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9709,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9710,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9711,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9712,
            "TestCase": null,
            "Value": "DT_City",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9713,
            "TestCase": null,
            "Value": "5",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9714,
            "TestCase": null,
            "Value": "The Auto Club Group AND 1331421",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113314,
            "ComponentId": 535,
            "ComponentStepId": 9715,
            "TestCase": null,
            "Value": "7",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113323,
        "StepNumber": 7,
        "ActionId": 55,
        "ComponentId": 74,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Policy_Menu",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113323,
            "ComponentId": 74,
            "ComponentStepId": 6476,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113323,
            "ComponentId": 74,
            "ComponentStepId": 6477,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113312,
        "StepNumber": 8,
        "ActionId": 1,
        "ComponentId": null,
        "CustomActionId": 989,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "AjaxWait",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113318,
        "StepNumber": 9,
        "ActionId": 55,
        "ComponentId": 208,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "StartPolicySubmission",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113318,
            "ComponentId": 208,
            "ComponentStepId": 1431,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113318,
            "ComponentId": 208,
            "ComponentStepId": 1432,
            "TestCase": null,
            "Value": "Single",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113318,
            "ComponentId": 208,
            "ComponentStepId": 1435,
            "TestCase": null,
            "Value": "Yes",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113318,
            "ComponentId": 208,
            "ComponentStepId": 1438,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113318,
            "ComponentId": 208,
            "ComponentStepId": 1445,
            "TestCase": null,
            "Value": "7",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113318,
            "ComponentId": 208,
            "ComponentStepId": 1446,
            "TestCase": null,
            "Value": "Qualification",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113318,
            "ComponentId": 208,
            "ComponentStepId": 1451,
            "TestCase": null,
            "Value": "\tThe Auto Club Group AND 1331421",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113318,
            "ComponentId": 208,
            "ComponentStepId": 1452,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113318,
            "ComponentId": 208,
            "ComponentStepId": 1453,
            "TestCase": null,
            "Value": "DT_AccountNumber",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113318,
            "ComponentId": 208,
            "ComponentStepId": 1454,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113319,
        "StepNumber": 10,
        "ActionId": 55,
        "ComponentId": 203,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Qualification",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113319,
            "ComponentId": 203,
            "ComponentStepId": 1329,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113313,
        "StepNumber": 11,
        "ActionId": 1,
        "ComponentId": null,
        "CustomActionId": 989,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "AjaxWait",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113326,
        "StepNumber": 12,
        "ActionId": 55,
        "ComponentId": 73,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Policy_Info_Other_states",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113326,
            "ComponentId": 73,
            "ComponentStepId": 6437,
            "TestCase": null,
            "Value": "5",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113326,
            "ComponentId": 73,
            "ComponentStepId": 6439,
            "TestCase": null,
            "Value": "DT_MembershipNumber",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113326,
            "ComponentId": 73,
            "ComponentStepId": 6440,
            "TestCase": null,
            "Value": "DT_MemberSince",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113326,
            "ComponentId": 73,
            "ComponentStepId": 6444,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113326,
            "ComponentId": 73,
            "ComponentStepId": 6445,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113326,
            "ComponentId": 73,
            "ComponentStepId": 6446,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113326,
            "ComponentId": 73,
            "ComponentStepId": 6447,
            "TestCase": null,
            "Value": "DT_PolicyInfoYesorNoPreviousAddr",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113326,
            "ComponentId": 73,
            "ComponentStepId": 6448,
            "TestCase": null,
            "Value": "Yes",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113326,
            "ComponentId": 73,
            "ComponentStepId": 6449,
            "TestCase": null,
            "Value": "DT_PolicyInfoYesorNoFirstCompanyForInsurance",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113326,
            "ComponentId": 73,
            "ComponentStepId": 6453,
            "TestCase": null,
            "Value": "5",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113326,
            "ComponentId": 73,
            "ComponentStepId": 6454,
            "TestCase": null,
            "Value": "1/10/1958",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113326,
            "ComponentId": 73,
            "ComponentStepId": 6456,
            "TestCase": null,
            "Value": "2",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113326,
            "ComponentId": 73,
            "ComponentStepId": 6459,
            "TestCase": null,
            "Value": "2",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113326,
            "ComponentId": 73,
            "ComponentStepId": 6462,
            "TestCase": null,
            "Value": "DT_PolicyInfoMaritalStatus",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113326,
            "ComponentId": 73,
            "ComponentStepId": 6470,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113309,
        "StepNumber": 13,
        "ActionId": 1,
        "ComponentId": null,
        "CustomActionId": 989,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "AjaxWait",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113321,
        "StepNumber": 14,
        "ActionId": 55,
        "ComponentId": 4,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Add_and_Reconcile_Driver",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113321,
            "ComponentId": 4,
            "ComponentStepId": 4955,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113320,
        "StepNumber": 15,
        "ActionId": 55,
        "ComponentId": 142,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Add New Driver",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113320,
            "ComponentId": 142,
            "ComponentStepId": 448,
            "TestCase": null,
            "Value": "8",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113320,
            "ComponentId": 142,
            "ComponentStepId": 454,
            "TestCase": null,
            "Value": "Drivers",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113320,
            "ComponentId": 142,
            "ComponentStepId": 455,
            "TestCase": null,
            "Value": "DT_DriversLicenseNumber",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113316,
        "StepNumber": 16,
        "ActionId": 47,
        "ComponentId": null,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Wait For PageLoad",
        "Locator": null,
        "Value": "6",
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113315,
        "StepNumber": 17,
        "ActionId": 55,
        "ComponentId": 190,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Add_AdditionalDetails",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 824,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 827,
            "TestCase": null,
            "Value": "DT_DriversBidilyInjuryLimit",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 828,
            "TestCase": null,
            "Value": "DT_DriversFullYearWithPriorCarrier",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 831,
            "TestCase": null,
            "Value": "3",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 832,
            "TestCase": null,
            "Value": "DT_DriversEmpStatus",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 833,
            "TestCase": null,
            "Value": "DT_ExpirationDate",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 834,
            "TestCase": null,
            "Value": "DT_Industry",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 835,
            "TestCase": null,
            "Value": "Dean",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 836,
            "TestCase": null,
            "Value": "DT_EducationLevel",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 838,
            "TestCase": null,
            "Value": "DT_NamedInsured",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 839,
            "TestCase": null,
            "Value": "DT_DriversWorklossCoordi",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 840,
            "TestCase": null,
            "Value": "executenextSteps:5",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 841,
            "TestCase": null,
            "Value": "executenextSteps:1",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 842,
            "TestCase": null,
            "Value": "executenextSteps:1",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 843,
            "TestCase": null,
            "Value": "executenextSteps:1",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 844,
            "TestCase": null,
            "Value": "DT_DriversPriorAutoInsurance",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 845,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 848,
            "TestCase": null,
            "Value": "6",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 849,
            "TestCase": null,
            "Value": "21st Century Insurance Company",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113315,
            "ComponentId": 190,
            "ComponentStepId": 850,
            "TestCase": null,
            "Value": "Educational Administrators",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113305,
        "StepNumber": 18,
        "ActionId": 1,
        "ComponentId": null,
        "CustomActionId": 877,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "ClickOnNextBtn",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113310,
        "StepNumber": 19,
        "ActionId": 1,
        "ComponentId": null,
        "CustomActionId": 989,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "AjaxWait",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113322,
        "StepNumber": 20,
        "ActionId": 55,
        "ComponentId": 101,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Reports_Other_States",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113322,
            "ComponentId": 101,
            "ComponentStepId": 6753,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113322,
            "ComponentId": 101,
            "ComponentStepId": 6754,
            "TestCase": null,
            "Value": "Reports",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113322,
            "ComponentId": 101,
            "ComponentStepId": 6755,
            "TestCase": null,
            "Value": "DT_ReportsInsuranceScoreOrdered",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113322,
            "ComponentId": 101,
            "ComponentStepId": 6756,
            "TestCase": null,
            "Value": "3",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113317,
        "StepNumber": 21,
        "ActionId": 55,
        "ComponentId": 14,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "AddAdditionalVehicles",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113317,
            "ComponentId": 14,
            "ComponentStepId": 5198,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113317,
            "ComponentId": 14,
            "ComponentStepId": 5199,
            "TestCase": null,
            "Value": "3",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113317,
            "ComponentId": 14,
            "ComponentStepId": 5200,
            "TestCase": null,
            "Value": "DT_AdddAdditionalvehicles",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113297,
        "StepNumber": 22,
        "ActionId": 55,
        "ComponentId": 1075,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "AAADrive",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113297,
            "ComponentId": 1075,
            "ComponentStepId": 15486,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113297,
            "ComponentId": 1075,
            "ComponentStepId": 15487,
            "TestCase": null,
            "Value": "5",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113298,
        "StepNumber": 23,
        "ActionId": 1,
        "ComponentId": null,
        "CustomActionId": 877,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "ClickOnNextBtn",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113299,
        "StepNumber": 24,
        "ActionId": 1,
        "ComponentId": null,
        "CustomActionId": 925,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "AjaxWait_Copy",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113293,
        "StepNumber": 25,
        "ActionId": 55,
        "ComponentId": 1102,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "TestData_Coverage",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113293,
            "ComponentId": 1102,
            "ComponentStepId": 15790,
            "TestCase": null,
            "Value": "Unlimited",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113290,
        "StepNumber": 26,
        "ActionId": 47,
        "ComponentId": null,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Wait",
        "Locator": null,
        "Value": "10",
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113291,
        "StepNumber": 27,
        "ActionId": 55,
        "ComponentId": 1102,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "TestData_Coverage",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113291,
            "ComponentId": 1102,
            "ComponentStepId": 15781,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113291,
            "ComponentId": 1102,
            "ComponentStepId": 15782,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113291,
            "ComponentId": 1102,
            "ComponentStepId": 15783,
            "TestCase": null,
            "Value": "DT_LiabilityBodilyInjuryLimit",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113291,
            "ComponentId": 1102,
            "ComponentStepId": 15784,
            "TestCase": null,
            "Value": "DT_PropertyDamageLiabilityLimit",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113291,
            "ComponentId": 1102,
            "ComponentStepId": 15785,
            "TestCase": null,
            "Value": "DT_ComprehensiveDiductible",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113291,
            "ComponentId": 1102,
            "ComponentStepId": 15786,
            "TestCase": null,
            "Value": "DT_CollisionLimit",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113291,
            "ComponentId": 1102,
            "ComponentStepId": 15787,
            "TestCase": null,
            "Value": "DT_CarRentalLimit",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113291,
            "ComponentId": 1102,
            "ComponentStepId": 15788,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113291,
            "ComponentId": 1102,
            "ComponentStepId": 15789,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113291,
            "ComponentId": 1102,
            "ComponentStepId": 15794,
            "TestCase": null,
            "Value": "DT_UninsuredMotor",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113308,
        "StepNumber": 28,
        "ActionId": 55,
        "ComponentId": 653,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "SumbitFirstQuote",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113308,
            "ComponentId": 653,
            "ComponentStepId": 10292,
            "TestCase": null,
            "Value": "DT_PaymentPlan",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113308,
            "ComponentId": 653,
            "ComponentStepId": 10293,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113307,
        "StepNumber": 29,
        "ActionId": 55,
        "ComponentId": 651,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "SelectPlan_And_PaymentOption",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113307,
            "ComponentId": 651,
            "ComponentStepId": 10271,
            "TestCase": null,
            "Value": "DT_PaymentPlan",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113307,
            "ComponentId": 651,
            "ComponentStepId": 10273,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113292,
        "StepNumber": 30,
        "ActionId": 1,
        "ComponentId": null,
        "CustomActionId": 421,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": true,
        "Description": "SelectAndApproveUWIssues",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113300,
        "StepNumber": 31,
        "ActionId": 55,
        "ComponentId": 45,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Forms_With_MVR_Validation",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113300,
            "ComponentId": 45,
            "ComponentStepId": 5866,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113300,
            "ComponentId": 45,
            "ComponentStepId": 5928,
            "TestCase": null,
            "Value": null,
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113300,
            "ComponentId": 45,
            "ComponentStepId": 5967,
            "TestCase": null,
            "Value": "5",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113300,
            "ComponentId": 45,
            "ComponentStepId": 6006,
            "TestCase": null,
            "Value": "5",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113301,
        "StepNumber": 32,
        "ActionId": 55,
        "ComponentId": 1080,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "DriverAgeLicense",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113301,
            "ComponentId": 1080,
            "ComponentStepId": 15536,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113301,
            "ComponentId": 1080,
            "ComponentStepId": 15539,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113302,
        "StepNumber": 33,
        "ActionId": 55,
        "ComponentId": 45,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Forms_With_MVR_Validation",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113302,
            "ComponentId": 45,
            "ComponentStepId": 5873,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113302,
            "ComponentId": 45,
            "ComponentStepId": 5876,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113302,
            "ComponentId": 45,
            "ComponentStepId": 5917,
            "TestCase": null,
            "Value": "6",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113302,
            "ComponentId": 45,
            "ComponentStepId": 5938,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113295,
        "StepNumber": 34,
        "ActionId": 55,
        "ComponentId": 45,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Forms_With_MVR_Validation",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113295,
            "ComponentId": 45,
            "ComponentStepId": 5885,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113295,
            "ComponentId": 45,
            "ComponentStepId": 5886,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113295,
            "ComponentId": 45,
            "ComponentStepId": 5892,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113295,
            "ComponentId": 45,
            "ComponentStepId": 5894,
            "TestCase": null,
            "Value": "10",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113295,
            "ComponentId": 45,
            "ComponentStepId": 5974,
            "TestCase": null,
            "Value": "5",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113295,
            "ComponentId": 45,
            "ComponentStepId": 6005,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113294,
        "StepNumber": 35,
        "ActionId": 55,
        "ComponentId": 53,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Manage_Payments_Check",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113294,
            "ComponentId": 53,
            "ComponentStepId": 6099,
            "TestCase": null,
            "Value": "5454545454545454",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113294,
            "ComponentId": 53,
            "ComponentStepId": 6100,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113294,
            "ComponentId": 53,
            "ComponentStepId": 6101,
            "TestCase": null,
            "Value": "2025",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113294,
            "ComponentId": 53,
            "ComponentStepId": 6102,
            "TestCase": null,
            "Value": "12",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113294,
            "ComponentId": 53,
            "ComponentStepId": 6104,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113294,
            "ComponentId": 53,
            "ComponentStepId": 6105,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113294,
            "ComponentId": 53,
            "ComponentStepId": 6106,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113294,
            "ComponentId": 53,
            "ComponentStepId": 6107,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113289,
        "StepNumber": 36,
        "ActionId": 9,
        "ComponentId": null,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": 7,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Click on Save Btn",
        "Locator": "//button[contains(text(), 'Save')]",
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113288,
        "StepNumber": 37,
        "ActionId": 55,
        "ComponentId": 155,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Quote_Issue_Policy",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113288,
            "ComponentId": 155,
            "ComponentStepId": 585,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113288,
            "ComponentId": 155,
            "ComponentStepId": 586,
            "TestCase": null,
            "Value": "2",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113288,
            "ComponentId": 155,
            "ComponentStepId": 587,
            "TestCase": null,
            "Value": "Policy change",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113288,
            "ComponentId": 155,
            "ComponentStepId": 588,
            "TestCase": null,
            "Value": "2",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113288,
            "ComponentId": 155,
            "ComponentStepId": 589,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113288,
            "ComponentId": 155,
            "ComponentStepId": 590,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113306,
        "StepNumber": 38,
        "ActionId": 55,
        "ComponentId": 68,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Payment",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113306,
            "ComponentId": 68,
            "ComponentStepId": 6311,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113306,
            "ComponentId": 68,
            "ComponentStepId": 6313,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 113296,
        "StepNumber": 39,
        "ActionId": 55,
        "ComponentId": 510,
        "CustomActionId": null,
        "StepSectionId": 2,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "LocatorTypeId": null,
        "Screenshot": true,
        "SkipStep": false,
        "Description": "Submission_bound",
        "Locator": null,
        "Value": null,
        "Status": "Pending",
        "UserSays": null,
        "BotSays": null,
        "Parameters": [
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113296,
            "ComponentId": 510,
            "ComponentStepId": 8542,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113296,
            "ComponentId": 510,
            "ComponentStepId": 8543,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          },
          {
            "TestCaseId": 3072,
            "TestCaseStepId": 113296,
            "ComponentId": 510,
            "ComponentStepId": 8544,
            "TestCase": null,
            "Value": "",
            "TempId": 0,
            "qTestStepKey": null,
            "Name": null,
            "Created": null,
            "Modified": null
          }
        ],
        "Assertions": [],
        "APIParams": [],
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "Headers": [],
    "GalenGroups": [],
    "GalenObjects": [],
    "GalenSections": [],
    "TagNames": "",
    "GRDomainNameandId": null,
    "qTestTestCaseId": null,
    "Pester": null,
    "ExternalDT": null,
    "ExternalDTSheetName": null,
    "Name": "TC01_04_05_07_08_010_MI Select Auto",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 886,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.net.InetAddress;\r\nimport java.net.UnknownHostException;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.sql.Timestamp;\r\nimport java.util.Date;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport org.apache.poi.openxml4j.exceptions.InvalidFormatException;\r\nimport org.apache.poi.ss.usermodel.Cell;\r\nimport org.apache.poi.ss.usermodel.Row;\r\nimport org.apache.poi.ss.usermodel.Sheet;\r\nimport org.apache.poi.ss.usermodel.Workbook;\r\nimport org.apache.poi.ss.usermodel.WorkbookFactory;\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class UserDetails extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) throws UnknownHostException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\n\r\n\r\n\r\n/*String userDir=System.getProperty(\"user.dir\");\r\n      Path path=Paths.get(userDir);\r\nString projectName=path.getFileName().toString();*/\r\n\r\n\r\nDate date=new Date();\r\n      long time=date.getTime();\r\n      Timestamp ts=new Timestamp(time);\r\nString executionTime=ts.toString();\r\nString userName=System.getProperty(\"user.name\");\r\nString systemName=InetAddress.getLocalHost().toString();\r\n\r\n/*\r\nString[][] details = {\r\n        {userName,systemName,executionTime}      \r\n};\r\n\r\nFile xlsxFile = new File(\"\\\\\\\\hob1s01\\\\PUBLIC\\\\TALOS_Reports\\\\ExecutionDetails.xlsx\");\r\nFileInputStream inputStream = new FileInputStream(xlsxFile);\r\nWorkbook workbook = WorkbookFactory.create(inputStream);\r\nSheet sheet = workbook.getSheetAt(0);\r\nint rowCount = sheet.getLastRowNum();\r\nfor(String[] detail:details){\r\n    Row row = sheet.createRow(++rowCount);\r\n     \r\n    int columnCount = 0;\r\n    \r\n    for(String all:detail){\r\n        Cell cell = row.createCell(columnCount++);\r\n        \r\n            cell.setCellValue((all));   \r\n}\r\n\r\ninputStream.close();\r\nFileOutputStream os = new FileOutputStream(xlsxFile);\r\nworkbook.write(os);\r\nworkbook.close();\r\nos.close();\r\n \r\nSystem.out.println(\"Excel file has been updated successfully.\");\r\n\r\n\r\n} */\r\n\r\n\r\n\r\nactionResult.comments = \"User Name :\"+userName+\"<br/>\" +\"  System Name :\"+systemName+\"<br/>\"+\"   Execution time:\"+executionTime;\r\nactionResult.status   = true;\r\n\r\n\r\n\r\n}\r\n\r\n\r\ncatch(Exception e){\r\n\r\n    actionResult.status = true;\r\n           actionResult.comments =e.getMessage();\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "UserDetails",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 926,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class GetRandomFirstAndLastName extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        try{\r\n        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\");  \r\n                 LocalDateTime now = LocalDateTime.now();  \r\n                 String s = dtf.format(now).toString();\r\n                 s = s.replace(\":\", \"\");\r\n                 s = s.replace(\"/\", \"\");\r\n                 s= s.replace(\" \", \"\");\r\n                 s = s.substring(s.length() - 4);\r\n        String ch;\r\n              String s1=\"\";\r\n              for(int i=0;i<s.length();i++)\r\n              {\r\n                     //System.out.println(s.charAt(i));\r\n            Integer val=Integer.parseInt(String.valueOf(s.charAt(i)));\r\n                     ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".substring(val+1, val+2);\r\n                     System.out.println(ch);\r\n                     s1=s1.concat(ch);\r\n              }\r\n\r\n        actionResult.SaveParameterValue(\"DT_FirstName\", \"FNTest\"+s1);\r\n        actionResult.SaveParameterValue(\"DT_LastName\", \"LNTest\"+s1);\r\n        actionResult.SaveParameterValue(\"DT_NamedInsured\", \"FNTest\"+s1+\" \"+\"LNTest\"+s1);\r\n        actionResult.status = true;\r\n        actionResult.comments =  \"First Name Is: FNTest\"+s1+\" & Last Name Is: LNTest\"+s1;\r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n            actionResult.comments =  e.getMessage();\r\n    }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "GetRandomFirstAndLastName",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 47,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 6018,
        "StepNumber": 1,
        "Description": "Launch Policy Center Agent Browser",
        "LocatorTypeId": null,
        "Locator": "",
        "ActionId": 27,
        "ParameterName": null,
        "ParameterValue": "GDT_UTRN_URL",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6021,
        "StepNumber": 2,
        "Description": "Verify If Alert Exists",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 63,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6029,
        "StepNumber": 3,
        "Description": "Verify Settings ICon gets displayes on PC",
        "LocatorTypeId": 7,
        "Locator": "//div[contains(@id,'tblinks-innerCt')]//a[2]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6023,
        "StepNumber": 4,
        "Description": "Logout_PolicyCenter",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 794,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6030,
        "StepNumber": 5,
        "Description": "Click On Settings Icon",
        "LocatorTypeId": 7,
        "Locator": "//div[contains(@id,'tblinks-innerCt')]//a[2]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6028,
        "StepNumber": 6,
        "Description": "Wait For Logout option opened",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": "3",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6031,
        "StepNumber": 7,
        "Description": "Click on Logout Option",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'LogoutTabBarLink-itemEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6032,
        "StepNumber": 8,
        "Description": "Click on OK Button for Logout Confirmation",
        "LocatorTypeId": 7,
        "Locator": "//span[text()='OK']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6019,
        "StepNumber": 9,
        "Description": "Launch Policy Center Agent Browser",
        "LocatorTypeId": null,
        "Locator": "",
        "ActionId": 27,
        "ParameterName": null,
        "ParameterValue": "GDT_UTRN_URL",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6024,
        "StepNumber": 10,
        "Description": "Verify Agent browser Homepage is displayed",
        "LocatorTypeId": 7,
        "Locator": " //a[contains(text(),'Underwriter') or contains(text(),'Auto Club Group')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6025,
        "StepNumber": 11,
        "Description": "Click on UW user Dropdown",
        "LocatorTypeId": 7,
        "Locator": " //a[contains(text(),'Underwriter') or contains(text(),'Auto Club Group')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6026,
        "StepNumber": 12,
        "Description": "Click on Logout",
        "LocatorTypeId": 7,
        "Locator": "(//a[contains(text(),'Logout')])[2]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6027,
        "StepNumber": 13,
        "Description": "Click on click here link on login page",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(text(),'here')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6020,
        "StepNumber": 14,
        "Description": "Launch Policy Center Agent Browser",
        "LocatorTypeId": null,
        "Locator": "",
        "ActionId": 27,
        "ParameterName": null,
        "ParameterValue": "GDT_UTRN_URL",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6022,
        "StepNumber": 15,
        "Description": "Verify Login page exists",
        "LocatorTypeId": 7,
        "Locator": "//input[@name='username']",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6033,
        "StepNumber": 16,
        "Description": "Enter User Name",
        "LocatorTypeId": 7,
        "Locator": "//input[@name='username']",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "GDT_UTRN_UW_User",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6034,
        "StepNumber": 17,
        "Description": "Enter Password",
        "LocatorTypeId": 7,
        "Locator": "//input[@name='password']",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "GDT_UTRN_UW_PWD",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6035,
        "StepNumber": 18,
        "Description": "Click Submit",
        "LocatorTypeId": 4,
        "Locator": "submit",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Login_to_Agent_Browser",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 48,
    "ProjectId": 1,
    "Key": "GDT_UTRN_URL",
    "Value": "https://ttrnpxyvip01.aaa-acg.net/aba/agentbrowser/",
    "GlobalSheetId": null,
    "IsEncrypted": false,
    "Name": null,
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 794,
    "Description": "Logout from Policy Center.",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Logout_PolicyCenter extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\t   \n\t   try{\n       \n\t\t\t\n\t\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tActions act = new Actions(driver);\n\t\t\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tString expMsg = inputValue.toString();\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t////////     Logout from 'Policy Center'       //////////////////////\n\t\t\t\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'TabLinkMenuButton')]\"))));\n\t\t\tWebElement settingsIconEle = driver.findElement(By.xpath(\"//a[contains(@id,'TabLinkMenuButton')]\"));\n\t\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", settingsIconEle);\n\t\t\tjs.executeScript(\"arguments[0].click();\",settingsIconEle);\n\t\t\t\n\t\t\tThread.sleep(1000);\n\t\t\t\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'LogoutTabBarLink-textEl') and contains(text(),'Log Out')]\"))));\n\t\t\tWebElement logoutOptionEle = driver.findElement(By.xpath(\"//span[contains(@id,'LogoutTabBarLink-textEl') and contains(text(),'Log Out')]\"));\n\t\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", logoutOptionEle);\n\t\t\tjs.executeScript(\"arguments[0].click();\",logoutOptionEle);\n\t\t\t\n\t\t\tThread.sleep(1000);\n\t\t\t\n\t\t\tactionResult.comments = \"Successfully Logged out from 'Policy Center' \";\n\t\t\tactionResult.status = true;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\n\t\tcatch(Exception e) {\n\t\t\t\tactionResult.comments = e.getMessage();\n\t\t\t\tactionResult.status = false;\n\t\t\t}\n\n\t\t\t\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Logout_PolicyCenter",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 24,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 5298,
        "StepNumber": 1,
        "Description": "Agent Browser HomeAgent Browser HomeSCREENRHSMENUBARQuick LinksMENUBegin QuoteCLICKCHOICE",
        "LocatorTypeId": 7,
        "Locator": "//div[contains(text(),'Begin Quote')]",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 187,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5299,
        "StepNumber": 2,
        "Description": "Begin QuoteBegin QuoteSCREENSelect ProductFORMProductDROPDOWN",
        "LocatorTypeId": 7,
        "Locator": "//mat-label[text()='Product']/ancestor::mat-form-field//mat-select",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_BQProduct",
        "CustomActionId": null,
        "ObjectDictionaryId": 188,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5300,
        "StepNumber": 3,
        "Description": "Begin QuoteBegin QuoteSCREENSelect ProductFORMStateDROPDOWN",
        "LocatorTypeId": 7,
        "Locator": "//mat-label[text()='State']/ancestor::mat-form-field//mat-select",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_BQState",
        "CustomActionId": null,
        "ObjectDictionaryId": 189,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5301,
        "StepNumber": 4,
        "Description": "Begin QuoteBegin QuoteSCREENSelect ProductFORMEffective DateTEXTBOX",
        "LocatorTypeId": 7,
        "Locator": "//mat-label[text()='Effective Date']/ancestor::mat-form-field//input",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_BQEffectiveDate",
        "CustomActionId": null,
        "ObjectDictionaryId": 190,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5302,
        "StepNumber": 5,
        "Description": "Begin QuoteBegin QuoteSCREENBegin QuoteBUTTON",
        "LocatorTypeId": 7,
        "Locator": "//button[contains(text(),'Begin Quote')]",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 191,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "ClickBeginQuote_bkp",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 187,
    "ProjectId": 1,
    "LocatorType": 7,
    "Locator": "//div[contains(text(),'Begin Quote')]",
    "PageId": 34,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Agent Browser HomeAgent Browser HomeSCREENRHSMENUBARQuick LinksMENUBegin QuoteCLICKCHOICE",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 34,
    "EntityName": "Page",
    "ProjectId": 1,
    "DictionaryPageType": 1,
    "Name": "Agent Browser Home",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 188,
    "ProjectId": 1,
    "LocatorType": 7,
    "Locator": "//mat-label[text()='Product']/ancestor::mat-form-field//mat-select",
    "PageId": 35,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Begin QuoteBegin QuoteSCREENSelect ProductFORMProductDROPDOWN",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 35,
    "EntityName": "Page",
    "ProjectId": 1,
    "DictionaryPageType": 1,
    "Name": "Begin Quote",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 189,
    "ProjectId": 1,
    "LocatorType": 7,
    "Locator": "//mat-label[text()='State']/ancestor::mat-form-field//mat-select",
    "PageId": 35,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Begin QuoteBegin QuoteSCREENSelect ProductFORMStateDROPDOWN",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 190,
    "ProjectId": 1,
    "LocatorType": 7,
    "Locator": "//mat-label[text()='Effective Date']/ancestor::mat-form-field//input",
    "PageId": 35,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Begin QuoteBegin QuoteSCREENSelect ProductFORMEffective DateTEXTBOX",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 191,
    "ProjectId": 1,
    "LocatorType": 7,
    "Locator": "//button[contains(text(),'Begin Quote')]",
    "PageId": 35,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Begin QuoteBegin QuoteSCREENBegin QuoteBUTTON",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 535,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 9706,
        "StepNumber": 1,
        "Description": "Verify_EnterAccountInformationPage",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1031,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9679,
        "StepNumber": 2,
        "Description": "Enter First Name",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'FirstName-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_FirstName",
        "CustomActionId": null,
        "ObjectDictionaryId": 192,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9680,
        "StepNumber": 3,
        "Description": "Enter Last Name",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'LastName-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_LastName",
        "CustomActionId": null,
        "ObjectDictionaryId": 193,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9681,
        "StepNumber": 4,
        "Description": "ClickOnSearchButton",
        "LocatorTypeId": 3,
        "Locator": "NewAccount:NewAccountScreen:NewAccountSearchDV:SearchAndResetInputSet:SearchLinksInputSet:Search",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 194,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9682,
        "StepNumber": 5,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9683,
        "StepNumber": 6,
        "Description": "SelectPersonFromCreateNewAccountDropdown",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 191,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9707,
        "StepNumber": 7,
        "Description": "Verify_CreateAccountPage",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1030,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9696,
        "StepNumber": 8,
        "Description": "selectGender",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_Gender",
        "CustomActionId": 186,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9684,
        "StepNumber": 9,
        "Description": "EnterHomePhone",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_HomePhone",
        "CustomActionId": 193,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9685,
        "StepNumber": 10,
        "Description": "EnterMobilePhone",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_MobilePhone",
        "CustomActionId": 194,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9686,
        "StepNumber": 11,
        "Description": "EnterEmail",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_PolicyInfo_Email",
        "CustomActionId": 195,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9687,
        "StepNumber": 12,
        "Description": "EnterHouseNumber",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_HouseNumber",
        "CustomActionId": 196,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9688,
        "StepNumber": 13,
        "Description": "EnterStreetName",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_StreetName",
        "CustomActionId": 197,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9698,
        "StepNumber": 14,
        "Description": "Enter Random value for House Number",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'AddressLine1-inputEl')]",
        "ActionId": 65,
        "ParameterName": null,
        "ParameterValue": "numeric:6",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9689,
        "StepNumber": 15,
        "Description": "EnterCity",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_City",
        "CustomActionId": 198,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9690,
        "StepNumber": 16,
        "Description": "SelectState",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_State",
        "CustomActionId": 187,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9691,
        "StepNumber": 17,
        "Description": "EnterZIPCode",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_ZipCode",
        "CustomActionId": 199,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9692,
        "StepNumber": 18,
        "Description": "EnterSSN",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_SSN",
        "CustomActionId": 200,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9693,
        "StepNumber": 19,
        "Description": "ClickOnStandardizeBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 201,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9713,
        "StepNumber": 20,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9708,
        "StepNumber": 21,
        "Description": "Verify_StandardizeAddrPage",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1032,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9699,
        "StepNumber": 22,
        "Description": "Click if Select button is available ",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(text(),'Select')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9711,
        "StepNumber": 23,
        "Description": "StandardizeAddress_New",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1035,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9705,
        "StepNumber": 24,
        "Description": "Verify is Standardize city grid displayed",
        "LocatorTypeId": 7,
        "Locator": "//span[@id='AddressStandardize_AcgPopup:1']",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9697,
        "StepNumber": 25,
        "Description": "VerifyStandardizeCityGridIsDisplayed",
        "LocatorTypeId": 7,
        "Locator": "//span[@id='AddressStandardize_AcgPopup:1']",
        "ActionId": 28,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9700,
        "StepNumber": 26,
        "Description": "Select if standadised addressed are available",
        "LocatorTypeId": 7,
        "Locator": "(//a[contains(text(),'Select')])[2]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9712,
        "StepNumber": 27,
        "Description": "StandardizeCity",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_City",
        "CustomActionId": 207,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9716,
        "StepNumber": 28,
        "Description": "Click on the Select Standard Address",
        "LocatorTypeId": 7,
        "Locator": "(//a[contains(text(),'Select')])[3]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9715,
        "StepNumber": 29,
        "Description": "Wait For PageLoad",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "7",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9701,
        "StepNumber": 30,
        "Description": "Check if Override button is available",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'AddressStandardize_AcgPopup:override-btnInnerEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9702,
        "StepNumber": 31,
        "Description": "Click Override Button",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'AddressStandardize_AcgPopup:override-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9709,
        "StepNumber": 32,
        "Description": "Verify_CreateAccountPage",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1030,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9703,
        "StepNumber": 33,
        "Description": "Verify is Census Track is empty",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@name,'CreateAccountDV:censustract')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9704,
        "StepNumber": 34,
        "Description": "Enter Census Track Number",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@name,'CreateAccountDV:censustract')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_CensusTrack",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9714,
        "StepNumber": 35,
        "Description": "SelectOrgNameAndProducerCode",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 208,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9694,
        "StepNumber": 36,
        "Description": "ClickOnUpdateBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 204,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9710,
        "StepNumber": 37,
        "Description": "Verify_AccFileSummaryScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1033,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 9695,
        "StepNumber": 38,
        "Description": "GetAccountNumber",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 206,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "EnterAccInformation",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1031,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType; \r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\n//import java.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Verify_EnterAccountInformationPage extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try{\r\n            \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            WebDriverWait wait = new WebDriverWait(driver,20);\r\n            //WebDriverWait wait    = new WebDriverWait(driver, Duration.ofSeconds(10));\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act           = new Actions(driver);\r\n            String selectText     = Keys.chord(Keys.CONTROL,\"a\");\r\n            \r\n            for(int retry=0; retry<=1;retry++){\r\n                    try{\r\n                        WebElement pageTitleEle = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'NewAccountScreen:ttlBar')]\"))));;\r\n                        String actPageTitle = pageTitleEle.getText();\r\n                        if(actPageTitle.equals(\"Enter Account Information\")){\r\n                        \r\n                            try \r\n                            {   \r\n                            String dateOfBirth = \"01/01/1990\";\r\n                            WebElement DateOfBirthtxtField = driver.findElement(actionResult.element(25));      \r\n                            DateOfBirthtxtField.sendKeys(Keys.chord(Keys.CONTROL,\"a\"),dateOfBirth);\r\n                            actionResult.status = true;\r\n                            actionResult.comments =  \"The Date Of Birth is enter as :\"+dateOfBirth;\r\n \r\n                            }\r\n    \r\n                                catch(Exception ex) {\r\n                                    actionResult.comments =ex.getMessage();\r\n                                    actionResult.status = true;\r\n                            }\r\n                                \r\n                                actionResult.status = true;\r\n                                actionResult.comments =  \"Naviagted to 'Enter Account Information' screen successfully\";\r\n                                \r\n                        }\r\n\r\n                    }\r\n                    catch(Exception e) {\r\n                        actionResult.comments =\"Max No. of Attepts reached : \" +retry + \" Expection Type : \" + e.getMessage();\r\n                        actionResult.status = false;\r\n                    }\r\n                }\r\n\r\n            \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Naviagted to 'Enter Account Information' screen successfully\";\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n        actionResult.comments =  e.getMessage();\r\n\r\n    }\r\n\r\n\r\n\r\n        ///////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Verify_EnterAccountInformationPage",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 192,
    "ProjectId": 1,
    "LocatorType": 7,
    "Locator": "//input[contains(@id,'FirstName-inputEl')]",
    "PageId": 36,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Enter First Name",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 36,
    "EntityName": "Page",
    "ProjectId": 1,
    "DictionaryPageType": 1,
    "Name": "Enter Account Information",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 193,
    "ProjectId": 1,
    "LocatorType": 7,
    "Locator": "//input[contains(@id,'LastName-inputEl')]",
    "PageId": 36,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Enter Account InformationEnter Account InformationSCREENEnter Account InformationFORMLast name\tTEXTBOX",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 194,
    "ProjectId": 1,
    "LocatorType": 3,
    "Locator": "NewAccount:NewAccountScreen:NewAccountSearchDV:SearchAndResetInputSet:SearchLinksInputSet:Search",
    "PageId": 36,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Enter Account InformationEnter Account InformationSCREENSearchBUTTON",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 191,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n//import java.time.Duration;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectPersonFromCreateNewAccountDropdown extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {   \r\n        driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);\r\n        WebDriverWait wait    = new WebDriverWait(driver,20);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act           = new Actions(driver);\r\n        Thread.sleep(5000);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//a[contains(@id,'NewAccountButton')])[1]\"))));\r\n\r\n        WebElement CreateNewAccoutTabElement = driver.findElement(By.xpath(\"(//a[contains(@id,'NewAccountButton')])[1]\"));\r\n\r\n        act.moveToElement(CreateNewAccoutTabElement).moveByOffset(40,0).click().build().perform();\r\n\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//span[contains(@id,'NewAccount_Person-textEl')]\")));\r\n\r\n        //NewAccount:NewAccountScreen:NewAccountButton:NewAccount_Person-textEl\r\n\r\n        WebElement personElement = driver.findElement(By.xpath(\"//span[contains(@id,'NewAccount_Person-textEl')]\"));\r\n\r\n        //js.executeScript(\"arguments[0].click()\",CreateNewAccoutTabElement);\r\n        //Thread.sleep(1000);\r\n        //js.executeScript(\"arguments[0].click()\",personElement);\r\n        //CreateNewAccoutTabElement= driver.findElement(By.xpath(\"(//a[contains(@id,'NewAccountButton')])[1]\"));\r\n        //personElement= driver.findElement(By.xpath(\"//span[contains(@id,'NewAccount_Person-textEl')]\"));\r\n\r\n        act.moveToElement(personElement).moveByOffset(35,0).click().build().perform();\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"The 'Person' option has been selected from the Creat Account Dropdown\";\r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectPersonFromCreateNewAccountDropdown",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1030,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver; \r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n//import java.time.Duration;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Verify_CreateAccountPage extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++)\r\n    {\r\n    try\r\n    {\r\n        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\r\n\r\n        WebDriverWait wait = new WebDriverWait(driver, 20);\r\n             wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'Cancel-btnWrap')]\"))));\r\n        \r\n\r\n        WebElement pageTitleEle=driver.findElement(By.xpath(\"//span[contains(@id,'CreateAccountScreen:ttlBar')]\"));\r\n        \r\n        //WebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'CreateAccountScreen:ttlBar')]\"));\r\n        String actPageTitle = pageTitleEle.getText();\r\n        if(actPageTitle.equals(\"Create account\")){\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Naviagted to 'Create account' screen successfully\";\r\n        }\r\n    \r\n\r\n    break;\r\n    }\r\ncatch(Exception e) {\r\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\nactionResult.status = false;\r\n    }\r\n}\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Verify_CreateAccountPage",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 186,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType; \r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\n//import java.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class selectGender extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try{\r\n            \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            WebDriverWait wait    = new WebDriverWait(driver, 20);\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act           = new Actions(driver);\r\n            String selectText     = Keys.chord(Keys.CONTROL,\"a\");\r\n            \r\n            for(int retry=0; retry<=2;retry++){\r\n                    try{\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'GlobalPersonNameInputSet:Gender-inputEl')]\"))));\r\n                    WebElement genderEle = driver.findElement(By.xpath(\"//input[contains(@id,'GlobalPersonNameInputSet:Gender-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",genderEle);\r\n                    genderEle.sendKeys(selectText);\r\n                    act.moveToElement(genderEle).sendKeys(Keys.DELETE).build().perform();\r\n                    //Thread.sleep(1000);\r\n                    js.executeScript(\"arguments[0].value='\"+inputValue+\"'\",genderEle);\r\n                    //Thread.sleep(2000);\r\n                    act.moveToElement(genderEle).sendKeys(Keys.TAB).build().perform();\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                        actionResult.comments =\"Max No. of Attepts reached : \" +retry + \" Expection Type : \" + e.getMessage();\r\n                        actionResult.status = false;\r\n                    }\r\n                }\r\n\r\n            \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Gender has been selected as :\"+inputValue;\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n        actionResult.comments =  e.getMessage();\r\n\r\n    }\r\n\r\n\r\n\r\n        ///////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "selectGender",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 193,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType; \r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\n//import java.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterHomePhone extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try{\r\n            \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            WebDriverWait wait    = new WebDriverWait(driver, 20);\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act           = new Actions(driver);\r\n            String selectText     = Keys.chord(Keys.CONTROL,\"a\");\r\n            \r\n            for(int retry=0; retry<=2;retry++){\r\n                    try{\r\n                        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(actionResult.element(356))));\r\n                        WebElement homePhoneEle = driver.findElement(actionResult.element(356));\r\n                        js.executeScript(\"arguments[0].style.border='2px solid red'\", homePhoneEle);\r\n                        //Thread.sleep(1000);\r\n                        js.executeScript(\"arguments[0].click();\",homePhoneEle);\r\n                        js.executeScript(\"arguments[0].value='\"+inputValue+\"'\",homePhoneEle);\r\n                        //Thread.sleep(1000);\r\n                        act.moveToElement(homePhoneEle).sendKeys(Keys.TAB).build().perform();\r\n                        break;\r\n                    }\r\n                    catch(Exception e) {\r\n                        actionResult.comments =\"Max No. of Attepts reached : \" +retry + \" Expection Type : \" + e.getMessage();\r\n                        actionResult.status = false;\r\n                    }\r\n                }\r\n\r\n            \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Home Phone Number entered as :\"+inputValue;\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n        actionResult.comments =  e.getMessage();\r\n\r\n    }\r\n\r\n\r\n\r\n        ///////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterHomePhone",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 194,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType; \r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\n//import java.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterMobilePhone extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try{\r\n            \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            WebDriverWait wait    = new WebDriverWait(driver, 20);\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act           = new Actions(driver);\r\n            String selectText     = Keys.chord(Keys.CONTROL,\"a\");\r\n            \r\n            for(int retry=0; retry<=2;retry++){\r\n                    try{\r\n                        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'CellPhone')]\"))));\r\n                        WebElement MobPhoneEle = driver.findElement(By.xpath(\"//input[contains(@id,'CellPhone')]\"));\r\n                        js.executeScript(\"arguments[0].style.border='2px solid red'\", MobPhoneEle);\r\n                        //Thread.sleep(1000);\r\n                        js.executeScript(\"arguments[0].click();\",MobPhoneEle);\r\n                        js.executeScript(\"arguments[0].value='\"+inputValue+\"'\",MobPhoneEle);\r\n                        //Thread.sleep(1000);\r\n                        act.moveToElement(MobPhoneEle).sendKeys(Keys.TAB).build().perform();\r\n                        break;\r\n                    }\r\n                    catch(Exception e) {\r\n                        actionResult.comments =\"Max No. of Attepts reached : \" +retry + \" Expection Type : \" + e.getMessage();\r\n                        actionResult.status = false;\r\n                    }\r\n                }\r\n\r\n            \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Home Phone Number entered as :\"+inputValue;\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n        actionResult.comments =  e.getMessage();\r\n\r\n    }\r\n\r\n\r\n\r\n        ///////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterMobilePhone",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 195,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType; \r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\n//import java.time.Duration;\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterEmail extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try{\r\n            \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            WebDriverWait wait    = new WebDriverWait(driver, 20);\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act           = new Actions(driver);\r\n            String selectText     = Keys.chord(Keys.CONTROL,\"a\");\r\n            \r\n            for(int retry=0; retry<=2;retry++){\r\n                    try{\r\n                        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'EmailAddress1-inputEl')]\"))));\r\n                        WebElement emailEle = driver.findElement(By.xpath(\"//input[contains(@id,'EmailAddress1-inputEl')]\"));\r\n                        js.executeScript(\"arguments[0].style.border='2px solid red'\", emailEle);\r\n                        //Thread.sleep(1000);\r\n                        js.executeScript(\"arguments[0].click();\",emailEle);\r\n                        js.executeScript(\"arguments[0].value='\"+inputValue+\"'\",emailEle);\r\n                        //Thread.sleep(1000);\r\n                        act.moveToElement(emailEle).sendKeys(Keys.TAB).build().perform();\r\n                        break;\r\n                    }\r\n                    catch(Exception e) {\r\n                        actionResult.comments =\"Max No. of Attepts reached : \" +retry + \" Expection Type : \" + e.getMessage();\r\n                        actionResult.status = false;\r\n                    }\r\n                }\r\n\r\n            \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Home Phone Number entered as :\"+inputValue;\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n        actionResult.comments =  e.getMessage();\r\n\r\n    }\r\n\r\n\r\n\r\n        ///////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterEmail",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 196,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n//import java.time.Duration;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterHouseNumber extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n            WebDriverWait wait = new WebDriverWait(driver, 20);\r\n        WebElement houseNumEle;\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'AddressLine1-inputEl')]\")));\r\n        houseNumEle = driver.findElement(actionResult.element(197));\r\n        wait.until(ExpectedConditions.elementToBeClickable(houseNumEle));\r\n        houseNumEle.click();\r\n        houseNumEle.sendKeys(inputValue);\r\n        Keys.chord(Keys.TAB);\r\n  \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"House Number entered as:\"+inputValue;\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterHouseNumber",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 197,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n//import java.time.Duration;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterStreetName extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n            WebDriverWait wait = new WebDriverWait(driver, 20);\r\n            WebElement streetNameEle;\r\n            streetNameEle=driver.findElement(actionResult.element(198));\r\n            wait.until(ExpectedConditions.elementToBeClickable(streetNameEle));\r\n            streetNameEle.click();\r\n            streetNameEle.sendKeys(inputValue);\r\n            Keys.chord(Keys.TAB);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Street Name entered as:\"+inputValue;\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterStreetName",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 198,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n//import java.time.Duration;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterCity extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n            WebDriverWait wait = new WebDriverWait(driver, 20);\r\n    \r\n            WebElement cityEle=driver.findElement(actionResult.element(199));\r\n            wait.until(ExpectedConditions.elementToBeClickable(cityEle));\r\n            cityEle.click();\r\n            cityEle.sendKeys(inputValue);\r\n            Keys.chord(Keys.TAB);\r\n            Thread.sleep(750);\r\n            WebElement houseNumEle;\r\n            houseNumEle=driver.findElement(actionResult.element(197));\r\n            houseNumEle.click();\r\n            Thread.sleep(1750);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"City Name entered as:\"+inputValue;\r\n \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }       \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterCity",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 187,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class SelectState extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tActions act = new Actions(driver);\n\n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\t\t\n\t\tWebElement state=driver.findElement(actionResult.element(200));\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tstate.sendKeys(s);\n\t\tstate.sendKeys(Keys.DELETE);\n\t\tstate.sendKeys(inputValue);\n\t\tact.moveToElement(state).sendKeys(Keys.ENTER).build().perform();\n\t\tact.moveToElement(state).sendKeys(Keys.TAB).build().perform();\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";\n\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectState",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 199,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n//import java.time.Duration;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterZIPCode extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n            WebDriverWait wait = new WebDriverWait(driver,20);\r\n            WebElement zipCodeEle;\r\n            zipCodeEle=driver.findElement(actionResult.element(201));\r\n            wait.until(ExpectedConditions.elementToBeClickable(zipCodeEle));\r\n            zipCodeEle.click();\r\n            zipCodeEle.sendKeys(inputValue);\r\n            Keys.chord(Keys.TAB);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"ZIP is entered as:\"+inputValue;\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }       \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterZIPCode",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 200,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n//import java.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterSSN extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n        WebDriverWait wait = new WebDriverWait(driver,20);\r\n        WebElement SSNEle;\r\n        SSNEle=driver.findElement(By.xpath(\"//input[contains(@id,'OfficialIDDV_Input-inputEl')]\"));\r\n        wait.until(ExpectedConditions.elementToBeClickable(SSNEle));\r\n        SSNEle.click();\r\n        SSNEle.sendKeys(inputValue);\r\n        Keys.chord(Keys.TAB);\r\n        \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"SSN is entered as:\"+inputValue;\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterSSN",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 201,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.*;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.util.*;\r\n//import java.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ClickOnStandardizeBtn extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\r\n        WebDriverWait wait = new WebDriverWait(driver,10);\r\n        \r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        WebElement standardizeBtnEle;\r\n        standardizeBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'CreateAccountScreen:Standardize')]\"));\r\n        wait.until(ExpectedConditions.elementToBeClickable(standardizeBtnEle));\r\n\r\n        //Wait<WebDriver> fluentWaiit = new FluentWait<WebDriver>(driver).withTimeout(3000, TimeUnit.MILLISECONDS).pollingEvery(100, TimeUnit.MILLISECONDS).ignoring(Exception.class);\r\n        //WebElement standardizeBtnEle= fluentWaiit.until(new Function<WebDriver, WebElement>() {\r\n            // public WebElement apply(WebDriver driver) {\r\n                // TODO Auto-generated method stub\r\n                // return driver.findElement(By.xpath(\"//a[contains(@id,'CreateAccountScreen:Standardize')]\"));\r\n            // }           \r\n        //});\r\n\r\n        js.executeScript(\"arguments[0].click()\",standardizeBtnEle);\r\n        actionResult.status = true;\r\n        actionResult.comments =  \"Clicked on 'Standardize' button\";\r\n \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnStandardizeBtn",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1032,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n//import java.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Verify_StandardizeAddrPage extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++)\r\n    {\r\n    try\r\n    {   \r\n        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\r\n        WebDriverWait wait = new WebDriverWait(driver,20);\r\n        Thread.sleep(7000);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[@id='AddressStandardize_AcgPopup:override-btnInnerEl']\"))));\r\n        \r\n\r\n        WebElement pageTitleEle =driver.findElement(By.xpath(\"//span[contains(@id,'AddressStandardize_AcgPopup:ttlBar')]\"));\r\n        String actPageTitle = pageTitleEle.getText();\r\n        if(actPageTitle.equals(\"Select a Standardized Address\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"Naviagted to 'Standardized Address' screen successfully\";\r\n        }\r\n\r\nbreak;\r\n  }\r\ncatch(Exception e) {\r\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\nactionResult.status = false;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Verify_StandardizeAddrPage",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1035,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class StandardizeAddress_New extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tWebElement selectstandardizAddreBtnEle;\n\t\t\n\t\tselectstandardizAddreBtnEle=driver.findElement(By.xpath(\"//a[text()='Select']\"));\n\t\t\n\t\twait.until(ExpectedConditions.elementToBeClickable(selectstandardizAddreBtnEle));\n\t\tjs.executeScript(\"arguments[0].click()\",selectstandardizAddreBtnEle);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments =  \"The Address has been Standardized successfully\";\n\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "StandardizeAddress_New",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 207,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class StandardizeCity extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\t\t\n\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tWebElement SelectStandardizeCityBtnEle;\n\t\tWebElement overrideBtnEle;\n\t\tThread.sleep(10000);\n\t\t//selectstandardizAddreBtnEle=driver.findElement(By.xpath(\"//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div/a\"));\n\t\t//SelectStandardizeCityBtnEle=driver.findElement(By.xpath(\"(//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div/a)[2]\"));\n\t\t//overrideBtnEle=driver.findElement(By.xpath(\"//a[contains(@id,'AcgPopup:override')]\"));\n\n\t\tif(driver.findElement(By.xpath(\"(//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div/a)[2]\")).isDisplayed()){\n\t\t\tSystem.out.println(\"City is existed\");\n\t\t\tSelectStandardizeCityBtnEle=driver.findElement(By.xpath(\"(//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div/a)[2]\"));\n\n\t\t\tjs.executeScript(\"arguments[0].click()\",SelectStandardizeCityBtnEle);\n\t\t\n\t\t}else{\n\t\t\n\t\tSystem.out.println(\"City Standardization is not required\");\n\t\t\n\t\t}\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"The Address and City have been Standardized successfully\";\n\n\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = true;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "StandardizeCity",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 208,
    "Description": "Searching and selecting the required Organization Name on Create Account screen.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\n//import java.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectOrgNameAndProducerCode extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n       for(int i =1; i<=3; i++)\r\n{\r\n    try{\r\n    \r\n        String[] orgProducerCodeParams = inputValue.split(\" AND \");\r\n        String organizationName = orgProducerCodeParams[0].toString();\r\n        String ProducerCode = orgProducerCodeParams[1].toString();\r\n        driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);\r\n        WebDriverWait wait    = new WebDriverWait(driver,10);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act           = new Actions(driver);\r\n        String selectText     = Keys.chord(Keys.CONTROL,\"a\");\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(@id,'Producer:SelectOrganization')]\"))));\r\n            WebElement searchOrgEle = driver.findElement(By.xpath(\"//div[contains(@id,'Producer:SelectOrganization')]\"));\r\n            js.executeScript(\"arguments[0].click();\",searchOrgEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'OrganizationSearchPopupScreen:ttlBar')]\"))));\r\n            WebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'OrganizationSearchPopupScreen:ttlBar')]\"));\r\n            String actPageTitle = pageTitleEle.getText();\r\n            if(actPageTitle.equals(\"Organizations\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Organizations' Screen has been displayed\";\r\n            }\r\n            else{\r\n                actionResult.status = false;\r\n                actionResult.comments =  \"The 'Organizations' Screen not displayed\";\r\n            }\r\n            \r\n            WebElement OrgTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'OrganizationSearchDV:GlobalContactNameInputSet:Name-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", OrgTxtEle);\r\n            js.executeScript(\"arguments[0].click();\",OrgTxtEle);\r\n            Thread.sleep(1000);\r\n            //OrgTxtEle.sendKeys(organizationName);\r\n            //act.sendKeys(OrgTxtEle, organizationName).perform();\r\n            js.executeScript(\"arguments[0].value='\"+organizationName+\"'\",OrgTxtEle);\r\n            WebElement searchBtnEle = driver.findElement(actionResult.element(359));\r\n            js.executeScript(\"arguments[0].click();\",searchBtnEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'OrganizationSearchResultsLV:0:_Select')]\"))));\r\n            WebElement selectOrgBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'OrganizationSearchResultsLV:0:_Select')]\"));\r\n            js.executeScript(\"arguments[0].click();\",selectOrgBtnEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'Screen:ttlBar')]\"))));\r\n            WebElement pageTitleEle1 = driver.findElement(By.xpath(\"//span[contains(@id,'Screen:ttlBar')]\"));\r\n            String actPageTitle1 = pageTitleEle1.getText();\r\n            if(actPageTitle1.equals(\"Create account\") || actPageTitle1.equals(\"New Submissions\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Create account' Screen has been displayed\";\r\n            }\r\n            else{\r\n                actionResult.status = false;\r\n                actionResult.comments =  \"The 'Create account' Screen not displayed\";\r\n            }\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'ProducerCode-inputEl')]\"))));\r\n            WebElement producerCodeEle = driver.findElement(By.xpath(\"//input[contains(@id,'ProducerCode-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",producerCodeEle);\r\n            producerCodeEle.sendKeys(selectText);\r\n            Thread.sleep(2000);\r\n            producerCodeEle.sendKeys(Keys.DELETE);\r\n            Thread.sleep(2000);\r\n            if(ProducerCode.equals(\"70264529 - Test286 Captive GA\")){\r\n            ProducerCode = \"70264529 -  Test286 Captive GA\";\r\n            }\r\n            producerCodeEle.sendKeys(ProducerCode);\r\n            producerCodeEle.sendKeys(Keys.ENTER);\r\n            Thread.sleep(2000);\r\n\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"The required 'Organization' and 'Producer Code' have been selected\";\r\n \r\n        \r\n    break;\r\n    }\r\ncatch(Exception e) {\r\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\nactionResult.status = false;\r\n}\r\n}\r\n\r\n\r\nfor(int j =1; j<=1; j++)\r\n{\r\n    try{\r\n    \r\n        String[] orgProducerCodeParams = inputValue.split(\" AND \");\r\n        String organizationName = orgProducerCodeParams[0].toString();\r\n        String ProducerCode = orgProducerCodeParams[1].toString();\r\n        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\r\n        WebDriverWait wait    = new WebDriverWait(driver,10);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act           = new Actions(driver);\r\n        String selectText     = Keys.chord(Keys.CONTROL,\"a\");\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(@id,'Producer1:SelectOrganization')]\"))));\r\n            WebElement searchOrgEle = driver.findElement(By.xpath(\"//div[contains(@id,'Producer1:SelectOrganization')]\"));\r\n            js.executeScript(\"arguments[0].click();\",searchOrgEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'OrganizationSearchPopupScreen:ttlBar')]\"))));\r\n            WebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'OrganizationSearchPopupScreen:ttlBar')]\"));\r\n            String actPageTitle = pageTitleEle.getText();\r\n            if(actPageTitle.equals(\"Organizations\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Organizations' Screen has been displayed\";\r\n            }\r\n            else{\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Organizations' Screen not displayed\";\r\n            }\r\n            \r\n            WebElement OrgTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'OrganizationSearchDV:GlobalContactNameInputSet:Name-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",OrgTxtEle);\r\n            OrgTxtEle.sendKeys(organizationName);\r\n            \r\n            WebElement searchBtnEle = driver.findElement(actionResult.element(359));\r\n            js.executeScript(\"arguments[0].click();\",searchBtnEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'OrganizationSearchResultsLV:0:_Select')]\"))));\r\n            WebElement selectOrgBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'OrganizationSearchResultsLV:0:_Select')]\"));\r\n            js.executeScript(\"arguments[0].click();\",selectOrgBtnEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'Screen:ttlBar')]\"))));\r\n            WebElement pageTitleEle1 = driver.findElement(By.xpath(\"//span[contains(@id,'Screen:ttlBar')]\"));\r\n            String actPageTitle1 = pageTitleEle1.getText();\r\n            if(actPageTitle1.equals(\"Create account\") || actPageTitle1.equals(\"New Submissions\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Create account' Screen has been displayed\";\r\n            }\r\n            else{\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Create account' Screen not displayed\";\r\n            }\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'ProducerCode4-inputEl')]\"))));\r\n            WebElement producerCodeEle = driver.findElement(By.xpath(\"//input[contains(@id,'ProducerCode4-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",producerCodeEle);\r\n            producerCodeEle.sendKeys(selectText);\r\n            Thread.sleep(1000);\r\n            producerCodeEle.sendKeys(Keys.DELETE);\r\n            Thread.sleep(500);\r\n            producerCodeEle.sendKeys(ProducerCode);\r\n            producerCodeEle.sendKeys(Keys.ENTER);\r\n            Thread.sleep(1000);\r\n\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"The required 'Organization' and 'Producer Code' have been selected\";\r\n \r\n        \r\n    break;\r\n    }\r\ncatch(Exception e) {\r\nactionResult.comments =\"Max No. of Attepts reached : \" +j + \" Expection Type : \" + e.getMessage();\r\nactionResult.status = true;\r\n}\r\n}\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectOrgNameAndProducerCode",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 204,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n//import java.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ClickOnUpdateBtn extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n        \r\n    for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {   \r\n        \r\n         WebDriverWait wait = new WebDriverWait(driver,20);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.xpath(\"//a[contains(@id,'CreateAccountScreen:Update')]\")));\r\n        WebElement updateBtnEle=driver.findElement(By.xpath(\"//a[contains(@id,'CreateAccountScreen:Update')]\"));\r\n        js.executeScript(\"arguments[0].scrollIntoView();\", updateBtnEle);\r\n        js.executeScript(\"arguments[0].click()\",updateBtnEle);\r\n        actionResult.status = true;\r\n        actionResult.comments =  \"Click on 'Update' button successful\";\r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnUpdateBtn",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1033,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n//import java.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Verify_AccFileSummaryScreen extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n        for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {\r\n        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n        Thread.sleep(2000);\r\n        WebDriverWait wait      = new WebDriverWait(driver,45);\r\n        WebElement pageTitleEle = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'AccountFile_SummaryScreen:ttlBar')]\"))));\r\n        String actPageTitle     = pageTitleEle.getText();\r\n        if(actPageTitle.contains(\"Account File Summary\")){\r\n        actionResult.status = true;\r\n        actionResult.comments =  \"Naviagted to 'Account File Summary' screen successfully\";\r\n        }\r\n    \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = true;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Verify_AccFileSummaryScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 206,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n//import java.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class GetAccountNumber extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    \r\nfor(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n            WebDriverWait wait = new WebDriverWait(driver,20);\r\n            WebElement accountNumEle;\r\n            accountNumEle=driver.findElement(By.xpath(\"//div[contains(@id,'AccountNumber-inputEl')]\"));\r\n            wait.until(ExpectedConditions.visibilityOf(accountNumEle));\r\n            String accountNumber = accountNumEle.getText();\r\n            actionResult.SaveParameterValue(\"DT_AccountNumber\", accountNumber);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Account Number : \"+accountNumber+\" has been created successfully\";\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "GetAccountNumber",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 74,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 6474,
        "StepNumber": 1,
        "Description": "My ActivitiesMy ActivitiesSCREENPolicy CenterMENUBAR",
        "LocatorTypeId": 3,
        "Locator": "Desktop:MenuLinks:Desktop_DesktopActivities",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 4,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6475,
        "StepNumber": 2,
        "Description": "My ActivitiesMy ActivitiesSCREENPolicy CenterMENUBARPolicyMENU",
        "LocatorTypeId": 7,
        "Locator": "//span[@id='TabBar:PolicyTab-btnIconEl']",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 5,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6477,
        "StepNumber": 3,
        "Description": "PC_PolicyTab_NewSubmission_Click",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 12,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6476,
        "StepNumber": 4,
        "Description": "My ActivitiesMy ActivitiesSCREENPolicy CenterMENUBARPolicyMENUNew SubmissionCLICKCHOICE",
        "LocatorTypeId": 3,
        "Locator": "TabBar:PolicyTab:PolicyTab_NewSubmission-textEl",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 6,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Policy_Menu",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 4,
    "ProjectId": 1,
    "LocatorType": 3,
    "Locator": "Desktop:MenuLinks:Desktop_DesktopActivities",
    "PageId": 2,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "My ActivitiesMy ActivitiesSCREENPolicy CenterMENUBAR",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 2,
    "EntityName": "Page",
    "ProjectId": 1,
    "DictionaryPageType": 1,
    "Name": "My Activities",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 5,
    "ProjectId": 1,
    "LocatorType": 7,
    "Locator": "//span[@id='TabBar:PolicyTab-btnIconEl']",
    "PageId": 2,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "My ActivitiesMy ActivitiesSCREENPolicy CenterMENUBARPolicyMENU",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 12,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class PC_PolicyTab_NewSubmission_Click extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           \r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n   \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n                WebElement policyTabElement;\r\n            WebElement policyTabNewSubmissionElement;\r\n            WebDriverWait wait = new WebDriverWait(driver,40);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[@id='TabBar:PolicyTab-btnInnerEl']\"))));\r\n            \r\n            policyTabElement= driver.findElement(By.xpath(\"//span[@id='TabBar:PolicyTab-btnInnerEl']\"));\r\n            Actions act = new Actions(driver);\r\n            act.moveToElement(policyTabElement).moveByOffset(40,0).click().build().perform();\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[@id='TabBar:PolicyTab:PolicyTab_NewSubmission-textEl']\"))));\r\n            \r\n            policyTabNewSubmissionElement= driver.findElement(By.xpath(\"//span[@id='TabBar:PolicyTab:PolicyTab_NewSubmission-textEl']\"));\r\n            act.moveToElement(policyTabNewSubmissionElement).moveByOffset(40,0).click().build().perform();\r\n\r\n            actionResult.status = true;\r\n            actionResult.comments = \"Executed Successfully\"; \r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }          \r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "PC_PolicyTab_NewSubmission_Click",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 6,
    "ProjectId": 1,
    "LocatorType": 3,
    "Locator": "TabBar:PolicyTab:PolicyTab_NewSubmission-textEl",
    "PageId": 2,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "My ActivitiesMy ActivitiesSCREENPolicy CenterMENUBARPolicyMENUNew SubmissionCLICKCHOICE",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 989,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class AjaxWait extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry {\n\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tboolean status = false;\n\t\t\tfor (int i = 0; i <= 120; i++) {\n\t\t\t\tstatus = Boolean.valueOf((boolean) js.executeScript(\"return Ext.Ajax.isLoading();\"));\n\t\t\t\tSystem.out.println(status);\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(500);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tif (!status) {\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Wait Processed\";\n\n\t\t} catch (Exception e) {\n\t\t\tactionResult.comments =e.getMessage();\n\t\t}\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AjaxWait",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 208,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 1442,
        "StepNumber": 1,
        "Description": "VarifyPageText",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "New Submissions",
        "CustomActionId": 876,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1453,
        "StepNumber": 2,
        "Description": "Enter Account Number",
        "LocatorTypeId": 3,
        "Locator": "NewSubmission:NewSubmissionScreen:SelectAccountAndProducerDV:Account-inputEl",
        "ActionId": 43,
        "ParameterName": "P_3_Account_Number",
        "ParameterValue": "DT_AccountNumber",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1451,
        "StepNumber": 3,
        "Description": "SelectOrgNameAndProducerCode",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 208,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1454,
        "StepNumber": 4,
        "Description": "Click on Organisation",
        "LocatorTypeId": 3,
        "Locator": "NewSubmission:NewSubmissionScreen:SelectAccountAndProducerDV:ProducerSelectionInputSet:Producer-inputEl",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1450,
        "StepNumber": 5,
        "Description": "SelectProducer",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_ProducerCode",
        "CustomActionId": 1037,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1455,
        "StepNumber": 6,
        "Description": "EffectiveDateFromSystem",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 513,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1452,
        "StepNumber": 7,
        "Description": "EffectiveDateFromSystem_Copy_1",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1036,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1435,
        "StepNumber": 8,
        "Description": "YesOrNoHouseholdMembersEmployed",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 2302,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1433,
        "StepNumber": 9,
        "Description": "EffectiveDate_FutureDatedWith30days",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 520,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1447,
        "StepNumber": 10,
        "Description": "EnterEffectiveDateWithAdditionOf_3_Days",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1027,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1449,
        "StepNumber": 11,
        "Description": "EffectiveDate_FutureDated21_Copy",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1309,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1434,
        "StepNumber": 12,
        "Description": "EnterCurrentDateAsEffectiveDate",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1041,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1436,
        "StepNumber": 13,
        "Description": "New SubmissionsSingle or Multiple PoliciesSingle",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'NewSubmission:NewSubmissionScreen:ttlBar')]",
        "ActionId": 9,
        "ParameterName": "P_4_Single_or_Multiple_PoliciesSingle_oliciesSingle_RADIOBUTTONGROUP",
        "ParameterValue": "Single",
        "CustomActionId": null,
        "ObjectDictionaryId": 213,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1432,
        "StepNumber": 14,
        "Description": "New SubmissionsSingle or Multiple PoliciesSingle",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,\"CreateSingle_true-inputEl\")]",
        "ActionId": 7,
        "ParameterName": null,
        "ParameterValue": "Single",
        "CustomActionId": null,
        "ObjectDictionaryId": 213,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1441,
        "StepNumber": 15,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "6",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1430,
        "StepNumber": 16,
        "Description": "Random click",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'CreateSingle-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1440,
        "StepNumber": 17,
        "Description": "AjaxWait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 989,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1431,
        "StepNumber": 18,
        "Description": "random click",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'NewSubmission:NewSubmissionScreen:ttlBar')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1437,
        "StepNumber": 19,
        "Description": "New SubmissionsNew SubmissionsSCREENMake SubmissionsBUTTON",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'addSubmission')]",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 214,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 20,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1438,
        "StepNumber": 20,
        "Description": "Meemic_AUTP_NewSubmission",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(text(),'Select Meemic Auto')]/parent::td/preceding-sibling::td/div/a",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 25,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1439,
        "StepNumber": 21,
        "Description": "Meemic_HOME_NewSubmission",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(text(),'Select Meemic Home')]/parent::td/preceding-sibling::td/div/a",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 25,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1448,
        "StepNumber": 22,
        "Description": "HOME_New SubmissionsNew SubmissionsSCREENMake SubmissionsBUTTON",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(text(),'Select Home')]/parent::td/preceding-sibling::td/div/a",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 25,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1443,
        "StepNumber": 23,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "10",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1444,
        "StepNumber": 24,
        "Description": "AjaxWait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 989,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1456,
        "StepNumber": 25,
        "Description": "Click if select button is still displayed",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,\"addSubmission\")]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1457,
        "StepNumber": 26,
        "Description": "Click on Select button",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,\"addSubmission\")]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1445,
        "StepNumber": 27,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1446,
        "StepNumber": 28,
        "Description": "VarifyPageText",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Qualification",
        "CustomActionId": 876,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "StartPolicySubmission",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 876,
    "Description": "Verify the expected text from the page body text",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VarifyPageText extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \nString bodyText=\"\";\n\n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\n\t\tWebDriverWait wait = new WebDriverWait(driver, 30);\t\t\t\n\t\tbodyText = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.tagName(\"body\")))).getText();\n\t\tif(bodyText.contains(inputValue))\n\t\t{\n\t\t\tactionResult.status = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tactionResult.status = false;\n\t\t}\n\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VarifyPageText",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1037,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.StaleElementReferenceException;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class SelectProducer extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\t\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\t\n\t\tdriver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS); \n       \tWebDriverWait wait=new WebDriverWait(driver,15);\n\t\tWebElement producer= wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'ProducerCode-inputEl')]\"))));\n\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tproducer.sendKeys(s);\n\t\tproducer.sendKeys(Keys.DELETE);\n\n\t\tActions act = new Actions(driver);\n\t\tact.sendKeys(producer,inputValue).build().perform();\n        Thread.sleep(2000);\n\t\tproducer.sendKeys(Keys.TAB);\n\n      \tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";  \n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectProducer",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 513,
    "Description": "To get the required effective date from system icon",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EffectiveDateFromSystem extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\nfor(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n         \r\n        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);       \r\n        WebElement defaultEffectiveDate=driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\"));\r\n\r\n        WebElement systemIcon=driver.findElement(By.xpath(\"//div[contains(@id,'tblinks-innerCt')]//a[2]\"));\r\n        systemIcon.click();\r\n        WebElement settingContents=driver.findElement(By.xpath(\"//span[contains(@id,'TabBar:envIndicatorTabBarLink-textEl')]\"));\r\n        String settingText=settingContents.getText();\r\n        int dateTimeIndex=settingText.indexOf(\"Date/Time:\");\r\n        String dateTime=settingText.substring(dateTimeIndex+11);     \r\n        SimpleDateFormat targetFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        String effectiveDate;\r\n    \r\n        effectiveDate= targetFormat.format(dateFormat.parse(dateTime.substring(0, 10)));\r\n        System.out.println(\"date:\"+effectiveDate);\r\n        System.setProperty(\"EffectiveDate\", effectiveDate);\r\n              \r\n                    WebDriverWait wait=new WebDriverWait(driver, 20);\r\n            wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\"))));\r\n            WebElement effectiveDateEle=driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\"));\r\n            String s=Keys.chord(Keys.CONTROL,\"a\");\r\n            effectiveDateEle.sendKeys(s);\r\n            effectiveDateEle.sendKeys(Keys.DELETE);\r\n             //driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\")).clear();\r\n             Thread.sleep(2000);\r\n             effectiveDateEle.sendKeys(effectiveDate);\r\n        //driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\")).sendKeys(effectiveDate);\r\n            actionResult.SaveParameterValue(\"DT_EffectiveDate\", effectiveDate);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"effective date entered\";\r\n            \r\n              /*  Build Number and Environment   */\r\n            \r\n            int builtNum=settingText.indexOf(\"Jenkins Build #:\");\r\n        String buildNumber=settingText.substring(builtNum).substring(0,21);\r\n        //System.out.println(\"Build Number is :\"+buildNumber);\r\n        \r\n        int serveriD=settingText.indexOf(\"Server ID:\");\r\n        String serverID=settingText.substring(serveriD).substring(0);\r\n        //System.out.println(\"Server is :\"+serverID);\r\n        \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"effective date entered and Build Number is :\"+buildNumber+ \"and Server is: \"+serverID;\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EffectiveDateFromSystem",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1036,
    "Description": "To get the required effective date from system icon",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EffectiveDateFromSystem_Copy_1_Copy_1 extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n \r\n       for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n         \r\n        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);       \r\n        WebElement defaultEffectiveDate=driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl') or contains(@id,'EffectiveDate-inputEl')]\"));\r\n\r\n        WebElement systemIcon=driver.findElement(By.xpath(\"//div[contains(@id,'tblinks-innerCt')]//a[2]\"));\r\n        systemIcon.click();\r\n        WebElement settingContents=driver.findElement(By.xpath(\"//span[contains(@id,'TabBar:envIndicatorTabBarLink-textEl')]\"));\r\n        String settingText=settingContents.getText();\r\n        int dateTimeIndex=settingText.indexOf(\"Date/Time:\");\r\n        String dateTime=settingText.substring(dateTimeIndex+11);     \r\n        SimpleDateFormat targetFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        String effectiveDate;\r\n    \r\n        effectiveDate= targetFormat.format(dateFormat.parse(dateTime.substring(0, 10)));\r\n        System.out.println(\"date:\"+effectiveDate);\r\n        System.setProperty(\"EffectiveDate\", effectiveDate);\r\nactionResult.SaveParameterValue(\"DT_EffectiveDate\", effectiveDate);\r\n              Thread.sleep(2000);\r\n\r\n             driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl') or contains(@id,'EffectiveDate-inputEl')]\")).clear();\r\n             Thread.sleep(2000);\r\n        driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl') or contains(@id,'EffectiveDate-inputEl')]\")).sendKeys(effectiveDate);\r\n            actionResult.status   = true;\r\n            actionResult.comments = \"effective date entered\";\r\n            \r\n            \r\n            \r\n            /*  Build Number and Environment   */\r\n            \r\n            int builtNum=settingText.indexOf(\"Jenkins Build #:\");\r\n        String buildNumber=settingText.substring(builtNum).substring(0,21);\r\n        //System.out.println(\"Build Number is :\"+buildNumber);\r\n        \r\n        int serveriD=settingText.indexOf(\"Server ID:\");\r\n        String serverID=settingText.substring(serveriD).substring(0);\r\n        //System.out.println(\"Server is :\"+serverID);\r\n        \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"effective date entered and Build Number is :\"+buildNumber+ \"and Server is: \"+serverID;\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EffectiveDateFromSystem_Copy_1",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 2302,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesOrNoHouseholdMembersEmployed extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\nfor(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {\r\n            WebElement educatedMemberYes = driver.findElement(By.xpath(\"//input[contains(@id, 'isAnyMemEducatorInd_true-inputEl')]\"));\r\n            WebElement educatedMemberNo  = driver.findElement(By.xpath(\"//input[contains(@id, 'isAnyMemEducatorInd_false-inputEl')]\"));\r\n        JavascriptExecutor js       = (JavascriptExecutor)driver;\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            js.executeScript(\"arguments[0].click()\",educatedMemberYes);\r\n            //AAADriveYesEle.click();\r\n                actionResult.status   = true;\r\n                actionResult.comments = \"'Household members employed in education community' has been selected as : 'Yes'\";\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            js.executeScript(\"arguments[0].click()\",educatedMemberNo);\r\n            //AAADriveNoEle.click();\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"'Household members employed in education community' has been selected as : 'No'\";\r\n        }\r\n    \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoHouseholdMembersEmployed",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 520,
    "Description": "Change the Effective Date prior to 30 Days.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.Calendar;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EffectiveDate_FutureDatedWith30days extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n \r\n       for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n         \r\n        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);       \r\n        WebElement defaultEffectiveDate=driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\"));\r\n        Thread.sleep(2000);\r\n        defaultEffectiveDate.clear();\r\n        Thread.sleep(2000);\r\n\r\n        WebElement systemIcon=driver.findElement(By.xpath(\"//div[contains(@id,'tblinks-innerCt')]//a[2]\"));\r\n        systemIcon.click();\r\n        WebElement settingContents=driver.findElement(By.xpath(\"//span[contains(@id,'TabBar:envIndicatorTabBarLink-textEl')]\"));\r\n        String settingText=settingContents.getText();\r\n        int dateTimeIndex=settingText.indexOf(\"Date/Time:\");\r\n        String dateTime=settingText.substring(dateTimeIndex+11);     \r\n        SimpleDateFormat targetFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        String effectiveDate;\r\n    \r\n        effectiveDate= targetFormat.format(dateFormat.parse(dateTime.substring(0, 10)));\r\n        \r\n        // String[] date = effectiveDate.split(\"/\");\r\n        //   effectiveDate = date[1].toString();\r\n        //      int days = Integer.parseInt(effectiveDate);\r\n        //    int reqDays = days-8;\r\n        //    System.out.println(reqDays);\r\n        //    if(reqDays<0) {\r\n            //           reqDays = Math.abs(reqDays);\r\n            //       System.out.println(reqDays);\r\n                     \r\n        // }\r\n        //    String targetDay =  Integer.toString(reqDays);\r\n        //    targetDay = date[1].replace(effectiveDate, targetDay).toString();\r\n        //    String backDatedDate = date[0].toString()+\"/\"+targetDay+\"/\"+date[2].toString();\r\n        //    System.out.println(backDatedDate);\r\n        \r\n        //SimpleDateFormat date1=new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(targetFormat.parse(effectiveDate));\r\n        c.add(Calendar.DATE, +30);  // number of days to subtract\r\n        String futureDatedDate = targetFormat.format(c.getTime());\r\n        \r\n        Thread.sleep(2000);\r\n        //driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\")).clear();\r\n        //Thread.sleep(2000);\r\n        driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\")).sendKeys(futureDatedDate);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"effective date entered\";\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EffectiveDate_FutureDatedWith30days",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1027,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.concurrent.TimeUnit;\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterEffectiveDateWithAdditionOf_3_Days extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n         \r\n        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);       \r\n        WebElement defaultEffectiveDate=driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl') or contains(@id,'EffectiveDate-inputEl')]\"));\r\n\r\n        WebElement systemIcon=driver.findElement(By.xpath(\"//div[contains(@id,'tblinks-innerCt')]//a[2]\"));\r\n        systemIcon.click();\r\n        WebElement settingContents=driver.findElement(By.xpath(\"//span[contains(@id,'TabBar:envIndicatorTabBarLink-textEl')]\"));\r\n        String settingText=settingContents.getText();\r\n        int dateTimeIndex=settingText.indexOf(\"Date/Time:\");\r\n        String dateTime=settingText.substring(dateTimeIndex+11);     \r\n        SimpleDateFormat targetFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        String effectiveDate;\r\n    \r\n        effectiveDate= targetFormat.format(dateFormat.parse(dateTime.substring(0, 10)));\r\n        System.out.println(\"date:\"+effectiveDate);\r\n        System.setProperty(\"EffectiveDate\", effectiveDate);\r\n        actionResult.SaveParameterValue(\"DT_EffectiveDate\", effectiveDate);\r\n              Thread.sleep(2000);\r\n        java.text.DateFormat df = new java.text.SimpleDateFormat(targetFormat);\r\n        java.util.Calendar calendar = java.util.Calendar.getInstance(); \r\n        try {\r\n        calendar.setTime(df.parse(effectiveDate));\r\n        calendar.add(java.util.Calendar.DAY_OF_MONTH, +3);\r\n        String formatted = targetFormat.format(calendar.getTime());\r\n        System.out.println(formatted);\r\n        driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl') or contains(@id,'EffectiveDate-inputEl')]\")).clear();\r\n             Thread.sleep(2000);\r\n        driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl') or contains(@id,'EffectiveDate-inputEl')]\")).sendKeys(formatted);\r\n        } catch (Exception ex) {\r\n                System.out.println(\"Error: \" + ex.toString());\r\n        }\r\n             \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"effective date entered\";\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterEffectiveDateWithAdditionOf_3_Days",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1309,
    "Description": "Change the Effective Date prior to 21 Days.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.Calendar;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EffectiveDate_FutureDated21_Copy extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n \r\n       for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n         \r\n        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);       \r\n        WebElement defaultEffectiveDate=driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\"));\r\n        Thread.sleep(2000);\r\n        defaultEffectiveDate.clear();\r\n        Thread.sleep(2000);\r\n\r\n        WebElement systemIcon=driver.findElement(By.xpath(\"//div[contains(@id,'tblinks-innerCt')]//a[2]\"));\r\n        systemIcon.click();\r\n        WebElement settingContents=driver.findElement(By.xpath(\"//span[contains(@id,'TabBar:envIndicatorTabBarLink-textEl')]\"));\r\n        String settingText=settingContents.getText();\r\n        int dateTimeIndex=settingText.indexOf(\"Date/Time:\");\r\n        String dateTime=settingText.substring(dateTimeIndex+11);     \r\n        SimpleDateFormat targetFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        String effectiveDate;\r\n    \r\n        effectiveDate= targetFormat.format(dateFormat.parse(dateTime.substring(0, 10)));\r\n        \r\n        // String[] date = effectiveDate.split(\"/\");\r\n        //   effectiveDate = date[1].toString();\r\n        //      int days = Integer.parseInt(effectiveDate);\r\n        //    int reqDays = days-8;\r\n        //    System.out.println(reqDays);\r\n        //    if(reqDays<0) {\r\n            //           reqDays = Math.abs(reqDays);\r\n            //       System.out.println(reqDays);\r\n                     \r\n        // }\r\n        //    String targetDay =  Integer.toString(reqDays);\r\n        //    targetDay = date[1].replace(effectiveDate, targetDay).toString();\r\n        //    String backDatedDate = date[0].toString()+\"/\"+targetDay+\"/\"+date[2].toString();\r\n        //    System.out.println(backDatedDate);\r\n        \r\n        //SimpleDateFormat date1=new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(targetFormat.parse(effectiveDate));\r\n        c.add(Calendar.DATE, +21);  // number of days to subtract\r\n        String futureDatedDate = targetFormat.format(c.getTime());\r\n        \r\n        Thread.sleep(2000);\r\n        //driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\")).clear();\r\n        //Thread.sleep(2000);\r\n        driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl')]\")).sendKeys(futureDatedDate);\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"effective date entered\";\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EffectiveDate_FutureDated21_Copy",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1041,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.Date;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterCurrentDateAsEffectiveDate extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n         \r\n        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);       \r\n        WebElement defaultEffectiveDate=driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl') or contains(@id,'EffectiveDate-inputEl')]\"));\r\n\r\n        SimpleDateFormat targetFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n        Date date = new Date();\r\n        String effectiveDate= targetFormat.format(date);\r\n        System.out.println(\"date:\"+effectiveDate);\r\n        System.setProperty(\"EffectiveDate\", effectiveDate);\r\n        actionResult.SaveParameterValue(\"DT_EffectiveDate\", effectiveDate);\r\n              Thread.sleep(2000);\r\n\r\n             driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl') or contains(@id,'EffectiveDate-inputEl')]\")).clear();\r\n             Thread.sleep(2000);\r\n            driver.findElement(By.xpath(\"//input[contains(@id,'nullDate-inputEl') or contains(@id,'EffectiveDate-inputEl')]\")).sendKeys(effectiveDate);\r\n            actionResult.status   = true;\r\n            actionResult.comments = \"effective date entered\";\r\n            \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }  \r\n       \r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterCurrentDateAsEffectiveDate",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 213,
    "ProjectId": 1,
    "LocatorType": 7,
    "Locator": "//*[contains(@id,\"CreateSingle_true-inputEl\")]",
    "PageId": 3,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "New SubmissionsSingle or Multiple PoliciesSingle",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 3,
    "EntityName": "Page",
    "ProjectId": 1,
    "DictionaryPageType": 1,
    "Name": "New Submissions",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 214,
    "ProjectId": 1,
    "LocatorType": 7,
    "Locator": "//*[contains(@id,'addSubmission')]",
    "PageId": 3,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "New SubmissionsNew SubmissionsSCREENMake SubmissionsBUTTON",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 203,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 1326,
        "StepNumber": 1,
        "Description": "VerifyQualificationScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 31,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1335,
        "StepNumber": 2,
        "Description": "QualificationYesNoForFullTimeResident",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Yes",
        "CustomActionId": 1028,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1333,
        "StepNumber": 3,
        "Description": null,
        "LocatorTypeId": 7,
        "Locator": "//div[contains(text(),'non-payment of premium?')]/parent::td/following-sibling::td//label[text()='Yes']/preceding-sibling::input",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1332,
        "StepNumber": 4,
        "Description": "YesorNoNonPaymentOfPremium_GA",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 28,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1330,
        "StepNumber": 5,
        "Description": "YesorNoDriversLicenseStatus",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 26,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1331,
        "StepNumber": 6,
        "Description": "YesorNoDriversDeniedPayment",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 27,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1334,
        "StepNumber": 7,
        "Description": null,
        "LocatorTypeId": 7,
        "Locator": "//div[contains(text(),'Financial Responsibility filing')]/parent::td/following-sibling::td//label[text()='Yes']/preceding-sibling::input",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1337,
        "StepNumber": 8,
        "Description": "QualificationYesNoSR22Financial",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1029,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1328,
        "StepNumber": 9,
        "Description": "ClickOnAutoFillButton",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "DoNotUseOnlyForBRValidations",
        "ParameterValue": null,
        "CustomActionId": 885,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1336,
        "StepNumber": 10,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": "2",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1324,
        "StepNumber": 11,
        "Description": "SelectDisclose",
        "LocatorTypeId": 7,
        "Locator": "(//div[contains(@id,'FCRADisclosureAcg')])[2]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1325,
        "StepNumber": 12,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1329,
        "StepNumber": 13,
        "Description": "ClickNextButton",
        "LocatorTypeId": 7,
        "Locator": "//a[@id='SubmissionWizard:Next']",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 14,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 1327,
        "StepNumber": 14,
        "Description": "ValidateQualificationCriteria_Auto",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 32,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Qualification",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 31,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class VerifyQualificationScreen extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\n\r\n              WebDriverWait wait=new WebDriverWait(driver,15);\r\n              Thread.sleep(5000);\r\n        WebElement pageTitleEle = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'QualificationScreen:ttlBar')]\"))));\r\n\r\n\r\n        //WebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'QualificationScreen:ttlBar')]\"));\r\n        String actPageTitle = pageTitleEle.getText();\r\n        if(actPageTitle.equals(\"Qualification\")){\r\n        if( driver.findElements(By.xpath(\"//*[contains(@id,'closureAcg-inputEl')]\")).size()>0){\r\n        driver.findElement(By.xpath(\"//*[contains(@id,'closureAcg-inputEl')]\")).click();}\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"Naviagted to 'Qualification' screen successfully\";\r\n        }\r\n    }\r\n    catch(Exception e){\r\n        String exceptionMsg = e.getMessage();\r\n        actionResult.status = false;\r\n            actionResult.comments =  \"'Qualification' screen is not displayed\";\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyQualificationScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1028,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class QualificationYesNoForFullTimeResident extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\ttry\n\t\n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//div[contains(text(),'residents of the state')]/parent::td/following-sibling::td//label[text()='Yes']/preceding-sibling::input\"))));\n\t\t\t\t\n\t\tWebElement fullTimeResidentsYes = driver.findElement(By.xpath(\"//div[contains(text(),'residents of the state')]/parent::td/following-sibling::td//label[text()='Yes']/preceding-sibling::input\"));\n\t\tWebElement fullTimeResidentsNo = driver.findElement(By.xpath(\"//div[contains(text(),'residents of the state')]/parent::td/following-sibling::td//label[text()='No']/preceding-sibling::input\"));\n\t\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\tif(fullTimeResidentsYes.isSelected()){\n           \tactionResult.status = true;\n\t\tactionResult.comments =  \"Default Value 'Yes' has been selected already\";\n\t\t}\n\t\telse{\n\t\tfullTimeResidentsYes.click();\n\t\tactionResult.status = true;\n\t\tactionResult.comments =  \"Are all drivers full-time residents of the state? : answered as 'Yes'\";\n\t\t}\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\tfullTimeResidentsNo.click();\n           \tactionResult.status = true;\n\t\tactionResult.comments =  \"Are all drivers full-time residents of the state? : answered as 'No'\";\n\t\t}\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "QualificationYesNoForFullTimeResident",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 28,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesorNoNonPaymentOfPremium_GA extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \nfor(int i =1; i<=5; i++)\n{\ntry\n{\nWebElement NonPaymentofPremiumYes = driver.findElement(By.xpath(\"//div[contains(text(),'non-payment of premium?')]/parent::td/following-sibling::td//label[text()='Yes']/preceding-sibling::input\"));\n\tWebElement NonPaymentofPremiumNo = driver.findElement(By.xpath(\"//div[contains(text(),'non-payment of premium?')]/parent::td/following-sibling::td//label[text()='No']/preceding-sibling::input\"));\n           actionResult.comments =  \"Before If Block :\"+inputValue;\t\n\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\n           \tactionResult.comments =  \"Inside If Block :\"+inputValue;\t\n\t\tNonPaymentofPremiumYes.click();\n           \tactionResult.status = true;\n\t\tactionResult.comments =  \"Non-Payment Of Premium related question : answered as 'Yes'\";\n\t}\n\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\tNonPaymentofPremiumNo.click();\n          \tactionResult.status = true;\n\t\tactionResult.comments =  \"Non-Payment Of Premium related question : answered as 'No'\";\n\t}\n\n\n\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoNonPaymentOfPremium_GA",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 26,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesorNoDriversLicenseStatus extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\n\t\tWebElement lisenceStatusYes = driver.findElement(By.xpath(\"//div[contains(text(),'license')]/parent::td/following-sibling::td//label[text()='Yes']/preceding-sibling::input\"));\n\t\tWebElement lisenceStatusNo = driver.findElement(By.xpath(\"//div[contains(text(),'license')]/parent::td/following-sibling::td//label[text()='No']/preceding-sibling::input\"));\n\t\tactionResult.comments =  \"Before If Block :\"+inputValue;\t\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\"))\n\t\t{\n\t\tactionResult.comments =  \"Inside If Block :\"+inputValue;\t\n\t\tlisenceStatusYes.click();\n\t\tactionResult.status = true;\n\t\tactionResult.comments =  \"Drivers lisence status related question : answered as 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\tlisenceStatusNo.click();\n\t\tactionResult.status = true;\n\t\tactionResult.comments =  \"Drivers lisence status related question : answered as 'No'\";\n\t\t}\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoDriversLicenseStatus",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 27,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesorNoDriversDeniedPayment extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n      \tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\n\t\tWebElement driverDeniedPaymentYes = driver.findElement(By.xpath(\"//div[contains(text(),'denied payment')]/parent::td/following-sibling::td//label[text()='Yes']/preceding-sibling::input\"));\n\t\tWebElement driverDeniedPaymentNo = driver.findElement(By.xpath(\"//div[contains(text(),'denied payment')]/parent::td/following-sibling::td//label[text()='No']/preceding-sibling::input\"));\n\n        actionResult.comments =  \"Before If Block :\"+inputValue;\t\t\n\t\t\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\"))\n\t\t{\n\t\tactionResult.comments =  \"Inside If Block :\"+inputValue;\t\n\t\tdriverDeniedPaymentYes.click();\n\t\tactionResult.status = true;\n\t\tactionResult.comments =  \"Drivers Denied Payment question : answered as 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\"))\n\t\t{\n\t\tdriverDeniedPaymentNo.click();\n\t\tactionResult.status = true;\n\t\tactionResult.comments =  \"Drivers Denied Payment question : answered as 'No'\";\n\t\t}\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoDriversDeniedPayment",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1029,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class QualificationYesNoSR22Financial extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//div[contains(text(),'Financial Responsibility filing')]/parent::td/following-sibling::td//label[text()='Yes']/preceding-sibling::input\"))));\n\t\t\t\t\n\t\tWebElement SR22FinancialYes = driver.findElement(By.xpath(\"//div[contains(text(),'Financial Responsibility filing')]/parent::td/following-sibling::td//label[text()='Yes']/preceding-sibling::input\"));\n\t\tWebElement SR22FinancialNo = driver.findElement(By.xpath(\"//div[contains(text(),'Financial Responsibility filing')]/parent::td/following-sibling::td//label[text()='No']/preceding-sibling::input\"));\n        \tactionResult.comments =  \"Before If Block :\"+inputValue;\t\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\n           \tactionResult.comments =  \"Inside If Block :\"+inputValue;\t\n\t\tSR22FinancialYes.click();\n           \tactionResult.status = true;\n\t\tactionResult.comments =  \"SR22 Financial related question : answered as 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\tSR22FinancialNo.click();\n          \tactionResult.status = true;\n\t\tactionResult.comments =  \"SR22 Financial related question : answered as 'No'\";\n\t\t}\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "QualificationYesNoSR22Financial",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 885,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ClickOnAutoFillButton extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\n\t\tWebElement autoFillBtnEle;\n   \t\tdriver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\tThread.sleep(2000);\n\t\tautoFillBtnEle = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//*[text()='Autofill']\")));\n\n\t       JavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t//js.executeScript(\"arguments[0].style.border='2px solid red'\", autoFillBtnEle);\n\t\tjs.executeScript(\"arguments[0].click();\",autoFillBtnEle);\n\n\t\tThread.sleep(3000);\n\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"Clicked On AutoFill button\";\n \n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = true;\n\t\t}\n\t}\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnAutoFillButton",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 14,
    "ProjectId": 1,
    "LocatorType": 7,
    "Locator": "//a[@id='SubmissionWizard:Next']",
    "PageId": 4,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickNextButton",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 4,
    "EntityName": "Page",
    "ProjectId": 1,
    "DictionaryPageType": 1,
    "Name": "Qualification",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 32,
    "Description": "Validating the Error Messages on the Qualification screen based on the provided input for the Questionare.",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ValidateQualificationCriteria_Auto extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\t   \n\t   try{\n       \n\t\t\t\n\t\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tActions act = new Actions(driver);\n\t\t\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tString expMsg = inputValue.toString();\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t////////     Validting the Error Messages on Qualification Screen       //////////////////////\n\t\t\t\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[@class='message']\"))));\n\t\t\tWebElement messageEle = driver.findElement(By.xpath(\"//div[@class='message']\"));\n\t\t\t\n\t\t\tString actmessageTxt = messageEle.getText();\n\t\t\tif(actmessageTxt.equals(expMsg)){\n\t\t\t\tactionResult.status = true;\n\t\t\t\tactionResult.comments =  \"The Exepcted message displayed as : \"+actmessageTxt;\n\t\t\t\t\n\t\t\t}\n\t\t\telse{\n\t\t\t\tactionResult.status = true;\n\t\t\t\tactionResult.comments =  \"The Exepcted message not displayed\";\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\n\t\tcatch(Exception e) {\n\t\t\t\tactionResult.comments = e.getMessage();\n\t\t\t\tactionResult.status = false;\n\t\t\t}\n\n\t\t\t\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ValidateQualificationCriteria_Auto",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 73,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 6453,
        "StepNumber": 1,
        "Description": "Wait for page to display",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6441,
        "StepNumber": 2,
        "Description": "ClickOnAutoFillButton",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "DoNotUseOnlyForBRValidation",
        "ParameterValue": null,
        "CustomActionId": 885,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6447,
        "StepNumber": 3,
        "Description": "YesorNoPreviousAddress",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 36,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6456,
        "StepNumber": 4,
        "Description": "Wait ",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6448,
        "StepNumber": 5,
        "Description": "YesorNoAAAMembership",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 37,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6439,
        "StepNumber": 6,
        "Description": "Enter Membership Number",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'membership-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_MembershipNumber",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6440,
        "StepNumber": 7,
        "Description": "Enter Membership Since",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'membersince-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_MemberSince",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6437,
        "StepNumber": 8,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6470,
        "StepNumber": 9,
        "Description": "BypassMembership",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1059,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6459,
        "StepNumber": 10,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6449,
        "StepNumber": 11,
        "Description": "YesorNoFirstCompanyForInsurance",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Yes",
        "CustomActionId": 38,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6455,
        "StepNumber": 12,
        "Description": "OtherAutoClub",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Home",
        "CustomActionId": 48,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6460,
        "StepNumber": 13,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6442,
        "StepNumber": 14,
        "Description": "Select YesNo for HouseHoldMembers displayes",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'isAnyMemEducatorInd_true-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6443,
        "StepNumber": 15,
        "Description": "YesorNoHouseholdMembersEmployedIntheEducationalComunity",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 49,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6472,
        "StepNumber": 16,
        "Description": "SelectDoesAnyOneOnThePolicyDispalys",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(text(),'Does anyone on the Policy own and occupy one of the following?')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6450,
        "StepNumber": 17,
        "Description": "DoesAnyOneOnThePolicyOwnOptions",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "None",
        "CustomActionId": 46,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6473,
        "StepNumber": 18,
        "Description": "DoesAnyOneOfThePolicyOwn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Home",
        "CustomActionId": 66,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6451,
        "StepNumber": 19,
        "Description": "YesorNoForPaperlessComm",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 39,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6457,
        "StepNumber": 20,
        "Description": "YesorNoPaperlessCommunicationPreferrence",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 100,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6471,
        "StepNumber": 21,
        "Description": "PaperlesscomAsNO",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'PaperlessPreferenceID_option2-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6438,
        "StepNumber": 22,
        "Description": "PaperlessConsentToText",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_PaperlessConsentToText",
        "CustomActionId": 51,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6452,
        "StepNumber": 23,
        "Description": "YesorNoDocsConsent",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 40,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6444,
        "StepNumber": 24,
        "Description": "Policy InfoPolicy InfoSCREENNamed InsuredFORMPolicy InfoSCREENNamed InsuredFORMInsured NameHYPERLINK",
        "LocatorTypeId": 7,
        "Locator": "//div[contains(@id,'AccountInfoInputSet:Name-bodyEl') and @data-ref='bodyEl']",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 23,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6454,
        "StepNumber": 25,
        "Description": "EnterDateofBirthInContactDetails",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Policy_Info_Other_states_Date_of_Birth",
        "CustomActionId": 43,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6458,
        "StepNumber": 26,
        "Description": "EnterMaritalStatus",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Policy_Info_Other_states_Marital_status",
        "CustomActionId": 47,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6465,
        "StepNumber": 27,
        "Description": "VerifyEduLevelExists",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,':EducationLevel-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6466,
        "StepNumber": 28,
        "Description": "Education_Level",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 112,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6461,
        "StepNumber": 29,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6462,
        "StepNumber": 30,
        "Description": "EnterMaritalStatus",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Policy_Info_Other_states_Marital_status",
        "CustomActionId": 47,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6463,
        "StepNumber": 31,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6464,
        "StepNumber": 32,
        "Description": "EnterCensusTractNumberInPolicyInfoScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_CensusTract",
        "CustomActionId": 94,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6445,
        "StepNumber": 33,
        "Description": "Named InsuredNamed InsuredSCREENOKBUTTON",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'ContactDetailScreen:Update-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 29,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6446,
        "StepNumber": 34,
        "Description": "Policy InfoPolicy InfoSCREENNext_BUTTON",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:Next-btnInnerEl",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 31,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6469,
        "StepNumber": 35,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6467,
        "StepNumber": 36,
        "Description": "AjaxWait_Copy",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 925,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6468,
        "StepNumber": 37,
        "Description": "Home Coverage",
        "LocatorTypeId": 7,
        "Locator": "//*[text()='Home Coverages']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Policy_Info_Other_states",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 36,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesorNoPreviousAddress extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++)\r\n    {   \r\n    try\r\n    {\r\n        WebElement previousAddrYes = driver.findElement(By.xpath(\"(//input[contains(@id,'prevstaylessthan3_true-inputEl')])[1]\"));\r\n        WebElement previousAddrNo  = driver.findElement(By.xpath(\"(//input[contains(@id,'prevstaylessthan3_false-inputEl')])[1]\"));\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            previousAddrYes.click();\r\n            actionResult.status   = true;\r\n            actionResult.comments = \"Has the Named Insured lived at the Policy Address for less than 3 years? : Answered as 'Yes'\";;\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            previousAddrNo.click();\r\n            actionResult.status   = true;\r\n            actionResult.comments = \"Has the Named Insured lived at the Policy Address for less than 3 years? : Answered as 'No'\";;\r\n        }\r\n    \r\n    \r\n\r\n    break;\r\n    }\r\n    catch(Exception e) {\r\n    actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n    actionResult.status = false;\r\n    }\r\n    }\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoPreviousAddress",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 37,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesorNoAAAMembership extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++)\n\t{\n\ttry\n\t{ \t\t\n\t\tWebElement AAAMembershipYes = driver.findElement(By.xpath(\"//input[contains(@id,'PNIMemberShipID_true-inputEl')]\"));\n\t\tWebElement AAAMembershipNo = driver.findElement(By.xpath(\"//input[contains(@id,'PNIMemberShipID_false-inputEl')]\"));\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\tAAAMembershipYes.click();\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Does Named Insured have a current AAA membership? - Answered as 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\tAAAMembershipNo.click();\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Does Named Insured have a current AAA membership? - Answered as 'No'\";\n\t\t}\n\t\n\nbreak;\n\t}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n//actionResult.comments = \"'Does Named Insured have a current AAA membership?' is not displayed on the Policy Info screen\";\nactionResult.status = false;\n}\n}\n\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoAAAMembership",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1059,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class BypassMembership extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n        Thread.sleep(2000);\r\n        WebDriverWait wait = new WebDriverWait(driver,20);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        WebElement byPasscheckbox;\r\n        byPasscheckbox = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//*[contains(@id,'byPassValidation-inputEl')]\")));\r\n\r\n        //js.executeScript(\"arguments[0].style.border='2px solid red'\", nextBtnEle);\r\n        js.executeScript(\"arguments[0].click();\",byPasscheckbox);\r\n        actionResult.status = true;\r\n        actionResult.comments =  \"Clicked On bypass button\";\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments = \"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status   = true;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "BypassMembership",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 38,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesorNoFirstCompanyForInsurance extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\n\t\tdriver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);\n\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\t\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'isFirst')][contains(@componentid,'true')]\")));\n\n\t\tWebElement firstCompanyYes = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'isFirst')][contains(@componentid,'true')]\"))));\n\t\tWebElement firstCompanyNo = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'isFirst')][contains(@componentid,'false')]\"))));\n\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\tjs.executeScript(\"arguments[0].click()\",firstCompanyYes);\n\t\t\tfirstCompanyYes.click();\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Are we the first company you have contacted for an auto insurance quote? : Answered as 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\tjs.executeScript(\"arguments[0].click()\",firstCompanyNo);\n\t\t\tfirstCompanyNo.click();\n\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Are we the first company you have contacted for an auto insurance quote? : Answered as 'No'\";\n\t\t}\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoFirstCompanyForInsurance",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 48,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.List;\n\n\n   public class OtherAutoClub extends ActionResult\n   {\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n     for(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n         \n           //  actionResult.comments=inputValue;\nWebElement baseState=driver.findElement(By.xpath(\"//div[contains(@id,'BaseState-inputEl')]\"));\n\n   if(baseState.getText().contains(\"Florida\")){\nactionResult.comments=\"no other auto club policy selection for Florida\";\nactionResult.status=true;\n\n}\nelse{\n\t      if(inputValue.equalsIgnoreCase(\"Home\")){ \n            List<WebElement> home = driver.findElements(By.xpath(\"//*[contains(text(),'Other Auto Club Group Policies')]/parent::td/parent::tr/parent::tbody//span[contains(text(),'Home')]/parent::label/following-sibling::div/div/input\"));\t\n             if(home.size()!=0){\n                    driver.findElement(By.xpath(\"//*[contains(text(),'Other Auto Club Group Policies')]/parent::td/parent::tr/parent::tbody//span[contains(text(),'Home')]/parent::label/following-sibling::div/div/input\")).click();\n           \t\tactionResult.status = true;\n\t\t\tactionResult.comments =  \"Home is selected\";\n                                }\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"Condo\")){\n             List<WebElement> condo=driver.findElements(By.xpath(\"//*[contains(text(),'Other Auto Club Group Policies')]/parent::td/parent::tr/parent::tbody//span[contains(text(),'Condo')]/parent::label/following-sibling::div/div/input\"));\n\t\t\tif(condo.size()!=0){\n                     driver.findElement(By.xpath(\"//*[contains(text(),'Other Auto Club Group Policies')]/parent::td/parent::tr/parent::tbody//span[contains(text(),'Condo')]/parent::label/following-sibling::div/div/input\")).click();\n           \t\tactionResult.status = true;\n\t\t\tactionResult.comments =  \"condo is selected\";}\n\t\t}       \n             if(inputValue.equalsIgnoreCase(\"Renters\")){\n                    List<WebElement> renters=driver.findElements(By.xpath(\"//*[contains(text(),'Other Auto Club Group Policies')]/parent::td/parent::tr/parent::tbody//span[contains(text(),'Renters')]/parent::label/following-sibling::div/div/input\"));\n\t\t\tif(renters.size()!=0){\n                     driver.findElement(By.xpath(\"//*[contains(text(),'Other Auto Club Group Policies')]/parent::td/parent::tr/parent::tbody//span[contains(text(),'Renter')]/parent::label/following-sibling::div/div/input\")).click();\n           \t\tactionResult.status = true;\n\t\t\tactionResult.comments =  \"renters is selected\";}\n\t\t}\n\n             if(inputValue.equalsIgnoreCase(\"Life\")){\n                    List<WebElement> life=driver.findElements(By.xpath(\"//*[contains(text(),'Other Auto Club Group Policies')]/parent::td/parent::tr/parent::tbody//span[contains(text(),'Life')]/parent::label/following-sibling::div/div/input\"));\n\t\t\tif(life.size()!=0){\n                    driver.findElement(By.xpath(\"//*[contains(text(),'Other Auto Club Group Policies')]/parent::td/parent::tr/parent::tbody//span[contains(text(),'Life')]/parent::label/following-sibling::div/div/input\")).click();\n           \t\tactionResult.status = true;\n\t\t\tactionResult.comments =  \"Mobile Home is selected\";}\n\t\t}\n            }\n \n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "OtherAutoClub",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 49,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesorNoHouseholdMembersEmployedIntheEducationalComunity extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\n\t\tdriver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);\n\n\t\tWebDriverWait wait=new WebDriverWait(driver,30);\n\t\tWebElement pageTitleEle = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'isAnyMemEducatorInd_true-inputEl')]\"))));\n\t\t\n\t\tWebElement houseHoldYes = driver.findElement(By.xpath(\"//input[contains(@id,'isAnyMemEducatorInd_true-inputEl')]\"));\n\t\tWebElement houseHoldNo = driver.findElement(By.xpath(\"//input[contains(@id,'isAnyMemEducatorInd_false-inputEl')]\"));\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\thouseHoldYes.click();\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Are any household members employed in the educational community? : Answered as 'Yes'\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\thouseHoldNo.click();\n\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Are any household members employed in the educational community? : Answered as 'No'\";;\n\t\t}\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\t\n\t\t}\n\t\tactionResult.status = true;\n\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoHouseholdMembersEmployedIntheEducationalComunity",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 46,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.List;\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class DoesAnyOneOnThePolicyOwnOptions extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\tWebElement baseState=driver.findElement(By.xpath(\"//div[contains(@id,'BaseState-inputEl')]\"));\n\n   if(baseState.getText().contains(\"Tennessee\") || baseState.getText().contains(\"Illinois\")|| baseState.getText().contains(\"Wisconsin\") || baseState.getText().contains(\"Georgia\")|| baseState.getText().contains(\"Michigan\")){\nactionResult.comments=\"Does anyone on the policy not required for Tennessee,Georgia,Wisconsin,Illibnois or Michigan\";\nactionResult.status=true;}\n\nelse{\n\n\n\t/*\tWebElement home = driver.findElement(actionResult.element(237));\n              WebElement condo = driver.findElement(actionResult.element(238));\n              WebElement mobilehome = driver.findElement(actionResult.element(239));\n              WebElement none = driver.findElement(actionResult.element(240));\n             actionResult.comments=inputValue;\n\n              // JavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t// js.executeScript(\"arguments[0].scrollIntoView(true);\", none);\n\n\n\n\n\t\tif(inputValue.equalsIgnoreCase(\"Home\")&& home.isDisplayed()){\n\t\t\thome.click();\n           \t\tactionResult.status = true;\n\t\t\tactionResult.comments =  \"Home is selected\";\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"None\")&& none.isDisplayed()){\n\t\t\tnone.click();\n           \t\tactionResult.status = true;\n\t\t\tactionResult.comments =  \"None is selected\";\n\t\t}       \n             if(inputValue.equalsIgnoreCase(\"Condo\")&& condo.isDisplayed()){\n\t\t\tcondo.click();\n           \t\tactionResult.status = true;\n\t\t\tactionResult.comments =  \"Condo is selected\";\n\t\t}\n\n             if(inputValue.equalsIgnoreCase(\"Mobile Home\")&& mobilehome.isDisplayed()){\n\t\t\tmobilehome.click();\n           \t\tactionResult.status = true;\n\t\t\tactionResult.comments =  \"Mobile Home is selected\";\n\t\t}  */\n\n\n\n\t       List<WebElement> home = driver.findElements(actionResult.element(237));\n              List<WebElement> condo = driver.findElements(actionResult.element(238));\n              List<WebElement> mobilehome = driver.findElements(actionResult.element(239));\n              List<WebElement> none = driver.findElements(actionResult.element(240));\n             actionResult.comments=inputValue;\n\n              // JavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t// js.executeScript(\"arguments[0].scrollIntoView(true);\", none);\n\n\n\n\n\t\tif(inputValue.equalsIgnoreCase(\"Home\")){\n                    if(home.size()!=0){\n\t\t\tdriver.findElement(actionResult.element(237)).click();\n           \t\tactionResult.status = true;\n\t\t\tactionResult.comments =  \"Home is selected\";}\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"None\")){\n                    if(none.size()!=0){\n\t\t\tdriver.findElement(actionResult.element(240)).click();\n           \t\tactionResult.status = true;\n\t\t\tactionResult.comments =  \"None is selected\";}\n\t\t}       \n             if(inputValue.equalsIgnoreCase(\"Condo\")){\n                    if(condo.size()!=0){\n\t\t\tdriver.findElement(actionResult.element(238)).click();\n           \t\tactionResult.status = true;\n\t\t\tactionResult.comments =  \"Condo is selected\";}\n\t\t}\n\n             if(inputValue.equalsIgnoreCase(\"Mobile Home\")){\n                    if(mobilehome.size()!=0){\n\t\t\tdriver.findElement(actionResult.element(239)).click();\n           \t\tactionResult.status = true;\n\t\t\tactionResult.comments =  \"Mobile Home is selected\";}\n\t\t}\n\n\n\n\n}\n \n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n       \n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "DoesAnyOneOnThePolicyOwnOptions",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 66,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action; \r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.*;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class DoesAnyOneOfThePolicyOwn extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\ndriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\nWebDriverWait wait = new WebDriverWait(driver,20);\r\nJavascriptExecutor js = (JavascriptExecutor)driver;\r\nActions act = new Actions(driver);\r\nwait.until(ExpectedConditions.elementToBeClickable(driver.findElement(actionResult.element(240))));\r\nWebElement ownOptions = driver.findElement(By.xpath(\"//span[contains(text(),'Does anyone on the Policy own and occupy one of the following?')]/parent::label/parent::div//label[contains(text(),'\"+inputValue+\"')]/preceding-sibling::input\"));\r\nString baseState=driver.findElement(By.xpath(\"//*[contains(@id,'BaseState-inputEl')]\")).getText();\r\nif(baseState.equalsIgnoreCase(\"Florida\")){\r\nWebElement clickNone=driver.findElement(actionResult.element(240));\r\njs.executeScript(\"arguments[0].click();\",clickNone);\r\n}\r\nelse if (baseState.equalsIgnoreCase(\"Michigan\")){\r\n\r\nactionResult.comments = \"Does anyone not displayed with Mi state\";\r\n}\r\n\r\nelse {\r\njs.executeScript(\"arguments[0].click();\",ownOptions);}\r\nactionResult.status = true;\r\nactionResult.comments =  \"Clicked Successfully\";\r\n}\r\ncatch(Exception e){\r\n\r\nactionResult.status = false;\r\n           actionResult.comments =  e.getMessage();\r\n}\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "DoesAnyOneOfThePolicyOwn",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 39,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesorNoForPaperlessComm extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n       for(int i =1; i<=2; i++) \r\n    {\r\n        try \r\n        {\r\n        Thread.sleep(3000);\r\n        driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);\r\n        WebDriverWait wait=new WebDriverWait(driver,30);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n\r\n        WebElement PaperlessCommYes = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'PaperlessCommunication_true-inputEl') or contains(@id,'PaperlessDiscount_true-inputEl')]\")));\r\n        js.executeScript(\"arguments[0].scrollIntoView();\", PaperlessCommYes);\r\n        // driver.findElement(By.xpath(\"//input[contains(@id,'PaperlessCommunication_true-inputEl') or contains(@id,'PaperlessDiscount_true-inputEl')]\"));\r\n        WebElement PaperlessCommNo = driver.findElement(By.xpath(\"//input[contains(@id,'PaperlessCommunication_false-inputEl') or contains(@id,'PaperlessDiscount_false-inputEl')]\"));\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            Thread.sleep(2000);\r\n            PaperlessCommYes.click();\r\n                actionResult.status = true; \r\n                actionResult.comments =  \"'Sign up for 'Paperless Communication'?' : Answered as 'Yes'\";\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            Thread.sleep(2000);\r\n            PaperlessCommNo.click(); \r\n                actionResult.status = true;\r\n                actionResult.comments =  \"'Sign up for 'Paperless Communication'?' : Answered as 'No'\";\r\n        }\r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments = \"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status   = true;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoForPaperlessComm",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 100,
    "Description": "inputValue: Text/Email or Email only or No",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesorNoPaperlessCommunicationPreferrence extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n         for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {\r\n        Thread.sleep(3000);\r\n        WebDriverWait wait    = new WebDriverWait(driver,30);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n\r\n        WebElement PaperlessCommPref = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//label[text()='\"+inputValue+\"']/preceding-sibling::input[contains(@id,'PaperlessPreferenceID')]\")));\r\n        js.executeScript(\"arguments[0].scrollIntoView();\", PaperlessCommPref);\r\n        Thread.sleep(2000);\r\n            PaperlessCommPref.click();\r\n            Thread.sleep(1500);\r\n                actionResult.status   = true; \r\n                actionResult.comments = \"'Sign up for 'Paperless Communication'?' : Answered as \"+inputValue;\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments = \"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status   = false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoPaperlessCommunicationPreferrence",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 51,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesorNoDocsConsent extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       for(int i =1; i<=3; i++) \r\n    {       \r\n        try \r\n        {   \r\n         \r\n           Thread.sleep(2000);\r\n           WebDriverWait wait = new WebDriverWait(driver,10);\r\n        WebElement paperlessConsentYes = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'PaperlessConsentText_true-inputEl')]\")));\r\n        WebElement paperlessConsentNo  = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'PaperlessConsentText_false-inputEl')]\")));\r\n              JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n                    //js.executeScript(\"arguments[0].click();\",paperlessConsentYes);\r\n            //paperlessConsentYes.click(); \r\n        Actions act = new Actions(driver);\r\n        act.moveToElement(paperlessConsentYes).click().build().perform();\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"'Paperless Consent to Text' : Answered as 'Yes'\";\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            paperlessConsentNo.click(); \r\n                actionResult.status = true;\r\n                actionResult.comments =  \"'Paperless Consent to Text' : Answered as 'No'\";\r\n        }\r\n\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments = \"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status   = true;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "PaperlessConsentToText",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 40,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesorNoDocsConsent extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n       for(int i =1; i<=3; i++) \r\n    {\r\n        try \r\n        {\r\n            //driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\r\n        WebDriverWait wait = new WebDriverWait(driver,10);\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'GeneralDocumentsCTT_true')]\")));\r\n        WebElement GenDocsConsentYes= wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'GeneralDocumentsCTT_true')]\")));\r\n        WebElement GenDocsConsentNo= wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'GeneralDocumentsCTT_false')]\")));\r\n\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            GenDocsConsentYes.click(); \r\n                actionResult.status = true;\r\n                actionResult.comments =  \"'General Documents Consent to Text' : Answered as 'Yes'\";\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            GenDocsConsentNo.click(); \r\n                actionResult.status = true;\r\n                actionResult.comments =  \"'General Documents Consent to Text' : Answered as 'No'\";\r\n        }\r\n    \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments = \"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status   = true;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoDocsConsent",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 23,
    "ProjectId": 1,
    "LocatorType": 7,
    "Locator": "//div[contains(@id,'AccountInfoInputSet:Name-bodyEl') and @data-ref='bodyEl']",
    "PageId": 5,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Policy InfoPolicy InfoSCREENNamed InsuredFORMPolicy InfoSCREENNamed InsuredFORMInsured NameHYPERLINK",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 5,
    "EntityName": "Page",
    "ProjectId": 1,
    "DictionaryPageType": 1,
    "Name": "Policy Info",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 43,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class EnterDateofBirthInContactDetails extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\tWebElement DateOfBirthtxtField = driver.findElement(actionResult.element(25));\t\t\n\t\tDateOfBirthtxtField.sendKeys(Keys.chord(Keys.CONTROL,\"a\"),inputValue);\n\t\t///DateOfBirthtxtField.sendKeys(inputValue);\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"The Date Of Birth is enter as :\"+inputValue;\n \n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterDateofBirthInContactDetails",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 47,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterMaritalStatus extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n\r\nfor(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n        WebElement gender=driver.findElement(By.xpath(\"//input[contains(@id,'MaritalStatus-inputEl')]\"));\r\n        String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        gender.sendKeys(s);\r\n        gender.sendKeys(Keys.DELETE);\r\n        gender.sendKeys(inputValue);\r\n        //gender.sendKeys(Keys.ENTER);\r\n        Thread.sleep(1500);\r\n        gender.sendKeys(Keys.TAB);\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterMaritalStatus",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 112,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Education_Level extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\tWebDriverWait wait=new WebDriverWait(driver, 20);\n\t\t\twait.until(ExpectedConditions.visibilityOf(driver.findElement(actionResult.element(224))));\n\t\t\t\n\t\t\tWebElement education=driver.findElement(actionResult.element(224));\n\t\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\teducation.sendKeys(s);\n\t\t\teducation.sendKeys(Keys.DELETE);\n\t\t\teducation.sendKeys(inputValue);\n\t\t\t\n\t\t\tThread.sleep(2000);\n\t\t\teducation.sendKeys(Keys.ENTER);\n\t\t\teducation.sendKeys(Keys.TAB);\n\t\t\t\n\t\t\tThread.sleep(2000);\n\t\t\t\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Executed Successfully\"; \n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Education_Level",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 94,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class EnterCensusTractNumberInPolicyInfoScreen extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n        JavascriptExecutor js  = (JavascriptExecutor)driver;\r\n        Actions act            = new Actions(driver);\r\n        \r\n            try \r\n            {   \r\n                WebElement censusTract = driver.findElement(By.xpath(\"//input[contains(@id,'PolicyAddressDisplayInputSet:censustract') or contains(@id,':censustract-inputEl')]\"));\r\n                //String censusTractValue = censusTract.getAttribute(\"value\");\r\n                censusTract.click();\r\n                js.executeScript(\"arguments[0].value='\"+inputValue+\"'\",censusTract);\r\n                Thread.sleep(1500);\r\n                act.moveToElement(censusTract).sendKeys(Keys.TAB).build().perform();\r\n                actionResult.status   = true;\r\n                actionResult.comments = \"Entered CensusTract Value : \" + inputValue;\r\n                \r\n                 \r\n            }\r\n    \r\n            catch(Exception e) {\r\n                actionResult.status   = true;\r\n                actionResult.comments = \"CensusTract value found: \";\r\n            }     \r\n            \r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterCensusTractNumberInPolicyInfoScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 29,
    "ProjectId": 1,
    "LocatorType": 7,
    "Locator": "//*[contains(@id,'ContactDetailScreen:Update-btnInnerEl')]",
    "PageId": 7,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Named InsuredNamed InsuredSCREENOKBUTTON",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 7,
    "EntityName": "Page",
    "ProjectId": 1,
    "DictionaryPageType": 1,
    "Name": "Named Insured",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 31,
    "ProjectId": 1,
    "LocatorType": 3,
    "Locator": "SubmissionWizard:Next-btnInnerEl",
    "PageId": 5,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Policy InfoPolicy InfoSCREENNext_BUTTON",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 877,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ClickOnNextBtn extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        try \r\n        {   \r\n            \r\n        WebElement nextBtnEle;\r\n        \r\n        driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\r\n        WebDriverWait wait = new WebDriverWait(driver,30);\r\n        Thread.sleep(2000);\r\n        nextBtnEle = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//span[contains(@id,'ext') and contains(text(),'Next')]\")));\r\n\r\n        //nextBtnEle=driver.findElement(actionResult.element(14));\r\n        //wait.until(ExpectedConditions.elementToBeClickable(nextBtnEle));\r\n\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        js.executeScript(\"arguments[0].style.border='2px solid red'\", nextBtnEle);\r\n        js.executeScript(\"arguments[0].scrollIntoView();\", nextBtnEle);\r\n        js.executeScript(\"arguments[0].click();\",nextBtnEle);\r\n        \r\n        actionResult.status = true;\r\n         actionResult.comments =  \"Clicked On NEXT button\";\r\n        //break;    \r\n        \r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }       \r\n    \r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnNextBtn",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 925,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class AjaxWait_Copy extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \ntry {\n\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tboolean status = false;\n\t\t\tfor (int i = 0; i <= 120; i++) {\n\t\t\t\tstatus = Boolean.valueOf((boolean) js.executeScript(\"return Ext.Ajax.isLoading();\"));\n\t\t\t\tSystem.out.println(status);\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(500);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tif (!status) {\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Wait Processed\";\n\n\t\t} catch (Exception e) {\n\t\t\tactionResult.comments =e.getMessage();\n\t\t}\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AjaxWait_Copy",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 4,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 4957,
        "StepNumber": 1,
        "Description": "Select_the_driver1",
        "LocatorTypeId": 7,
        "Locator": "//td[@class='x-grid-cell x-grid-td x-grid-cell-rowcheckcolumn-1501 x-grid-cell-checkcolumn x-grid-cell-first']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 4958,
        "StepNumber": 2,
        "Description": "Add button",
        "LocatorTypeId": 7,
        "Locator": "(//a[@class='x-btn x-unselectable x-box-item x-toolbar-item x-btn-default-toolbar-small'])[2]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 4956,
        "StepNumber": 3,
        "Description": "Selec_the_driver",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(text(),'Driver Name')]/following::td[1]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 4955,
        "StepNumber": 4,
        "Description": "ClickOnNextBtn_On_AddandReconcileDriverScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'PrefillDriversLV_tb:next')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": 347,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 4959,
        "StepNumber": 5,
        "Description": "Verify Add And Reconcile",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'PrefillDriversLV_tb:next')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 4961,
        "StepNumber": 6,
        "Description": "Verify Add And Reconcile",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'PAPrefillDriversScreen:0')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 4960,
        "StepNumber": 7,
        "Description": "AddANdReconcileNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 810,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Add_and_Reconcile_Driver",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 347,
    "ProjectId": 1,
    "LocatorType": 7,
    "Locator": "//a[contains(@id,'PrefillDriversLV_tb:next')]",
    "PageId": 8,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnNextBtn_On_AddandReconcileDriverScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 8,
    "EntityName": "Page",
    "ProjectId": 1,
    "DictionaryPageType": 1,
    "Name": "Add and Reconcile Driver",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 810,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class AddANdReconcileNextBtn extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\tdriver.manage().timeouts().implicitlyWait(100, TimeUnit.SECONDS);\t\n\t\t\t\t\t\n\t\t\tWebElement nextBtnEle;\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\t\tnextBtnEle = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//a[contains(@id,'PrefillDriversLV_tb:next')]\")));\n\n\t\t\t//nextBtnEle=driver.findElement(actionResult.element(14));\n\t\t\t//wait.until(ExpectedConditions.elementToBeClickable(nextBtnEle));\n\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", nextBtnEle);\n\t\t\tjs.executeScript(\"arguments[0].click();\",nextBtnEle);\n\t\t\n\t\t\tactionResult.status = true;\n           \tactionResult.comments =  \"Clicked On NEXT button\";\n \n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddANdReconcileNextBtn",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 142,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 454,
        "StepNumber": 1,
        "Description": "VarifyPageText",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Drivers",
        "CustomActionId": 876,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 449,
        "StepNumber": 2,
        "Description": "ClickOnAutoFillButton",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "DoNotUseForRegression",
        "ParameterValue": null,
        "CustomActionId": 885,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 453,
        "StepNumber": 3,
        "Description": "SelectExistingDriver",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "OnlyForUWFlow",
        "ParameterValue": null,
        "CustomActionId": 137,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 448,
        "StepNumber": 4,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "8",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 455,
        "StepNumber": 5,
        "Description": "EnterLicenseNumber",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "S240139564032",
        "CustomActionId": 2423,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 451,
        "StepNumber": 6,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 452,
        "StepNumber": 7,
        "Description": "SelectExistingDriver",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 137,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15856,
        "StepNumber": 8,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Add New Driver",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 137,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.*;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\nimport org.openqa.selenium.StaleElementReferenceException;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectExistingDriver extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n        WebDriverWait wait = new WebDriverWait(driver,20);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act = new Actions(driver);\r\n        String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n        String inputValueVariable = inputValue;\r\n        //Use this below code for click actions//   \r\n        \r\n        try \r\n        {   \r\n        wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'DriversLV_tb:AddDriver-btnEl')]\"))));\r\n        WebElement addBtn = driver.findElement(By.xpath(\"//span[contains(@id,'DriversLV_tb:AddDriver-btnEl')]\"));\r\n        js.executeScript(\"arguments[0].click();\",addBtn);\r\n        Thread.sleep(250);\r\n        \r\n        WebElement ExistingPerson = driver.findElement(By.xpath(\"//span[contains(@id,'AddDriver:AddExistingContact-textEl')]\"));\r\n        Thread.sleep(450);\r\n        //js.executeScript(\"arguments[0].click();\",ExistingPerson);\r\n        ExistingPerson.click();\r\n        \r\n        WebElement selectExistingPerson = driver.findElement(By.xpath(\"//*[contains(text(),\"+inputValueVariable+\")]\"));\r\n        Thread.sleep(450);\r\n        //js.executeScript(\"arguments[0].click();\",selectExistingPerson);\r\n        selectExistingPerson.click();\r\n        \r\n        actionResult.comments =\"Selected Successfully\";\r\n        actionResult.status = true;\r\n        \r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n        \r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectExistingDriver",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 2423,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.StaleElementReferenceException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class EnterLicenseNumber extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'LicenseNumber-inputEl')]\")));\n\t\tWebElement licenseNumber;\n\t\tlicenseNumber=driver.findElement(By.xpath(\"//input[contains(@id,'LicenseNumber-inputEl')]\"));\n\t\tlicenseNumber.click();\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tlicenseNumber.sendKeys(s);\n\t\tlicenseNumber.sendKeys(Keys.DELETE);\n\t\tlicenseNumber.sendKeys(inputValue);\n\t\tKeys.chord(Keys.TAB);\n\t\tThread.sleep(1000);\n\t\tactionResult.status = true;\n       \tactionResult.comments =  \"License number entered as:\"+inputValue;\n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t\t}\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterLicenseNumber",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 190,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 845,
        "StepNumber": 1,
        "Description": null,
        "LocatorTypeId": 9,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 824,
        "StepNumber": 2,
        "Description": "VerifyAdditionalDetailsTabOpened",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 117,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 844,
        "StepNumber": 3,
        "Description": "DoesDriverHavePriorAutoInsurance_Copy_1",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_PriorAutoInsurance",
        "CustomActionId": 1046,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 847,
        "StepNumber": 4,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": "10",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 853,
        "StepNumber": 5,
        "Description": "Click on EmpStatus",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'EmpStatus-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 832,
        "StepNumber": 6,
        "Description": "Employement_Status",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_EmpStatus",
        "CustomActionId": 109,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 850,
        "StepNumber": 7,
        "Description": "SelectFranchiseGroup",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 2303,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 852,
        "StepNumber": 8,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": "8",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 840,
        "StepNumber": 9,
        "Description": "Select if Industry Available",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'IndustryType-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 834,
        "StepNumber": 10,
        "Description": "Industry",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Industry",
        "CustomActionId": 110,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 841,
        "StepNumber": 11,
        "Description": "Select if occupation is available",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'SpecificIndustryType-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 835,
        "StepNumber": 12,
        "Description": "Occupation",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Occupation",
        "CustomActionId": 111,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 842,
        "StepNumber": 13,
        "Description": "Select if Educational Level is available",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,':EducationLevel-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 836,
        "StepNumber": 14,
        "Description": "Education_Level",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_EducationLevel",
        "CustomActionId": 112,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 843,
        "StepNumber": 15,
        "Description": "Select If Work Loss Coordination is available",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'WorkLossCoordination')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 839,
        "StepNumber": 16,
        "Description": "Work_Loss_Coordination",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_WorklossCoordi",
        "CustomActionId": 2422,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 825,
        "StepNumber": 17,
        "Description": "YesorNoAAADrive",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_AAADriveParticipation",
        "CustomActionId": 118,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 826,
        "StepNumber": 18,
        "Description": "DoesDriverHavePriorAutoInsurance",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Continuous for prior 6 months or more",
        "CustomActionId": 113,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 849,
        "StepNumber": 19,
        "Description": "Select_Carrier_Name",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_CarrierName",
        "CustomActionId": 1045,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 827,
        "StepNumber": 20,
        "Description": "BodilyInjuryLimit",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_BidilyInjuryLimit",
        "CustomActionId": 115,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 833,
        "StepNumber": 21,
        "Description": "ExpirationDate",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_ExpirationDate",
        "CustomActionId": 124,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 828,
        "StepNumber": 22,
        "Description": "FullYearWithPriorCarrier",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_FullYearWithPriorCarrier",
        "CustomActionId": 116,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 830,
        "StepNumber": 23,
        "Description": "RemoveDrivers",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "MARION JOHNSTON",
        "CustomActionId": 121,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 837,
        "StepNumber": 24,
        "Description": "RemoveAllDrivers",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DAN BUCKNER",
        "CustomActionId": 126,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 848,
        "StepNumber": 25,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "6",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 838,
        "StepNumber": 26,
        "Description": "SelectSingleDriver",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_AssignDriver",
        "CustomActionId": 127,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 846,
        "StepNumber": 27,
        "Description": "SelectSingleDriver_Test",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 131,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 851,
        "StepNumber": 28,
        "Description": "SelectSingleDriver_UsingAllDriverCheckBox",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_AssignDriver",
        "CustomActionId": 178,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 829,
        "StepNumber": 29,
        "Description": "ClickOnSaveDraftBtnOnDriversScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'ToolbarButtonSet:Draft')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 831,
        "StepNumber": 30,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 823,
        "StepNumber": 31,
        "Description": "ClickOnNextBtnOnDriversScreen",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:Next-btnEl",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 46,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Add_AdditionalDetails",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 117,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.StaleElementReferenceException;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyAdditionalDetailsTabOpened extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ttry\n\t{\n\t  for(int retry=0; retry<5; retry++)\n\t  {\n\t\ttry\n\t\t{\n\t\tdriver.manage().timeouts().implicitlyWait(70, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,100);\n       \n\t\t//wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//a[contains(@id,'AdditionalDetailcCardTab')]\")));\n\t\t//WebElement AdditionalDetailsTabEle = driver.findElement(By.xpath(\"//a[contains(@id,'AdditionalDetailcCardTab')]\"));\n\n\t\tWait<WebDriver> fluentWaiit = new FluentWait<WebDriver>(driver).withTimeout(50, TimeUnit.SECONDS).pollingEvery(1000, TimeUnit.MILLISECONDS).ignoring(Exception.class);\n\t\tWebElement AdditionalDetailsTabEle = fluentWaiit.until(new Function<WebDriver, WebElement>() {\n\t\t\tpublic WebElement apply(WebDriver driver) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\treturn driver.findElement(By.xpath(\"//a[contains(@id,'AdditionalDetailcCardTab')]\"));\n\t\t\t}\t\t\t\n\t\t\t});\n\t\t\n\t\tAdditionalDetailsTabEle.click();\n\t\tString getAdditonalDetailsTabIndex = AdditionalDetailsTabEle.getAttribute(\"tabindex\");\n\t\t//Thread.sleep(2000);\n\t\tif(getAdditonalDetailsTabIndex.equals(\"0\")){\n\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"User is on 'Additional Details Tab' in Drivers screen\";\n\t\t}\n\t\telse{\n           \t\tactionResult.status = false;\n\t\t\tactionResult.comments =  \" 'Additional Details Tab' is not opened\";\n\t\t} \n\t\t\n\t\tbreak;\n\t\t}\n\t\t\n\t\tcatch(StaleElementReferenceException e)\n\t\t{\t\n\t\t\tactionResult.comments =  e.getMessage();\n\t\t}\n\t  }\n\t}  \n\tcatch(Exception e){\n\t\tString exceptionMsg = e.getMessage();\n           \tactionResult.status = false;\n\t\tactionResult.comments =  \" 'Additional Details Tab' is not available in Drivers screen: \"+exceptionMsg;\n\t}\n\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyAdditionalDetailsTabOpened",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1046,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class DoesDriverHavePriorAutoInsurance_Copy_1_Copy_1 extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\nfor(int i =1; i<=1; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\tdriver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);\n\n\t\t\tWebDriverWait wait = new WebDriverWait(driver, 30);\n\t\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'HasPriorPolicy-inputEl')]\")));\n\n\t\t\tWebElement priorAutoInsuranceEle=driver.findElement(actionResult.element(39));\n\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tpriorAutoInsuranceEle.sendKeys(s);\n\t\t\tpriorAutoInsuranceEle.sendKeys(Keys.DELETE);\n\t\t\tSystem.out.println(\"inputValue \"+inputValue );\n\n\t\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\t\tjs.executeScript(\"arguments[0].click()\", priorAutoInsuranceEle);\n\t\t\t\tjs.executeScript(\"arguments[0].value = '\" + inputValue + \"'\", priorAutoInsuranceEle);\n\t\t\t\tpriorAutoInsuranceEle.sendKeys(Keys.ENTER);\n\t\t\t\tThread.sleep(2000);\n\n\t\t\t//driver.findElement(By.xpath(\"//input[contains(@id,'Premium-inputEl')]\")).click();\n\t\t\tdriver.findElement(By.xpath(\"//span[text()='Driver']\")).click();\n\t\t\tThread.sleep(2000);\n\n\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Executed Successfully\"; \n\n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "DoesDriverHavePriorAutoInsurance_Copy_1",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 109,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Employement_Status extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\t\twait.until(ExpectedConditions.visibilityOf(driver.findElement(actionResult.element(36))));\n\t\t\t\n\t\t\tWebElement empStatusEle=driver.findElement(actionResult.element(36));\n\t\t\tempStatusEle.click();\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tempStatusEle.sendKeys(s);\n\t\t\tempStatusEle.sendKeys(Keys.DELETE);\n\t\t\tempStatusEle.sendKeys(inputValue);\n\t\t\t//empStatusEle.sendKeys(Keys.ENTER);\n\t\t\tempStatusEle.sendKeys(Keys.TAB);\n\t\t\t\n\t\t\tThread.sleep(2000);\n      \t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Executed Successfully\"; \n \n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Employement_Status",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 2303,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectFranchiseGroup extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n            WebDriverWait wait = new WebDriverWait(driver,30);\r\n            wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id, 'FranchiseGroup-inputEl')]\"))));\r\n            \r\n            WebElement empStatusEle=driver.findElement(By.xpath(\"//input[contains(@id, 'FranchiseGroup-inputEl')]\"));\r\n            empStatusEle.click();\r\n            String s=Keys.chord(Keys.CONTROL,\"a\");\r\n            empStatusEle.sendKeys(s);\r\n            empStatusEle.sendKeys(Keys.DELETE);\r\n            empStatusEle.sendKeys(inputValue);\r\n            //empStatusEle.sendKeys(Keys.ENTER);\r\n            empStatusEle.sendKeys(Keys.TAB);\r\n            \r\n            Thread.sleep(2000);\r\n            actionResult.status = true;\r\n            actionResult.comments = \"Executed Successfully\"; \r\n \r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectFranchiseGroup",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 110,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Industry extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\t\twait.until(ExpectedConditions.visibilityOf(driver.findElement(actionResult.element(222))));\n\n\t\t\tWebElement industry=driver.findElement(actionResult.element(222));\n\t\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tindustry.sendKeys(s);\n\t\t\tindustry.sendKeys(Keys.DELETE);\n\t\t\tindustry.sendKeys(inputValue);\n\t\n\t\t\tThread.sleep(2000);\n\t\t\t//industry.sendKeys(Keys.ENTER);\n\t\t\tindustry.sendKeys(Keys.TAB);\n\t\t\tThread.sleep(2000);\n\n      \t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Executed Successfully\"; \n\n \n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n       \n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Industry",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 111,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.StaleElementReferenceException;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Occupation extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\t\n\t\tdriver.manage().timeouts().implicitlyWait(100, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,40);\n\t\twait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//input[contains(@id,'SpecificIndustryType-inputEl')]\")));\n\t\tWebElement occupation=driver.findElement(actionResult.element(223));\n\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\toccupation.sendKeys(s);\n\t\toccupation.sendKeys(Keys.DELETE);\n\t\toccupation.sendKeys(inputValue);\n\t\tThread.sleep(1000);\n\t\toccupation.sendKeys(Keys.ENTER);\n\t\toccupation.sendKeys(Keys.TAB);\n\t\tThread.sleep(2000);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";  \n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Occupation",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 2422,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Work_Loss_Coordination extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\nfor(int i =1; i<=5; i++)\n{\ntry\n{ \t\t\n\t\tWebElement workLoss=driver.findElement(By.xpath(\"//input[contains(@id,'WorkLossCoordination')]\"));\n\t\tworkLoss.click();\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tworkLoss.sendKeys(s);\n\t\tworkLoss.sendKeys(Keys.DELETE);\n\t\t//Thread.sleep(2000);\n       \tworkLoss.sendKeys(inputValue);\n\t\n\t\tworkLoss.sendKeys(Keys.ENTER);\n\t\t//empStatusEle.sendKeys(Keys.TAB);\n\t\tThread.sleep(2000);\n\n      \t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\"; \n\n\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Work_Loss_Coordination",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 118,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesorNoAAADrive extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {\r\n        WebElement AAADriveYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'AAADrive_true-inputEl')]\"));\r\n        WebElement AAADriveNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'AAADrive_false-inputEl')]\"));\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            js.executeScript(\"arguments[0].click()\",AAADriveYesEle);\r\n            //AAADriveYesEle.click();\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"Driver's AAA Drive has been selected as : 'Yes'\";\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            js.executeScript(\"arguments[0].click()\",AAADriveNoEle);\r\n            //AAADriveNoEle.click();\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"Driver's AAA Drive has been selected as : 'No'\";\r\n        }\r\n    \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments = \"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status   = true;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoAAADrive",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 113,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class DoesDriverHavePriorAutoInsurance extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\nfor(int i =1; i<=5; i++) \r\n    {\r\ntry{\r\n\r\n\r\nWebElement priorAutoInsuranceEle=driver.findElement(actionResult.element(39));\r\n    String s=Keys.chord(Keys.CONTROL,\"a\");\r\n    Actions act           = new Actions(driver);\r\n    priorAutoInsuranceEle.sendKeys(s);\r\n    priorAutoInsuranceEle.sendKeys(Keys.DELETE);\r\n    \r\nJavascriptExecutor js = (JavascriptExecutor)driver;\r\n    js.executeScript(\"arguments[0].click()\", priorAutoInsuranceEle);\r\n        js.executeScript(\"arguments[0].value = '\" + inputValue + \"'\", priorAutoInsuranceEle);\r\n        Thread.sleep(1000);\r\n        act.moveToElement(priorAutoInsuranceEle).sendKeys(Keys.TAB).build().perform();\r\n        //driver.findElement(By.xpath(\"//span[contains(text(),'Employment Status')]\")).click();\r\n\r\n\r\nThread.sleep(3000);\r\n        //priorAutoInsuranceEle.sendKeys(Keys.TAB);\r\n\r\n//Actions act = new Actions(driver);\r\n//act.sendKeys(priorAutoInsuranceEle,inputValue).build().perform();\r\n//priorAutoInsuranceEle.sendKeys(Keys.ENTER);\r\n//driver.findElement(By.xpath(\"//input[contains(@id,'Premium-inputEl')]\")).click();\r\n\r\n\r\n\r\n\r\n\r\nactionResult.status = true;\r\nactionResult.comments = \"Executed Successfully\"; \r\n\r\nbreak;\r\n}\r\ncatch(Exception e){\r\n\r\nactionResult.status = false;\r\n           actionResult.comments =  e.getMessage();\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "DoesDriverHavePriorAutoInsurance",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1045,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\nimport org.openqa.selenium.StaleElementReferenceException;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Select_Carrier_Name extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\tThread.sleep(2000);\n        \tdriver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);\n\t\tWebElement carrierNameEle=driver.findElement(By.xpath(\"//input[contains(@id,'CarrierName')]\"));\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tcarrierNameEle.sendKeys(s);\n\t\tcarrierNameEle.sendKeys(Keys.DELETE);\n\t\tThread.sleep(1000);\n       \tcarrierNameEle.sendKeys(inputValue);\n\t\tThread.sleep(1000);\n\n\t\t//Actions act = new Actions(driver);\n\t\t//act.sendKeys(carrierNameEle,inputValue).build().perform();\n\t\tcarrierNameEle.sendKeys(Keys.TAB);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\"; \n\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Select_Carrier_Name",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 115,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class BodilyInjuryLimit extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n\r\nfor(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n            WebDriverWait wait=new WebDriverWait(driver, 20);\r\n            wait.until(ExpectedConditions.visibilityOf(driver.findElement(actionResult.element(41))));\r\n            WebElement bodilyInjuryLimitEle=driver.findElement(actionResult.element(41));\r\nbodilyInjuryLimitEle.click();           \r\nString s=Keys.chord(Keys.CONTROL,\"a\");\r\n            bodilyInjuryLimitEle.sendKeys(s);\r\n            bodilyInjuryLimitEle.sendKeys(Keys.DELETE);\r\n                     Thread.sleep(2000);\r\n                     \r\n            if(inputValue.equals(\"250\")){\r\n   inputValue = \"250,000/500,000\";\r\n        }         \r\n            bodilyInjuryLimitEle.sendKeys(inputValue);\r\n            Thread.sleep(2000);\r\n                  //bodilyInjuryLimitEle.sendKeys(s);\r\n                  // bodilyInjuryLimitEle.sendKeys(Keys.TAB);\r\n\r\n            //bodilyInjuryLimitEle.sendKeys(Keys.ENTER);\r\n            driver.findElement(By.xpath(\"//*[contains(@id,'AdditionalDetailcCardTab-btnInnerEl')]\")).click();\r\n                    Thread.sleep(1000);\r\n                    //bodilyInjuryLimitEle.sendKeys(Keys.TAB);\r\n            Thread.sleep(1000);\r\n            \r\n            actionResult.status = true;\r\n            actionResult.comments = \"Executed Successfully\";  \r\n\r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "BodilyInjuryLimit",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 124,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ExpirationDate extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'ExpirationDate')]\")));\n\t\tWebElement expirationDate;\n\t\texpirationDate=driver.findElement(By.xpath(\"//input[contains(@id,'ExpirationDate')]\"));\n\t\texpirationDate.click();\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\texpirationDate.sendKeys(s);\n\t\texpirationDate.sendKeys(Keys.DELETE);\n\t\texpirationDate.sendKeys(inputValue);\n\t\tKeys.chord(Keys.TAB);\n\t\tThread.sleep(2000);\n\t\tactionResult.status = true;\n        actionResult.comments =  \"The Prior Insurance Expiration Date entered as:\"+inputValue;\n \n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ExpirationDate",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 116,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class FullYearWithPriorCarrier extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n          \r\n        try \r\n        {   \r\n            \r\n        WebDriverWait wait=new WebDriverWait(driver, 30);\r\n            WebElement carrier = wait.until(ExpectedConditions.visibilityOf(driver.findElement(actionResult.element(43))));\r\n            \r\n            String s=Keys.chord(Keys.CONTROL,\"a\");\r\n            carrier.sendKeys(s);\r\n            carrier.sendKeys(Keys.DELETE);\r\n            carrier.sendKeys(inputValue);\r\n            \r\n           \r\n            //carrier.sendKeys(Keys.ENTER);\r\n            /*  driver.findElement(By.xpath(\"//input[contains(@id,'Premium-inputEl')]\")).click();\r\n            // Thread.sleep(2000);\r\n            Keys.chord(Keys.TAB);*/\r\n            Actions act = new Actions(driver);\r\n            act.moveToElement(carrier).sendKeys(Keys.TAB).build().perform();\r\n             Thread.sleep(2000);\r\n\r\n            actionResult.status = true;\r\n            actionResult.comments = \"Executed Successfully\"; \r\n \r\n        \r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments = \" Expection Type : \" + e.getMessage();\r\n        actionResult.status   = false;\r\n        }\r\n      \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "FullYearWithPriorCarrier",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 121,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class RemoveDrivers extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n       try{     \r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        WebDriverWait wait = new WebDriverWait(driver, 30);\r\n        String nextPagePath = \"//a[contains(@id,'gbutton') and @data-qtip='Next Page']\";\r\n                \r\n        if(driver.findElement(By.xpath(nextPagePath)).isDisplayed())\r\n        {\r\n            while(!driver.findElement(By.xpath(nextPagePath)).isDisplayed()){\r\n                \r\n            List<WebElement> driverSelectChkBox =  driver.findElements(By.xpath(\"//div[contains(@id,'DriversLV-body')]//img\"));\r\n            int numberOfChkBox = driverSelectChkBox.size();\r\n            System.out.println(\"No Of Drivers \"+numberOfChkBox);\r\n            Thread.sleep(2000);\r\n        if(numberOfChkBox>=1){\r\n            for(int x =1; x<=numberOfChkBox; x++) \r\n            {\r\n                WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//div[contains(@id,'DriversLV-body')]//img)[\"+x+\"]\"))));\r\n                js.executeScript(\"arguments[0].style.border='2px solid red'\", allCheckboxEle);\r\n                js.executeScript(\"arguments[0].click();\", allCheckboxEle);\r\n                Thread.sleep(2000);\r\n            }}\r\n                WebElement romoveBtnEle       = driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"));\r\n                WebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\r\n                Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\", romoveBtnEle);\r\n                wait.until(ExpectedConditions.elementToBeClickable(saveAndDraftBtnEle));\r\n                js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n                \r\n            } \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"Driver is available\";\r\n\r\n            }else{\r\n                List<WebElement> driverSelectChkBox =  driver.findElements(By.xpath(\"//div[contains(@id,'DriversLV-body')]//img\"));\r\n                int numberOfChkBox = driverSelectChkBox.size();\r\n                System.out.println(\"No Of Drivers \"+numberOfChkBox);\r\n            if(numberOfChkBox>=1){\r\n            for(int x =1; x<=numberOfChkBox; x++) \r\n            {\r\n            WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//div[contains(@id,'DriversLV-body')]//img)[\"+x+\"]\"))));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", allCheckboxEle);\r\n            js.executeScript(\"arguments[0].click();\", allCheckboxEle);\r\n            Thread.sleep(2000);\r\n            }}\r\n                Thread.sleep(4000);\r\n                WebElement romoveBtnEle       = driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"));\r\n                WebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\r\n                js.executeScript(\"arguments[0].click();\", romoveBtnEle);\r\n                js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n                actionResult.status = true;\r\n                actionResult.comments = \"Driver is available\";\r\n            }\r\n\r\n\r\n        }catch(Exception e){\r\n            actionResult.status = true;\r\n           actionResult.comments = \"Driver not available\"+e.getMessage();\r\n        }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "RemoveDrivers",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 126,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class RemoveAllDrivers extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\n    try{   \n\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tWebDriverWait wait = new WebDriverWait(driver, 30);\n\t\tString nextPagePath = \"//a[contains(@id,'gbutton') and @data-qtip='Next Page']\";\n\t\t\t\t\n\t\tif(driver.findElement(By.xpath(nextPagePath)).isDisplayed())\n\t\t{\n\t\t\twhile(!driver.findElement(By.xpath(nextPagePath)).isDisplayed()){\n\t\t\t\t\n\t\t\t\tWebElement allCheckboxEle = driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]\"));\n\t\t\t\tWebElement romoveBtnEle =driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"));\n\t\t\t\tWebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\n\t\t\t\tThread.sleep(2000);\n\t\t\t\tallCheckboxEle.click();\n\t\t\t\tThread.sleep(4000);\n\t\t\t\tdriver.findElement(By.xpath(\"//div[text()='\"+inputValue+\"']/parent::td/preceding-sibling::td/div\")).click();\n\t\t\t\tromoveBtnEle.click();\n\t\t\t\twait.until(ExpectedConditions.elementToBeClickable(saveAndDraftBtnEle));\n\t\t\t\tjs.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\n\t\t\t\t\n\t\t\t} \n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments =  \"Driver is available\";\n\n\t\t}else{\n\t\t\tWebElement allCheckboxEle = driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]\"));\n\t\t\tWebElement romoveBtnEle =driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"));\n\t\t\tWebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\n\t\t\tThread.sleep(2000);\n\t\t\tallCheckboxEle.click();\n\t\t\tThread.sleep(4000);\n\t\t\tdriver.findElement(By.xpath(\"//div[text()='\"+inputValue+\"']/parent::td/preceding-sibling::td/div\")).click();\n\t\t\tromoveBtnEle.click();\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments =  \"Driver is available\";\n\t\t}\n\n\n\t\t}catch(Exception e){\n\t\t\tactionResult.status = false;\n\t\t\tactionResult.comments =  \"Driver not available\"+e.getMessage();\n\t\t\t\n\t\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "RemoveAllDrivers",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 127,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.List;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectSingleDriver extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n       for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {   \r\n        WebDriverWait wait = new WebDriverWait(driver,120);\r\n        JavascriptExecutor js=(JavascriptExecutor)driver;\r\n        WebElement totalRowsEle=driver.findElement(By.xpath(\"//div[contains(@options,'start')]\"));\r\n        String getRowCnt=totalRowsEle.getAttribute(\"total\");\r\n        System.out.println(getRowCnt);\r\n        String[] pageLimit = totalRowsEle.getAttribute(\"options\").split(\":\");\r\n        System.out.println(pageLimit[2]);\r\n        int totalRows=Integer.parseInt(getRowCnt);\r\n        System.out.println(totalRows);\r\n        int pageLimitVal = Integer.parseInt(pageLimit[2].toString().replace(\";\",\"\"));\r\n        System.out.println(pageLimitVal);\r\n        int pageCount = totalRows/pageLimitVal;\r\n        System.out.println(pageCount);      \r\n    \r\n            while(totalRows>=15){\r\n                /**WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]/div\"))));\r\n                Thread.sleep(1000);\r\n                allCheckboxEle.click();\r\n                Thread.sleep(2000);**/\r\n                List<WebElement> driverSelectChkBox =  driver.findElements(By.xpath(\"//div[contains(@id,'DriversLV-body')]//img\"));\r\n                     int numberOfChkBox = driverSelectChkBox.size();\r\n        System.out.println(\"No Of Drivers \"+numberOfChkBox);\r\n        if(numberOfChkBox>1){\r\n        for(int x =2; x<=numberOfChkBox; x++) \r\n        {\r\n            WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//div[contains(@id,'DriversLV-body')]//img)[\"+x+\"]\"))));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", allCheckboxEle);\r\n            js.executeScript(\"arguments[0].click();\", allCheckboxEle);\r\n            Thread.sleep(2000);\r\n        }}\r\n                \r\n        //wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div/img\")))).click();\r\n        //Thread.sleep(1500);\r\n                WebElement romoveBtnEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"))));\r\n                romoveBtnEle.click();\r\n                Thread.sleep(2500);\r\n                   \r\n                WebElement saveAndDraftBtnEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"))));\r\n                js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n                Thread.sleep(1500);\r\n                \r\n                getRowCnt = driver.findElement(By.xpath(\"//div[contains(@options,'start')]\")).getAttribute(\"total\");\r\n            \r\n                System.out.println(getRowCnt);\r\n                totalRows = Integer.parseInt(getRowCnt);\r\n                System.out.println(totalRows);\r\n            }  \r\n                \r\n            if(totalRows<15){\r\n                Thread.sleep(4000);\r\n                /**WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]/div\"))));\r\n                Thread.sleep(2000);\r\n                allCheckboxEle.click();\r\n                Thread.sleep(4000);**/\r\n                 List<WebElement> driverSelectChkBox =  driver.findElements(By.xpath(\"//div[contains(@id,'DriversLV-body')]//img\"));\r\n                     int numberOfChkBox = driverSelectChkBox.size();\r\n        System.out.println(\"No Of Drivers \"+numberOfChkBox);\r\n        if(numberOfChkBox>1){\r\n        for(int x =2; x<=numberOfChkBox; x++) \r\n        {\r\n            WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//div[contains(@id,'DriversLV-body')]//img)[\"+x+\"]\"))));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", allCheckboxEle);\r\n            js.executeScript(\"arguments[0].click();\", allCheckboxEle);\r\n            Thread.sleep(2000);\r\n        }}\r\n             \r\n        //wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div/img\")))).click();\r\n        //Thread.sleep(1500);\r\n                WebElement romoveBtnEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"))));\r\n                romoveBtnEle.click();\r\n                Thread.sleep(2500);\r\n                   \r\n                WebElement saveAndDraftBtnEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"))));\r\n                js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n                Thread.sleep(4000);\r\n                \r\n            }       \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"All Drivers removed\";\r\n            \r\n            break;\r\n        }\r\n        catch(Exception e) {\r\n            actionResult.comments = \"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n            actionResult.status   = false;\r\n        }\r\n    } \r\n \r\n       \r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectSingleDriver",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 131,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class SelectSingleDriver_Test extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ttry{\n\t\n\t\tdriver.manage().timeouts().implicitlyWait(100, TimeUnit.SECONDS);\n\n\t\tWebDriverWait wait = new WebDriverWait(driver,120);\n\t\tWait<WebDriver> fluentWaiit = new FluentWait<WebDriver>(driver).withTimeout(3000, TimeUnit.MILLISECONDS).pollingEvery(100, TimeUnit.MILLISECONDS).ignoring(Exception.class);\n\t\tJavascriptExecutor js=(JavascriptExecutor)driver;\n\t\t//wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[contains(@options,'start')]\")));\n\t\twait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(\"//div[contains(@options,'start')]\")));\n\t\tWebElement totalRowsEle;\n\t\ttotalRowsEle=driver.findElement(By.xpath(\"//div[contains(@options,'start')]\"));\n\t\tString getRowCnt=totalRowsEle.getAttribute(\"total\");\n\t\tSystem.out.println(\"row cnt \"+getRowCnt);\n\t\tString[] pageLimit = totalRowsEle.getAttribute(\"options\").split(\":\");\n\t\tSystem.out.println(\"page limir \"+pageLimit[2]);\n\t\tint totalRows=Integer.parseInt(getRowCnt);\n\t\tSystem.out.println(\"total rows \"+totalRows);\n\t\tint pageLimitVal = Integer.parseInt(pageLimit[2].toString().replace(\";\",\"\"));\n\t\tSystem.out.println(\"pagelimit value \"+pageLimitVal);\n\t\tint pageCount = totalRows/pageLimitVal;\n\t\tSystem.out.println(\"page count \"+pageCount);\n\t\t\n\t\t\n\t\n\t\t\twhile(totalRows>=15)\n\t\t\t{\n                driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);\n\t\t\t\t//wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]\")));\t\n\t\t\t\t//WebElement allCheckboxEle = driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]\"));\n\t\t\t\t\n\t\t\t\tWebElement allCheckboxEle = fluentWaiit.until(new Function<WebDriver, WebElement>() {\n\t\t\t\tpublic WebElement apply(WebDriver driver) {\n\t\t\t\treturn driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]\"));}});\n\t\t\t\t\n\t\t\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\")));\t\n\t\t\t\tWebElement romoveBtnEle =driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"));\n\t\t\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//a[contains(@id,'Draft')]\")));\t\n\t\t\t\tWebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\n\t\t\t\tThread.sleep(500);\n\t\t\t\tallCheckboxEle.click();\t\t\t\t\n\t\t\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div\")));\t\n\t\t\t\tdriver.findElement(By.xpath(\"//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div\")).click();\n\t\t\t\tromoveBtnEle.click();\n\t\t\t\twait.until(ExpectedConditions.elementToBeClickable(saveAndDraftBtnEle));\n\t\t\t\tjs.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\n\t\t\t\tThread.sleep(4000);\n\n\t\t\t\t//wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[contains(@options,'start')]\")));\t\n\t\t\t\tgetRowCnt=driver.findElement(By.xpath(\"//div[contains(@options,'start')]\")).getAttribute(\"total\");\n\t\t\t\n\t\t\t\tSystem.out.println(\"New row cnt \"+getRowCnt);\n\t\t\t\ttotalRows=Integer.parseInt(getRowCnt);\n\t\t\t\tSystem.out.println(\"Total new rows \"+totalRows);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif(totalRows<15)\n\t\t\t{\n\t\t\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\t\t\t\n\t\t\t\t//WebElement allCheckboxEle = driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]\"));\n\t\t\t\tWebElement allCheckboxEle = fluentWaiit.until(new Function<WebDriver, WebElement>() {\n\t\t\t\tpublic WebElement apply(WebDriver driver) {\n\t\t\t\treturn driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]\"));}});\n\t\t\t\t\n\t\t\t\tWebElement romoveBtnEle =driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"));\n\t\t\t\tWebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\t\t\t\n\t\t\t\tThread.sleep(2000);\n\t\t\t\tallCheckboxEle.click();\n\t\t\t\tThread.sleep(4000);\n\t\t\t\tdriver.findElement(By.xpath(\"//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div\")).click();\n\t\t\t\tromoveBtnEle.click();\n\t\t\t\t//wait.until(ExpectedConditions.elementToBeClickable(saveAndDraftBtnEle));\n\t\t\t\tjs.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\n\t\t\t\tThread.sleep(4000);\n\n\t\t\t}\n\t\t\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"All Drivers removed\";\n\n\t}\n\tcatch(Exception e){\n\t\tactionResult.status = false;\n           \tactionResult.comments =  e.getMessage();\n\n\t}\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectSingleDriver_Test",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 178,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.List;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectSingleDriver_UsingAllDriverCheckBox extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n       for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {   \r\n        WebDriverWait wait = new WebDriverWait(driver,120);\r\n        JavascriptExecutor js=(JavascriptExecutor)driver;\r\n        WebElement totalRowsEle=driver.findElement(By.xpath(\"//div[contains(@options,'start')]\"));\r\n        String getRowCnt=totalRowsEle.getAttribute(\"total\");\r\n        System.out.println(getRowCnt);\r\n        String[] pageLimit = totalRowsEle.getAttribute(\"options\").split(\":\");\r\n        System.out.println(pageLimit[2]);\r\n        int totalRows=Integer.parseInt(getRowCnt);\r\n        System.out.println(totalRows);\r\n        int pageLimitVal = Integer.parseInt(pageLimit[2].toString().replace(\";\",\"\"));\r\n        System.out.println(pageLimitVal);\r\n        int pageCount = totalRows/pageLimitVal;\r\n        System.out.println(pageCount);      \r\n    \r\n            while(totalRows>=15){\r\n               WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]/div\"))));\r\n                Thread.sleep(1000);\r\n                allCheckboxEle.click();\r\n                Thread.sleep(2000);\r\n                /**List<WebElement> driverSelectChkBox =  driver.findElements(By.xpath(\"//div[contains(@id,'DriversLV-body')]//img\"));\r\n                     int numberOfChkBox = driverSelectChkBox.size();\r\n        System.out.println(\"No Of Drivers \"+numberOfChkBox);\r\n        if(numberOfChkBox>1){\r\n        for(int x =2; x<=numberOfChkBox; x++) \r\n        {\r\n            WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//div[contains(@id,'DriversLV-body')]//img)[\"+x+\"]\"))));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", allCheckboxEle);\r\n            js.executeScript(\"arguments[0].click();\", allCheckboxEle);\r\n            Thread.sleep(2000);\r\n        }}**/\r\n                \r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div/img\")))).click();\r\n        Thread.sleep(1500);\r\n                WebElement romoveBtnEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"))));\r\n                romoveBtnEle.click();\r\n                Thread.sleep(2500);\r\n                   \r\n                WebElement saveAndDraftBtnEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"))));\r\n                js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n                Thread.sleep(1500);\r\n                \r\n                getRowCnt = driver.findElement(By.xpath(\"//div[contains(@options,'start')]\")).getAttribute(\"total\");\r\n            \r\n                System.out.println(getRowCnt);\r\n                totalRows = Integer.parseInt(getRowCnt);\r\n                System.out.println(totalRows);\r\n            }  \r\n                \r\n            if(totalRows<15){\r\n                Thread.sleep(4000);\r\n                WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//*[contains(@id,'rowcheckcolumn')])[3]/div\"))));\r\n                Thread.sleep(2000);\r\n                allCheckboxEle.click();\r\n                Thread.sleep(4000);\r\n                /**List<WebElement> driverSelectChkBox =  driver.findElements(By.xpath(\"//div[contains(@id,'DriversLV-body')]//img\"));\r\n                     int numberOfChkBox = driverSelectChkBox.size();\r\n        System.out.println(\"No Of Drivers \"+numberOfChkBox);\r\n        if(numberOfChkBox>1){\r\n        for(int x =2; x<=numberOfChkBox; x++) \r\n        {\r\n            WebElement allCheckboxEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//div[contains(@id,'DriversLV-body')]//img)[\"+x+\"]\"))));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", allCheckboxEle);\r\n            js.executeScript(\"arguments[0].click();\", allCheckboxEle);\r\n            Thread.sleep(2000);\r\n        }}**/\r\n             \r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(),'\"+inputValue+\"')]/parent::td/preceding-sibling::td/div/img\")))).click();\r\n        Thread.sleep(1500);\r\n                WebElement romoveBtnEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'DriversLV_tb:Remove')]\"))));\r\n                romoveBtnEle.click();\r\n                Thread.sleep(2500);\r\n                   \r\n                WebElement saveAndDraftBtnEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"))));\r\n                js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n                Thread.sleep(4000);\r\n                \r\n            }       \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"All Drivers removed\";\r\n            \r\n            break;\r\n        }\r\n        catch(Exception e) {\r\n            actionResult.comments = \"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n            actionResult.status   = false;\r\n        }\r\n    } \r\n \r\n       \r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectSingleDriver_UsingAllDriverCheckBox",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 46,
    "ProjectId": 1,
    "LocatorType": 3,
    "Locator": "SubmissionWizard:Next-btnEl",
    "PageId": 9,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "DriversDriversSCREENNext_BUTTON",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9,
    "EntityName": "Page",
    "ProjectId": 1,
    "DictionaryPageType": 1,
    "Name": "Drivers",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 101,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 6754,
        "StepNumber": 1,
        "Description": "VarifyPageText",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Reports",
        "CustomActionId": 876,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6758,
        "StepNumber": 2,
        "Description": "VerifyReportsScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 281,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6755,
        "StepNumber": 3,
        "Description": "InsuranceScoreOrdered",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Yes-Order/Retrieve",
        "CustomActionId": 279,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6757,
        "StepNumber": 4,
        "Description": "Insurance_Score_Ordered_Other_States",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No-Opt Out",
        "CustomActionId": 280,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6752,
        "StepNumber": 5,
        "Description": "ClickOnInsuranceScoreButton",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'orderInsuranceScore')]",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 49,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6756,
        "StepNumber": 6,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6761,
        "StepNumber": 7,
        "Description": "AddDrivingViolations",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "OnlyForBR_Rules",
        "ParameterValue": null,
        "CustomActionId": 1187,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6765,
        "StepNumber": 8,
        "Description": "InsuranceScore_Ordered",
        "LocatorTypeId": 7,
        "Locator": "(//input[@data-ref='inputEl']) [8]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "No-Opt Out",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6753,
        "StepNumber": 9,
        "Description": "ClickOnNextBtnOnReportsPage",
        "LocatorTypeId": 7,
        "Locator": "//a[@id='SubmissionWizard:Next']",
        "ActionId": 9,
        "ParameterName": "",
        "ParameterValue": "",
        "CustomActionId": null,
        "ObjectDictionaryId": 51,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6760,
        "StepNumber": 10,
        "Description": "WaitForVehiclesScreenGetDisplayed",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "15",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6759,
        "StepNumber": 11,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6750,
        "StepNumber": 12,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6766,
        "StepNumber": 13,
        "Description": "Click on lossBtn",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'InsuranceScoreCV:lossesAndViolationsCardTab-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6762,
        "StepNumber": 14,
        "Description": "ClickHomeLosses",
        "LocatorTypeId": 7,
        "Locator": "//*[text()='Home Losses']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6748,
        "StepNumber": 15,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6767,
        "StepNumber": 16,
        "Description": "YesorNoHomeLoss",
        "LocatorTypeId": 7,
        "Locator": "(//input[@data-ref='inputEl']) [4]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": "yes",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6763,
        "StepNumber": 17,
        "Description": "YesOrNoHomeLosses",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "DT_YesOrNoHomeLosses",
        "ParameterValue": null,
        "CustomActionId": 290,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6751,
        "StepNumber": 18,
        "Description": "wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6768,
        "StepNumber": 19,
        "Description": "OrderAndRetriveBtn",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'Score:orderInsuranceScore')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6764,
        "StepNumber": 20,
        "Description": "Order/Retrieve Home Loss History",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(text(),'Order/Retrieve Home Loss History')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6749,
        "StepNumber": 21,
        "Description": "wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6769,
        "StepNumber": 22,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": 7,
        "Locator": "//a[@id='SubmissionWizard:Next']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Reports_Other_States",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 281,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyReportsScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ttry{\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//span[contains(@id,'Report_AcgScreen:ttlBar')]\")));\n\t\tWebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'Report_AcgScreen:ttlBar')]\"));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"Reports\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Reports' screen successfully\";\n\t\t}\n\t}\n\tcatch(Exception e){\n\t\tString exceptionMsg = e.getMessage();\n\t\tactionResult.status = false;\n           \tactionResult.comments =  \"'Reports' screen is not displayed\";\n\t}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyReportsScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 279,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class InsuranceScoreOrdered extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n      \r\n      try {\r\n\r\n            JavascriptExecutor js = (JavascriptExecutor) driver;\r\n            boolean status = false;\r\n            for (int i = 0; i <= 120; i++) {\r\n                status = Boolean.valueOf((boolean) js.executeScript(\"return Ext.Ajax.isLoading();\"));\r\n                System.out.println(status);\r\n                try {\r\n                    Thread.sleep(500);\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                if (!status) {\r\n\r\n                    break;\r\n                }\r\n            }\r\n            actionResult.status = true;\r\n            actionResult.comments = \"Wait Processed\";\r\n\r\n        } catch (Exception e) {\r\n            actionResult.comments =e.getMessage();\r\n        }\r\n      \r\n       for(int i =1; i<=5; i++) \r\n         {       \r\n        try \r\n        {   \r\n         \r\n        WebDriverWait wait    = new WebDriverWait(driver,25);\r\n        actionResult.comments = \"start\";\r\n        wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//input[contains(@id,'ScoreType')]\")));\r\n        WebElement insuranceScoreOrderEle = driver.findElement(By.xpath(\"//input[contains(@id,'ScoreType')]\"));\r\n       \r\n        JavascriptExecutor js             = (JavascriptExecutor)driver;\r\n        \r\n        Thread.sleep(5000);\r\n        \r\n        String insuranceScoreOrderValue = driver.findElement(By.xpath(\"//input[contains(@id,'ScoreType')]\")).getAttribute(\"value\");\r\n        actionResult.comments           = insuranceScoreOrderValue;\r\n        /*  if(insuranceScoreOrderValue.equals(\"Manual Entry\")){\r\n        WebElement primerIndicator = driver.findElement(By.xpath(\"//*[contains(@id,'PremierIndicator-inputEl')]\"));\r\n        WebElement primerLevel     = driver.findElement(By.xpath(\"//*[contains(@id,'PremierLevel2-inputEl')]\"));\r\n        \r\n        js.executeScript(\"arguments[0].click()\",primerIndicator);\r\n        primerIndicator.sendKeys(\"Above Average\");\r\n        Thread.sleep(500);\r\n        primerIndicator.sendKeys(Keys.ENTER);\r\n         actionResult.status   = true;\r\n         // actionResult.comments = \"Primer indicator selected\";\r\n     \r\n        \r\n        js.executeScript(\"arguments[0].click()\",primerLevel);\r\n        primerLevel.sendKeys(\"P6\");\r\n        Thread.sleep(500);\r\n        primerLevel.sendKeys(Keys.ENTER);\r\n        actionResult.status   = true;\r\n        //actionResult.comments = \"Primer lavel selected\";\r\n        \r\n    }*/\r\n    if(insuranceScoreOrderValue.equals(\"Yes-Order/Retrieve\")){\r\n    WebElement orderRetrieveButton = driver.findElement(By.xpath(\"//*[contains(@id,'orderInsuranceScore')]\"));\r\n        js.executeScript(\"arguments[0].click()\",orderRetrieveButton);\r\n        Thread.sleep(4000);\r\n        actionResult.status   = true;\r\n       try{\r\n            driver.findElement(By.xpath(\"//input[contains(@id,'ScoreType')]\"));\r\n            js.executeScript(\"arguments[0].click()\",orderRetrieveButton);\r\n            Thread.sleep(4000);\r\n            }catch(Exception exc) {\r\n                actionResult.comments = exc.getMessage();\r\n            }\r\n        \r\n    }\r\n        \r\n   \r\n   else{      \r\n     js.executeScript(\"arguments[0].click()\",insuranceScoreOrderEle);\r\n        //insuranceScoreOrderEle.click();\r\n         insuranceScoreOrderEle.sendKeys(inputValue);\r\n          Thread.sleep(500);\r\n           insuranceScoreOrderEle.sendKeys(Keys.ENTER);\r\n         actionResult.status   = true;\r\n           actionResult.comments = \"The Insurance Score Order has been selected as:\"+inputValue; \r\n       }\r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "InsuranceScoreOrdered",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 280,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Insurance_Score_Ordered_TN extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\ttry{\n\t\tWebElement insuranceScoreOrderEle = driver.findElement(By.id(\"SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:Report_AcgScreen:Report_AcgPanelSet:InsuranceScoreCV:InsuranceScorePanelSet:CreditScoreEditDV:ScoreType2-inputEl\"));\n\t\tinsuranceScoreOrderEle.click();\n\t\tinsuranceScoreOrderEle.sendKeys(inputValue);\n\t\tThread.sleep(2000);\n\t\tinsuranceScoreOrderEle.sendKeys(Keys.ENTER);\n           \tactionResult.status = true;\n           \tactionResult.comments =  \"The Insurance Score Order has been selected as:\"+inputValue;\n\t}\n\tcatch(Exception e){\n\t\tString exceptionDetails = e.getMessage();\n\t\tactionResult.status = false;\n           \tactionResult.comments =  \"'The Insurance Score Order' field is not available in 'Reports screen'\"+exceptionDetails;\n\n\t}\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Insurance_Score_Ordered_Other_States",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 49,
    "ProjectId": 1,
    "LocatorType": 7,
    "Locator": "//a[contains(@id,'orderInsuranceScore')]",
    "PageId": 10,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnInsuranceScoreButton",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 10,
    "EntityName": "Page",
    "ProjectId": 1,
    "DictionaryPageType": 1,
    "Name": "Reports",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1187,
    "Description": "To Enter Driving Violation using parameter as follows:\r\nDriverName AND 01012021 AND 02012021 AND Seatbelt Violation",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class AddDrivingViolations extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n     \r\n    \r\n    try{\r\n       \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            \r\n            WebDriverWait wait = new WebDriverWait(driver,20);\r\n            \r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            \r\n            Actions act = new Actions(driver);\r\n            \r\n            String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n            String[] violationParams = inputValue.split(\" AND \");\r\n            String driverName = violationParams[0].toString();\r\n            String occuranceDt = violationParams[1].toString();\r\n            String convictionDt = violationParams[2].toString();\r\n            String violationDesc = violationParams[3].toString();\r\n            \r\n            /////////    Enter into Losses and Violation   ///////////\r\n            \r\n            for(int retryA =1; retryA<=5; retryA++) \r\n            {\r\n                    \r\n                try \r\n                    {   \r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'lossesAndViolationsCardTab-btnInnerEl')]\"))));\r\n                    WebElement lossedAndViolationElemt = driver.findElement(By.xpath(\"//*[contains(@id,'lossesAndViolationsCardTab-btnInnerEl')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", lossedAndViolationElemt);\r\n                                                            \r\n                    lossedAndViolationElemt.click();\r\n                    \r\n                    Thread.sleep(500);\r\n                                    \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Driver Name' has been Selected as : \"+driverName;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryA + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    Thread.sleep(3000);\r\n                                \r\n            ////////       Add Violation      ///////////////////////////////\r\n            for(int retryA =1; retryA<=5; retryA++) \r\n            {\r\n                    \r\n                try \r\n                    {   \r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violation:Add-btnInnerEl')]\"))));\r\n                    WebElement addBtn = driver.findElement(By.xpath(\"//*[contains(@id,'violation:Add-btnInnerEl')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", addBtn);\r\n                    \r\n                                        \r\n                    addBtn.click();\r\n                    Thread.sleep(1000);\r\n                                        \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"Executed\";\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryA + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    Thread.sleep(2000);\r\n                    \r\n                    ///Number of Violations///////////////\r\n                    \r\n                    int noOfViolations = driver.findElements(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table\")).size();\r\n            \r\n            \r\n            \r\n            ////////       Driver Name      ///////////////////////////////\r\n            \r\n            for(int retryA =1; retryA<=5; retryA++) \r\n            {\r\n                    \r\n                try \r\n                    {   \r\n                        //WebElement driverNameEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[2]/tbody/tr/td[2]/div[contains(text(),'none')]\"))));\r\n                        WebElement driverNameEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"+noOfViolations+\"]/tbody/tr/td[2]/div\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", driverNameEle);\r\n                    \r\n                                        \r\n                    js.executeScript(\"arguments[0].click();\", driverNameEle);\r\n                    Thread.sleep(1000);\r\n                    //act.moveToElement(driverNameEle).sendKeys(selectText).build().perform();\r\n                    //Thread.sleep(500);\r\n                    act.moveToElement(driverNameEle).sendKeys(Keys.ARROW_DOWN).build().perform();\r\n                    Thread.sleep(500);\r\n                    //act.moveToElement(driverNameEle).sendKeys(Keys.ARROW_DOWN).build().perform();\r\n                    //Thread.sleep(500);\r\n                    //act.moveToElement(driverNameEle).sendKeys(Keys.ENTER).build().perform();\r\n                    //Thread.sleep(500);\r\n                    //js.executeScript(\"arguments[0].value='\"+driverName+\"'\",driverNameEle);\r\n                    //Thread.sleep(500);\r\n                    act.moveToElement(driverNameEle).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(2000);\r\n                                        \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Driver Name' has been Selected as : \"+driverName;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryA + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    Thread.sleep(3000);\r\n                    \r\n                    ////////       Occurance Date        ///////////////////////////////\r\n            \r\n                for(int retryB =1; retryB<=5; retryB++) \r\n                    {\r\n                    \r\n                    try \r\n                    {   \r\n                        WebElement occuranceDtEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"+noOfViolations+\"]/tbody/tr/td[3]/div\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", occuranceDtEle);\r\n                    \r\n                    js.executeScript(\"arguments[0].click();\", occuranceDtEle);\r\n                    Thread.sleep(1000);\r\n                    act.moveToElement(occuranceDtEle).sendKeys(occuranceDt).build().perform();\r\n                    Thread.sleep(2000);\r\n                    act.moveToElement(occuranceDtEle).sendKeys(Keys.ENTER).build().perform();\r\n                    //act.moveToElement(occuranceDtEle).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Occurance Date' has been Selected as : \"+occuranceDt;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryB + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    //////////   Conviction Date   //////////////////////////////\r\n                    for(int retryC =1; retryC<=5; retryC++) \r\n                    {\r\n                    \r\n                    try \r\n                    {   \r\n                        \r\n                        WebElement convictionDtEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"+noOfViolations+\"]/tbody/tr/td[4]/div\"))));\r\n                    \r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", convictionDtEle);\r\n                    js.executeScript(\"arguments[0].click();\", convictionDtEle);\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(convictionDtEle).sendKeys(convictionDt).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(convictionDtEle).sendKeys(Keys.ENTER).build().perform();\r\n                    Thread.sleep(1000);\r\n                    \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Personal Property' has been Entered as : \"+convictionDt;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryC + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    //////////   Violation Description   //////////////////////////////\r\n                    for(int retryD =1; retryD<=5; retryD++) \r\n                    {\r\n                    \r\n                    try \r\n                    {   \r\n                        \r\n                        //WebElement violationDescEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"noOfViolations\"]/tbody/tr/td[6]/div[contains(text(),'none')]\"))));\r\n                        WebElement violationDescEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"+noOfViolations+\"]/tbody/tr/td[6]/div\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", violationDescEle);\r\n                    \r\n                    js.executeScript(\"arguments[0].click();\", violationDescEle);\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.ARROW_UP).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.ARROW_UP).build().perform();\r\n                    Thread.sleep(500);\r\n                    //act.moveToElement(violationDescEle).sendKeys(Keys.ENTER).build().perform();\r\n                    Thread.sleep(500);\r\n                    //js.executeScript(\"arguments[0].value='\"+violationDesc+\"'\",violationDescEle);\r\n                    //Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(1000);\r\n                    \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Violation Description' has been Entered as : \"+violationDesc;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryD + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                            \r\n                    Thread.sleep(3000);\r\n                                                    \r\n            actionResult.comments = \"The Violation Details have been updated\" + driverName + occuranceDt + convictionDt + violationDesc;\r\n            actionResult.status = true;\r\n\r\n                }\r\n            \r\n            \r\n        catch(Exception e) {\r\n                actionResult.comments = e.getMessage();\r\n                actionResult.status = false;\r\n            }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddDrivingViolations",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 51,
    "ProjectId": 1,
    "LocatorType": 7,
    "Locator": "//a[@id='SubmissionWizard:Next']",
    "PageId": 10,
    "OuterHTML": null,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnNextBtnOnReportsPage",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 290,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesOrNoHomeLosses extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\ntry{\r\n    \r\n        WebDriverWait wait = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        WebElement lossesTab = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'btnInnerEl') and contains(text(),'Losses')]\"))));\r\n    \r\n        //lossesTab.click();\r\n        js.executeScript(\"arguments[0].style.border='2px solid red'\", lossesTab);\r\n        js.executeScript(\"arguments[0].click();\",lossesTab);\r\n                Thread.sleep(1000);\r\n        WebElement homeLossesYes = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'homeLosses_true-inputEl')]\"))));\r\n        WebElement homeLossesNo = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'homeLosses_false-inputEl')]\"))));\r\n        \r\n    \r\n        if(inputValue.equalsIgnoreCase(\"Yes\"))\r\n        {\r\n            if(homeLossesYes.getAttribute(\"tabindex\").equals(\"0\"))\r\n            {\r\n            homeLossesYes.click();\r\n                actionResult.status = true;\r\n                actionResult.comments =  \" 'homeLossesYes' has been selected as : 'Yes'\";\r\n            }\r\n            else{\r\n            actionResult.status = true;\r\n                actionResult.comments =  \" 'homeLossesNo' has been selected as : 'Yes'\";\r\n            }\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\"))\r\n        {\r\n            if(homeLossesNo.getAttribute(\"tabindex\").equals(\"0\"))\r\n            {\r\n            homeLossesNo.click();\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"'homeLossesNo' has been selected as : 'No'\";\r\n            }\r\n            else{\r\n            actionResult.status = true;\r\n                actionResult.comments =  \"'homeLossesYes' has been selected as : 'No'\";\r\n            }\r\n        }\r\n        \r\n        }\r\n        catch(Exception e){\r\n            String MsgDetails = e.getMessage();\r\n            actionResult.status = false;\r\n                actionResult.comments =  \"'homeLossesNo' field is not available in Losses \"+MsgDetails;\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesOrNoHomeLosses",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 14,
    "Description": "Adding more vehicles on the Vehicle Screen to bind the policy.",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 5198,
        "StepNumber": 1,
        "Description": "VehicleDeletion",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 986,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5199,
        "StepNumber": 2,
        "Description": "WaitToCreateNewVehicle",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5200,
        "StepNumber": 3,
        "Description": "AddAdditionalVehicles",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 246,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5192,
        "StepNumber": 4,
        "Description": "AddAdditionalVehiclesRewrite",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1103,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5197,
        "StepNumber": 5,
        "Description": "AddAdditionalVehicles_Updated",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 248,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5201,
        "StepNumber": 6,
        "Description": "Title holder No",
        "LocatorTypeId": 7,
        "Locator": "(//input[@data-ref='inputEl']) [28]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5202,
        "StepNumber": 7,
        "Description": "wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5203,
        "StepNumber": 8,
        "Description": "Text area 1 ",
        "LocatorTypeId": 7,
        "Locator": "(//textarea[@role='textbox']) [1]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "San",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5204,
        "StepNumber": 9,
        "Description": "Text area 2",
        "LocatorTypeId": 7,
        "Locator": "(//textarea[@role='textbox']) [2]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "Notmandatory",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5193,
        "StepNumber": 10,
        "Description": "AddAdditionalVehicles_tnc",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 254,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5194,
        "StepNumber": 11,
        "Description": "Vehicle_Usage_Screenshot",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 253,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5195,
        "StepNumber": 12,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": "3",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5196,
        "StepNumber": 13,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "AddAdditionalVehicles",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 986,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class VehicleDeletion extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    for(int j =1; j<=5; j++) \r\n    {\r\n        try \r\n        {   WebDriverWait wait = new WebDriverWait(driver,30);  \r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            int rowsize =driver.findElements(By.xpath(\"//div[contains(@id,'PAVehiclesPanelSet:VehiclesListDetailPanel:VehiclesLV')]//table\")).size();\r\n            System.out.println(rowsize);\r\n            if(rowsize>0){\r\n            for(int i=1;i<=rowsize;i++){\r\n                \r\n                WebElement chckBox = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//div[contains(@id,'PAVehiclesPanelSet:VehiclesListDetailPanel:VehiclesLV-body')]/descendant::img)[\"+i+\"]\"))));\r\n                js.executeScript(\"arguments[0].style.border='2px solid red'\", chckBox);\r\n                js.executeScript(\"arguments[0].click();\",chckBox);\r\n                Thread.sleep(500);\r\n            }\r\n            Thread.sleep(1000);\r\n            WebElement removeBtn = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'PAVehiclesPanelSet:VehiclesListDetailPanel_tb:Remove') or contains(@id,'PAVehiclesPanelSet:VehiclesListDetailPanel_tb:removeButton_Acg-btnInnerEl')]\"))));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", removeBtn);\r\n            js.executeScript(\"arguments[0].click();\",removeBtn);\r\n            Thread.sleep(1000);     \r\n            }\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Vehicle Deleted Successfully\";\r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +j + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n\r\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VehicleDeletion",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 246,
    "Description": "Adding multiple vehicles on the Vehicle screen to bind the policy.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement; \r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class AddAdditionalVehicles extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    try{\r\n\r\n        driver.manage().timeouts().implicitlyWait(150, TimeUnit.SECONDS);\r\n        \r\n        WebDriverWait wait = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act = new Actions(driver);\r\n        String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n        String[] VehiclesInfo = inputValue.split(\"@@\");\r\n        int vehicleCount= VehiclesInfo.length;\r\n        System.out.println(vehicleCount);\r\n        for(int i=0;i<=vehicleCount-1;i++){\r\n        System.out.println(VehiclesInfo[i]);\r\n        String[] addVehicleParams = VehiclesInfo[i].split(\" AND \");\r\n        int paramsCount = addVehicleParams.length;\r\n\r\n        for(int j=0;j<=vehicleCount-1;j++){\r\n             Thread.sleep(3000);\r\n             for(int retryy=0; retryy<5; retryy++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehiclesListDetailPanel_tb:Add')]\"))));\r\n            WebElement createVehicleBtn = driver.findElement(By.xpath(\"//a[contains(@id,'VehiclesListDetailPanel_tb:Add')]\"));\r\n            js.executeScript(\"arguments[0].click()\",createVehicleBtn);\r\n            Thread.sleep(3000);\r\n            break;\r\n            }catch(Exception ex){\r\n                actionResult.comments = ex.getMessage();\r\n            }}\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDetailCardTab')]\"))));         \r\n            WebElement vehicleDetailsTabEle = driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDetailCardTab')]\"));\r\n            String getVehicleDetailsTabEle = vehicleDetailsTabEle.getAttribute(\"tabindex\");\r\n            if(getVehicleDetailsTabEle.equals(\"0\")){\r\n                actionResult.status = true;\r\n                    actionResult.comments =  \"User is on 'Vehicle Details Tab' in 'Vehicles Screen'\";\r\n            }\r\n            else{\r\n                           \r\n                actionResult.status = false;\r\n                actionResult.comments =  \" 'Vehicle Details Tab' is not opened\";\r\n            }\r\n                  Thread.sleep(2000);\r\n            \r\n                  for(int retry=0; retry<1; retry++){\r\n            try{\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:Type_DV-inputEl')]\"))));\r\n            WebElement vehicleTypeEle = driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:Type_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",vehicleTypeEle);\r\n            vehicleTypeEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[0]+\"'\",vehicleTypeEle);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.TAB).build().perform();\r\n            Thread.sleep(1000);\r\n            js.executeScript(\"arguments[0].click();\",vehicleDetailsTabEle);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retry++;\r\n            }\r\n                \r\n            }\r\n            \r\n            \r\n\r\n            String vehiclesYearPrior1981 = addVehicleParams[2].toString();\r\n            System.out.println(vehiclesYearPrior1981);\r\n        \r\n           for(int retryAA=0; retryAA<5; retryAA++){\r\n            try{\r\n             wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_true-inputEl')]\"))));\r\n            WebElement vehiclesYearPrior1981YesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_true-inputEl')]\"));\r\n            WebElement vehiclesYearPrior1981NoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_false-inputEl')]\"));\r\n            if(vehiclesYearPrior1981.equalsIgnoreCase(\"Yes\")){\r\n            Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\",vehiclesYearPrior1981YesEle);\r\n                Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \" 'Vehicle's Year Prior to 1981' has been selected as : 'Yes'\";\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\",vehiclesYearPrior1981NoEle);\r\n                Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \" 'Vehicle's Year Prior to 1981' has been selected as : 'No'\";\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryAA++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryB=0; retryB<5; retryB++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:searchBy-inputEl')]\"))));\r\n            WebElement searchByEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:searchBy-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",searchByEle);\r\n            searchByEle.sendKeys(selectText);\r\n            act.moveToElement(searchByEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[3]+\"'\",searchByEle);\r\n            act.moveToElement(searchByEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(searchByEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryB++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryC=0; retryC<5; retryC++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"))));\r\n            WebElement VINNoTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click()\",VINNoTxtEle);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[4]+\"'\",VINNoTxtEle);\r\n            act.moveToElement(VINNoTxtEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryC++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryAC=0; retryAC<5; retryAC++){\r\n            try{\r\n            String AirBag = addVehicleParams[5].toString();\r\n            System.out.println(AirBag);\r\n            Thread.sleep(4000);\r\n\r\n            if(AirBag.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_true-inputEl')]\"))));\r\n                WebElement AirBagYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",AirBagYesEle);\r\n                AirBagYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            else{\r\n                             Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_false-inputEl')]\"))));\r\n                WebElement AirBagNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",AirBagNoEle);\r\n                AirBagNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n                      Thread.sleep(3000);\r\n            String ABS = addVehicleParams[6].toString();\r\n            System.out.println(ABS);\r\n            \r\n                   Thread.sleep(4000);\r\n            if(ABS.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_true-inputEl')]\"))));\r\n                WebElement ABSYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",ABSYesEle);\r\n                ABSYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_false-inputEl')]\"))));\r\n                WebElement ABSNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",ABSNoEle);\r\n                ABSNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryAC++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryD=0; retryD<5; retryD++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AntiTheftDevice-inputEl')]\"))));\r\n            WebElement antiTheftEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AntiTheftDevice-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",antiTheftEle);\r\n            antiTheftEle.sendKeys(selectText);\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[7]+\"'\",antiTheftEle);\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryD++;\r\n            }\r\n                \r\n            }\r\n        \r\n            \r\n            String AAASafetyInsp = addVehicleParams[8].toString();\r\n            \r\n            Thread.sleep(2000);\r\n            for(int retryE=0; retryE<5; retryE++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"))));\r\n            WebElement vehicleUsageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",vehicleUsageEle);\r\n            vehicleUsageEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[9]+\"'\",vehicleUsageEle);\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.TAB).build().perform();\r\n            String vehicleusagevalue = addVehicleParams[9].toString();\r\n                if (vehicleusagevalue.equalsIgnoreCase(\"Business\")) {\r\n                    WebElement useOfVehicle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:TradesmanType-inputEl')]\"))));\r\n                    js.executeScript(\"arguments[0].click();\",useOfVehicle);\r\n                    useOfVehicle.sendKeys(selectText);\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.DELETE).build().perform();\r\n                    js.executeScript(\"arguments[0].value='\"+addVehicleParams[19]+\"'\",useOfVehicle);\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.ENTER).build().perform();\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.TAB).build().perform(); \r\n                        String useOfVehicleValue = addVehicleParams[19].toString();\r\n                        if (useOfVehicleValue.equalsIgnoreCase(\"other\")) {\r\n                        WebElement OtherReason = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:TradesmanOther-inputEl')]\"))));\r\n                            js.executeScript(\"arguments[0].click();\",OtherReason);\r\n                            js.executeScript(\"arguments[0].value='\"+addVehicleParams[19]+\"'\",OtherReason);\r\n                            act.moveToElement(OtherReason).sendKeys(Keys.TAB).build().perform();  \r\n                        }\r\n                }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryE++;\r\n            }\r\n                \r\n            }\r\n        \r\n            for(int retryF=0; retryF<5; retryF++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:annualmiles_DV-inputEl')]\"))));\r\n            WebElement AnnualMileageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:annualmiles_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click()\",AnnualMileageEle);\r\n            Thread.sleep(750);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[10]+\"'\",AnnualMileageEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(AnnualMileageEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryF++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryAF=0; retryAF<5; retryAF++){\r\n            try{\r\n            String PreviouslyTitled = addVehicleParams[11].toString(); \r\n            System.out.println(PreviouslyTitled);\r\n            Thread.sleep(2000);\r\n            if(PreviouslyTitled.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_true-inputEl')]\"))));\r\n                WebElement PreviouslyTitledYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",PreviouslyTitledYesEle);\r\n                //PreviouslyTitledYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(2000);\r\n                //js.executeScript(\"arguments[0].click()\",vehicleDetailsTabEle);\r\n                //Thread.sleep(2000);\r\n            }\r\n            else{\r\n                Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_false-inputEl')]\"))));\r\n                WebElement PreviouslyTitledNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",PreviouslyTitledNoEle);\r\n                Thread.sleep(1000);\r\n                //PreviouslyTitledNoEle.sendKeys(Keys.TAB);\r\n                //js.executeScript(\"arguments[0].click()\",vehicleDetailsTabEle); \r\n                //Thread.sleep(1000);\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryF++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryG=0; retryG<5; retryG++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleOwnershipType-inputEl')]\"))));\r\n            WebElement ownershipEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleOwnershipType-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",ownershipEle);\r\n            ownershipEle.sendKeys(selectText);\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[12]+\"'\",ownershipEle);\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryG++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryAG=0; retryAG<5; retryAG++){\r\n            try{\r\n           \r\n            String VehicleModification = addVehicleParams[13].toString();\r\n            System.out.println(VehicleModification);\r\n            Thread.sleep(3000);\r\n            if(VehicleModification.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_true-inputEl')]\"))));\r\n                WebElement VehicleModificationYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",VehicleModificationYesEle);\r\n                //VehicleModificationYesEle.sendKeys(Keys.TAB);\r\n\r\n                Thread.sleep(3000);\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                //wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\"))));\r\n                wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\")));\r\n                WebElement VehicleModificationNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",VehicleModificationNoEle);\r\n                //VehicleModificationNoEle.sendKeys(Keys.TAB);\r\n\r\n                Thread.sleep(3000);\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryAG++;\r\n            }\r\n                \r\n            }\r\n                Thread.sleep(2000);\r\n            for(int retryAH=0; retryAH<5; retryAH++){\r\n            try{\r\n            String StateName = addVehicleParams[17].toString();\r\n            System.out.println(StateName);\r\n            String Snowplow = addVehicleParams[18].toString();\r\n            System.out.println(StateName);\r\n            if(StateName.equalsIgnoreCase(\"MI\") || StateName.equalsIgnoreCase(\"TN\")){\r\n                if(Snowplow.equalsIgnoreCase(\"Yes\")){\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_true-inputEl')]\"))));\r\n                    WebElement snowPlowYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_true-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",snowPlowYesEle);\r\n                    Thread.sleep(2000);\r\n                }\r\n                else{\r\n                                   Thread.sleep(2000);\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_false-inputEl')]\"))));\r\n                    WebElement snowPlowNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_false-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",snowPlowNoEle);\r\n                    Thread.sleep(2000);\r\n                }\r\n            }\r\n            else{\r\n                            Thread.sleep(3000);\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The SnowPlow is not applicable for all other States.\";\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryAG++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(3000);\r\n            for(int retryH=0; retryH<5; retryH++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:ExistingDamage-inputEl')]\"))));\r\n            WebElement ExistingDamageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:ExistingDamage-inputEl')]\"));\r\n            WebElement setClick = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_false-inputEl')]\"));          \r\n            js.executeScript(\"arguments[0].click();\",ExistingDamageEle);\r\n            ExistingDamageEle.sendKeys(selectText);\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.DELETE).build().perform();\r\n            Thread.sleep(300);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[14]+\"'\",ExistingDamageEle);\r\n            Thread.sleep(300);\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.ENTER).build().perform();\r\n                     // act.moveToElement(ExistingDamageEle).sendKeys(Keys.TAB).build().perform();\r\n\r\n            setClick.click();\r\n            //act.moveToElement(ExistingDamageEle).sendKeys(Keys.TAB).build().perform();\r\n            \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryH++;\r\n            }\r\n                \r\n            }\r\n        \r\n            for(int retryI=0; retryI<5; retryI++){\r\n            try{\r\n            String assigneedriver = addVehicleParams[15].toString().trim();\r\n            boolean value         = assigneedriver.isEmpty();\r\n            String result         = String.valueOf(value);\r\n            if(result.equalsIgnoreCase(\"false\")){\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AssignedDriver_Acg-inputEl')]\"))));\r\n            WebElement AssignedDriverEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AssignedDriver_Acg-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",AssignedDriverEle);\r\n            AssignedDriverEle.sendKeys(selectText);\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[15]+\"'\",AssignedDriverEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.TAB).build().perform();\r\n            }else{\r\n                System.out.println(\"Assigned Driver Automatically\");\r\n            }break;\r\n            }\r\n            catch(Exception ex){\r\n                //retryI++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryAI=0; retryAI<5; retryAI++){\r\n            try{\r\n           \r\n            String NamedInsured = addVehicleParams[16].toString();\r\n            System.out.println(NamedInsured);\r\n            Thread.sleep(2000);\r\n            if(NamedInsured.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_true-inputEl')]\"))));\r\n                WebElement NamedInsuredYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",NamedInsuredYesEle);\r\n                //Thread.sleep(500);\r\n                //NamedInsuredYesEle.click();\r\n                //NamedInsuredYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n    \r\n            }\r\n            else{\r\n                Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_false-inputEl')]\"))));\r\n                WebElement NamedInsuredNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",NamedInsuredNoEle);\r\n                Thread.sleep(350);\r\n                NamedInsuredNoEle.click();\r\n                //NamedInsuredNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(2000);\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryI++;\r\n            }\r\n                \r\n            }\r\n\r\n            for(int retryJ=0; retryJ<5; retryJ++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"))));\r\n            WebElement VehicleNamedInsuredEle = driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",VehicleNamedInsuredEle);\r\n            //VehicleNamedInsuredEle.click();\r\n            //driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\")).click();\r\n\r\n            VehicleNamedInsuredEle.sendKeys(selectText);\r\n                    Thread.sleep(1000);\r\n                     //VehicleNamedInsuredEle.sendKeys(Keys.DELETE);\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.DELETE).build().perform();\r\n            Thread.sleep(1000);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[15]+\"'\",VehicleNamedInsuredEle);\r\n            Thread.sleep(2000);\r\n                            VehicleNamedInsuredEle.sendKeys(selectText);\r\n                     // driver.findElement(By.xpath(\"//*[contains(@id,'VehicleDetailCardTab-btnInnerEl')]\")).click();\r\n                       Thread.sleep(2000);\r\n                     act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.TAB).build().perform();\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.ENTER).build().perform();\r\n            \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                \r\n            }\r\n                \r\n            }\r\n            \r\n            if(addVehicleParams[1].equals(\"Private Passenger\")){\r\n              addVehicleParams[1]=\"Private  Passenger\";\r\n            }\r\n            for(int retryA=0; retryA<5; retryA++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'TypeDescription2_DV-inputEl')]\"))));\r\n            WebElement vehicleDescEle = driver.findElement(By.xpath(\"//input[contains(@id,'TypeDescription2_DV-inputEl')]\"));       \r\n            js.executeScript(\"arguments[0].click();\",vehicleDescEle);\r\n            vehicleDescEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[1]+\"'\",vehicleDescEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.ENTER).build().perform();\r\n            Thread.sleep(1000);\r\n            //js.executeScript(\"arguments[0].click();\",vehicleDetailsTabEle);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.TAB).build().perform();\r\n            //WebElement VINNoTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"));\r\n            //js.executeScript(\"arguments[0].click()\",VINNoTxtEle);\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryA++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryK=0; retryK<3; retryK++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDV:lookUp')]\"))));\r\n            WebElement vehicleLookupBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDV:lookUp')]\"));\r\n            js.executeScript(\"arguments[0].click();\", vehicleLookupBtnEle);\r\n            Thread.sleep(4000); \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryK++;\r\n            }\r\n                \r\n            }\r\n\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"))));\r\n            WebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\r\n            js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n            Thread.sleep(4000);         \r\n            break;          \r\n            \r\n        }\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Additional Vehicles added\";       \r\n\r\n        }\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'Next') and contains(text(),'Next')]\"))));\r\n            WebElement nextBtnEle = driver.findElement(By.xpath(\"//span[contains(@id,'Next') and contains(text(),'Next')]\"));\r\n            js.executeScript(\"arguments[0].click();\", nextBtnEle);\r\n            Thread.sleep(2000);\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n            actionResult.comments =  e.getMessage();\r\n    }\r\n       \r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddAdditionalVehicles",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1103,
    "Description": "Adding multiple vehicles on the Vehicle screen to bind the policy.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement; \r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class AddAdditionalVehiclesRewrite extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    try{\r\n\r\n        driver.manage().timeouts().implicitlyWait(150, TimeUnit.SECONDS);\r\n        \r\n        WebDriverWait wait = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act = new Actions(driver);\r\n        String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n        String[] VehiclesInfo = inputValue.split(\",\");\r\n        int vehicleCount= VehiclesInfo.length;\r\n        System.out.println(vehicleCount);\r\n        for(int i=0;i<=vehicleCount-1;i++){\r\n        System.out.println(VehiclesInfo[i]);\r\n        String[] addVehicleParams = VehiclesInfo[i].split(\" AND \");\r\n        int paramsCount = addVehicleParams.length;\r\n\r\n        for(int j=0;j<=vehicleCount-1;j++){\r\n             Thread.sleep(3000);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehiclesListDetailPanel_tb:Add')]\"))));\r\n            WebElement createVehicleBtn = driver.findElement(By.xpath(\"//a[contains(@id,'VehiclesListDetailPanel_tb:Add')]\"));\r\n            js.executeScript(\"arguments[0].click()\",createVehicleBtn);\r\n            Thread.sleep(3000);\r\n\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDetailCardTab')]\"))));         \r\n            WebElement vehicleDetailsTabEle = driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDetailCardTab')]\"));\r\n            String getVehicleDetailsTabEle = vehicleDetailsTabEle.getAttribute(\"tabindex\");\r\n            if(getVehicleDetailsTabEle.equals(\"0\")){\r\n                actionResult.status = true;\r\n                    actionResult.comments =  \"User is on 'Vehicle Details Tab' in 'Vehicles Screen'\";\r\n            }\r\n            else{\r\n                           \r\n                actionResult.status = false;\r\n                actionResult.comments =  \" 'Vehicle Details Tab' is not opened\";\r\n            }\r\n                  Thread.sleep(2000);\r\n            \r\n            for(int retry=0; retry<5; retry++){\r\n            try{\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:Type_DV-inputEl')]\"))));\r\n            WebElement vehicleTypeEle = driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:Type_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",vehicleTypeEle);\r\n            vehicleTypeEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[0]+\"'\",vehicleTypeEle);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.ENTER).build().perform();\r\n            Thread.sleep(1000);\r\n            js.executeScript(\"arguments[0].click();\",vehicleDetailsTabEle);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retry++;\r\n            }\r\n                \r\n            }\r\n            \r\n            \r\n\r\n            String vehiclesYearPrior1981 = addVehicleParams[2].toString();\r\n            System.out.println(vehiclesYearPrior1981);\r\n        \r\n           for(int retryAA=0; retryAA<5; retryAA++){\r\n            try{\r\n             wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_true-inputEl')]\"))));\r\n            WebElement vehiclesYearPrior1981YesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_true-inputEl')]\"));\r\n            WebElement vehiclesYearPrior1981NoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_false-inputEl')]\"));\r\n            if(vehiclesYearPrior1981.equalsIgnoreCase(\"Yes\")){\r\n            Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\",vehiclesYearPrior1981YesEle);\r\n                Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \" 'Vehicle's Year Prior to 1981' has been selected as : 'Yes'\";\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\",vehiclesYearPrior1981NoEle);\r\n                Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \" 'Vehicle's Year Prior to 1981' has been selected as : 'No'\";\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryAA++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryB=0; retryB<5; retryB++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:searchBy-inputEl')]\"))));\r\n            WebElement searchByEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:searchBy-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",searchByEle);\r\n            searchByEle.sendKeys(selectText);\r\n            act.moveToElement(searchByEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[3]+\"'\",searchByEle);\r\n            act.moveToElement(searchByEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(searchByEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryB++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryC=0; retryC<5; retryC++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"))));\r\n            WebElement VINNoTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click()\",VINNoTxtEle);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[4]+\"'\",VINNoTxtEle);\r\n            act.moveToElement(VINNoTxtEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryC++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryAC=0; retryAC<5; retryAC++){\r\n            try{\r\n            String AirBag = addVehicleParams[5].toString();\r\n            System.out.println(AirBag);\r\n            Thread.sleep(4000);\r\n\r\n            if(AirBag.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_true-inputEl')]\"))));\r\n                WebElement AirBagYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",AirBagYesEle);\r\n                AirBagYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            else{\r\n                             Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_false-inputEl')]\"))));\r\n                WebElement AirBagNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",AirBagNoEle);\r\n                AirBagNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n                      Thread.sleep(3000);\r\n            String ABS = addVehicleParams[6].toString();\r\n            System.out.println(ABS);\r\n            \r\n                   Thread.sleep(4000);\r\n            if(ABS.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_true-inputEl')]\"))));\r\n                WebElement ABSYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",ABSYesEle);\r\n                ABSYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_false-inputEl')]\"))));\r\n                WebElement ABSNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",ABSNoEle);\r\n                ABSNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryAC++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryD=0; retryD<5; retryD++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AntiTheftDevice-inputEl')]\"))));\r\n            WebElement antiTheftEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AntiTheftDevice-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",antiTheftEle);\r\n            antiTheftEle.sendKeys(selectText);\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[7]+\"'\",antiTheftEle);\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryD++;\r\n            }\r\n                \r\n            }\r\n        \r\n            \r\n            String AAASafetyInsp = addVehicleParams[8].toString();\r\n            \r\n            Thread.sleep(2000);\r\n            for(int retryE=0; retryE<5; retryE++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"))));\r\n            WebElement vehicleUsageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",vehicleUsageEle);\r\n            vehicleUsageEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[9]+\"'\",vehicleUsageEle);\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.TAB).build().perform();\r\n            String vehicleusagevalue = addVehicleParams[9].toString();\r\n                if (vehicleusagevalue.equalsIgnoreCase(\"Business\")) {\r\n                    WebElement useOfVehicle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:TradesmanType-inputEl')]\"))));\r\n                    js.executeScript(\"arguments[0].click();\",useOfVehicle);\r\n                    useOfVehicle.sendKeys(selectText);\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.DELETE).build().perform();\r\n                    js.executeScript(\"arguments[0].value='\"+addVehicleParams[19]+\"'\",useOfVehicle);\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.ENTER).build().perform();\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.TAB).build().perform();   \r\n                }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryE++;\r\n            }\r\n                \r\n            }\r\n        \r\n            for(int retryF=0; retryF<5; retryF++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:annualmiles_DV-inputEl')]\"))));\r\n            WebElement AnnualMileageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:annualmiles_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click()\",AnnualMileageEle);\r\n            Thread.sleep(750);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[10]+\"'\",AnnualMileageEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(AnnualMileageEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryF++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryAF=0; retryAF<5; retryAF++){\r\n            try{\r\n            String PreviouslyTitled = addVehicleParams[11].toString(); \r\n            System.out.println(PreviouslyTitled);\r\n            Thread.sleep(2000);\r\n            if(PreviouslyTitled.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_true-inputEl')]\"))));\r\n                WebElement PreviouslyTitledYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",PreviouslyTitledYesEle);\r\n                //PreviouslyTitledYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(2000);\r\n                //js.executeScript(\"arguments[0].click()\",vehicleDetailsTabEle);\r\n                //Thread.sleep(2000);\r\n            }\r\n            else{\r\n                Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_false-inputEl')]\"))));\r\n                WebElement PreviouslyTitledNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",PreviouslyTitledNoEle);\r\n                Thread.sleep(1000);\r\n                //PreviouslyTitledNoEle.sendKeys(Keys.TAB);\r\n                //js.executeScript(\"arguments[0].click()\",vehicleDetailsTabEle); \r\n                //Thread.sleep(1000);\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryF++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryG=0; retryG<5; retryG++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleOwnershipType-inputEl')]\"))));\r\n            WebElement ownershipEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleOwnershipType-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",ownershipEle);\r\n            ownershipEle.sendKeys(selectText);\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[12]+\"'\",ownershipEle);\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryG++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryAG=0; retryAG<5; retryAG++){\r\n            try{\r\n           \r\n            String VehicleModification = addVehicleParams[13].toString();\r\n            System.out.println(VehicleModification);\r\n            Thread.sleep(3000);\r\n            if(VehicleModification.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_true-inputEl')]\"))));\r\n                WebElement VehicleModificationYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",VehicleModificationYesEle);\r\n                //VehicleModificationYesEle.sendKeys(Keys.TAB);\r\n\r\n                Thread.sleep(3000);\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                //wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\"))));\r\n                wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\")));\r\n                WebElement VehicleModificationNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",VehicleModificationNoEle);\r\n                //VehicleModificationNoEle.sendKeys(Keys.TAB);\r\n\r\n                Thread.sleep(3000);\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryAG++;\r\n            }\r\n                \r\n            }\r\n                Thread.sleep(2000);\r\n            for(int retryAH=0; retryAH<5; retryAH++){\r\n            try{\r\n            String StateName = addVehicleParams[17].toString();\r\n            System.out.println(StateName);\r\n            String Snowplow = addVehicleParams[18].toString();\r\n            System.out.println(StateName);\r\n            if(StateName.equalsIgnoreCase(\"MI\") || StateName.equalsIgnoreCase(\"TN\")){\r\n                if(Snowplow.equalsIgnoreCase(\"Yes\")){\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_true-inputEl')]\"))));\r\n                    WebElement snowPlowYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_true-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",snowPlowYesEle);\r\n                    Thread.sleep(2000);\r\n                }\r\n                else{\r\n                                   Thread.sleep(2000);\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_false-inputEl')]\"))));\r\n                    WebElement snowPlowNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_false-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",snowPlowNoEle);\r\n                    Thread.sleep(2000);\r\n                }\r\n            }\r\n            else{\r\n                            Thread.sleep(3000);\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The SnowPlow is not applicable for all other States.\";\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryAG++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(3000);\r\n            for(int retryH=0; retryH<5; retryH++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:ExistingDamage-inputEl')]\"))));\r\n            WebElement ExistingDamageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:ExistingDamage-inputEl')]\"));\r\n            WebElement setClick = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_false-inputEl')]\"));          \r\n            js.executeScript(\"arguments[0].click();\",ExistingDamageEle);\r\n            ExistingDamageEle.sendKeys(selectText);\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.DELETE).build().perform();\r\n            Thread.sleep(300);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[14]+\"'\",ExistingDamageEle);\r\n            Thread.sleep(300);\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.ENTER).build().perform();\r\n                     // act.moveToElement(ExistingDamageEle).sendKeys(Keys.TAB).build().perform();\r\n\r\n            setClick.click();\r\n            //act.moveToElement(ExistingDamageEle).sendKeys(Keys.TAB).build().perform();\r\n            \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryH++;\r\n            }\r\n                \r\n            }\r\n        \r\n            for(int retryI=0; retryI<5; retryI++){\r\n            try{\r\n            String assigneedriver = addVehicleParams[15].toString().trim();\r\n            boolean value         = assigneedriver.isEmpty();\r\n            String result         = String.valueOf(value);\r\n            if(result.equalsIgnoreCase(\"false\")){\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AssignedDriver_Acg-inputEl')]\"))));\r\n            WebElement AssignedDriverEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AssignedDriver_Acg-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",AssignedDriverEle);\r\n            AssignedDriverEle.sendKeys(selectText);\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[15]+\"'\",AssignedDriverEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.TAB).build().perform();\r\n            }else{\r\n                System.out.println(\"Assigned Driver Automatically\");\r\n            }break;\r\n            }\r\n            catch(Exception ex){\r\n                //retryI++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryAI=0; retryAI<5; retryAI++){\r\n            try{\r\n           \r\n            String NamedInsured = addVehicleParams[16].toString();\r\n            System.out.println(NamedInsured);\r\n            Thread.sleep(2000);\r\n            if(NamedInsured.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_true-inputEl')]\"))));\r\n                WebElement NamedInsuredYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",NamedInsuredYesEle);\r\n                //Thread.sleep(500);\r\n                //NamedInsuredYesEle.click();\r\n                //NamedInsuredYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n    \r\n            }\r\n            else{\r\n                Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_false-inputEl')]\"))));\r\n                WebElement NamedInsuredNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",NamedInsuredNoEle);\r\n                Thread.sleep(350);\r\n                NamedInsuredNoEle.click();\r\n                //NamedInsuredNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(2000);\r\n            }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryI++;\r\n            }\r\n                \r\n            }\r\n\r\n            for(int retryJ=0; retryJ<5; retryJ++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"))));\r\n            WebElement VehicleNamedInsuredEle = driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",VehicleNamedInsuredEle);\r\n            //VehicleNamedInsuredEle.click();\r\n            //driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\")).click();\r\n\r\n            VehicleNamedInsuredEle.sendKeys(selectText);\r\n                    Thread.sleep(1000);\r\n                     //VehicleNamedInsuredEle.sendKeys(Keys.DELETE);\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.DELETE).build().perform();\r\n            Thread.sleep(1000);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[15]+\"'\",VehicleNamedInsuredEle);\r\n            Thread.sleep(2000);\r\n                            VehicleNamedInsuredEle.sendKeys(selectText);\r\n                     // driver.findElement(By.xpath(\"//*[contains(@id,'VehicleDetailCardTab-btnInnerEl')]\")).click();\r\n                       Thread.sleep(2000);\r\n                     act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.TAB).build().perform();\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.ENTER).build().perform();\r\n            \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                \r\n            }\r\n                \r\n            }\r\n            \r\n            if(addVehicleParams[1].equals(\"Private Passenger\")){\r\n              addVehicleParams[1]=\"Private  Passenger\";\r\n            }\r\n            for(int retryA=0; retryA<5; retryA++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'TypeDescription2_DV-inputEl')]\"))));\r\n            WebElement vehicleDescEle = driver.findElement(By.xpath(\"//input[contains(@id,'TypeDescription2_DV-inputEl')]\"));       \r\n            js.executeScript(\"arguments[0].click();\",vehicleDescEle);\r\n            vehicleDescEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[1]+\"'\",vehicleDescEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.ENTER).build().perform();\r\n            Thread.sleep(1000);\r\n            //js.executeScript(\"arguments[0].click();\",vehicleDetailsTabEle);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.TAB).build().perform();\r\n            //WebElement VINNoTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"));\r\n            //js.executeScript(\"arguments[0].click()\",VINNoTxtEle);\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryA++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryK=0; retryK<3; retryK++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDV:lookUp')]\"))));\r\n            WebElement vehicleLookupBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDV:lookUp')]\"));\r\n            js.executeScript(\"arguments[0].click();\", vehicleLookupBtnEle);\r\n            Thread.sleep(4000); \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryK++;\r\n            }\r\n                \r\n            }\r\n\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"))));\r\n            WebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\r\n            js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n            Thread.sleep(4000);         \r\n            break;          \r\n            \r\n        }\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Additional Vehicles added\";       \r\n\r\n        }\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'RewriteWizard:Next')]\"))));\r\n            WebElement nextBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'RewriteWizard:Next')]\"));\r\n            js.executeScript(\"arguments[0].click();\", nextBtnEle);\r\n            Thread.sleep(2000);\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n            actionResult.comments =  e.getMessage();\r\n    }\r\n       \r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddAdditionalVehiclesRewrite",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 248,
    "Description": "Binding the Auto policy with Multiple Vehicles.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement; \r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class AddAdditionalVehicles_Updated extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try{\r\n\r\n        driver.manage().timeouts().implicitlyWait(150, TimeUnit.SECONDS);\r\n        \r\n        WebDriverWait wait = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act = new Actions(driver);\r\n        String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n        String[] VehiclesInfo = inputValue.split(\"@@\");\r\n        int vehicleCount= VehiclesInfo.length;\r\n        System.out.println(vehicleCount);\r\n        for(int i=0;i<=vehicleCount-1;i++){\r\n        System.out.println(VehiclesInfo[i]);\r\n        String[] addVehicleParams = VehiclesInfo[i].split(\" AND \");\r\n        int paramsCount = addVehicleParams.length;\r\n\r\n            \r\n\r\n        for(int j=0;j<=vehicleCount-1;j++){\r\n             Thread.sleep(3000);\r\n\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehiclesListDetailPanel_tb:Add')]\"))));\r\n            WebElement createVehicleBtn = driver.findElement(By.xpath(\"//a[contains(@id,'VehiclesListDetailPanel_tb:Add')]\"));\r\n            js.executeScript(\"arguments[0].click()\",createVehicleBtn);\r\n            Thread.sleep(3000);\r\n\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDetailCardTab')]\"))));         \r\n            WebElement vehicleDetailsTabEle = driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDetailCardTab')]\"));\r\n            String getVehicleDetailsTabEle = vehicleDetailsTabEle.getAttribute(\"tabindex\");\r\n            if(getVehicleDetailsTabEle.equals(\"0\")){\r\n                actionResult.status = true;\r\n                    actionResult.comments =  \"User is on 'Vehicle Details Tab' in 'Vehicles Screen'\";\r\n            }\r\n            else{\r\n                           \r\n                    actionResult.status = false;\r\n                actionResult.comments =  \" 'Vehicle Details Tab' is not opened\";\r\n            }\r\n                  Thread.sleep(2000);\r\n            \r\n            for(int retry=0; retry<5; retry++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:Type_DV-inputEl')]\"))));\r\n            WebElement vehicleTypeEle = driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:Type_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",vehicleTypeEle);\r\n            vehicleTypeEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[0]+\"'\",vehicleTypeEle);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.ENTER).build().perform();\r\n            Thread.sleep(1000);\r\n            js.executeScript(\"arguments[0].click();\",vehicleDetailsTabEle);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retry++;\r\n            }\r\n                \r\n            }\r\n            \r\n            \r\n\r\n            String vehiclesYearPrior1981 = addVehicleParams[2].toString();\r\n            System.out.println(vehiclesYearPrior1981);\r\n        \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_true-inputEl')]\"))));\r\n            WebElement vehiclesYearPrior1981YesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_true-inputEl')]\"));\r\n            WebElement vehiclesYearPrior1981NoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_false-inputEl')]\"));\r\n            if(vehiclesYearPrior1981.equalsIgnoreCase(\"Yes\")){\r\n            Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\",vehiclesYearPrior1981YesEle);\r\n                Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \" 'Vehicle's Year Prior to 1981' has been selected as : 'Yes'\";\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\",vehiclesYearPrior1981NoEle);\r\n                Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \" 'Vehicle's Year Prior to 1981' has been selected as : 'No'\";\r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryB=0; retryB<5; retryB++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:searchBy-inputEl')]\"))));\r\n            WebElement searchByEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:searchBy-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",searchByEle);\r\n            searchByEle.sendKeys(selectText);\r\n            act.moveToElement(searchByEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[3]+\"'\",searchByEle);\r\n            act.moveToElement(searchByEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(searchByEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryB++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryC=0; retryC<5; retryC++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"))));\r\n            WebElement VINNoTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click()\",VINNoTxtEle);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[4]+\"'\",VINNoTxtEle);\r\n            act.moveToElement(VINNoTxtEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryC++;\r\n            }\r\n                \r\n            }\r\n            \r\n            String AirBag = addVehicleParams[5].toString();\r\n            System.out.println(AirBag);\r\n            Thread.sleep(4000);\r\n\r\n            if(AirBag.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_true-inputEl')]\"))));\r\n                WebElement AirBagYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",AirBagYesEle);\r\n                AirBagYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            else{\r\n                             Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_false-inputEl')]\"))));\r\n                WebElement AirBagNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",AirBagNoEle);\r\n                AirBagNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n                      Thread.sleep(3000);\r\n            String ABS = addVehicleParams[6].toString();\r\n            System.out.println(ABS);\r\n            \r\n                   Thread.sleep(4000);\r\n            if(ABS.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_true-inputEl')]\"))));\r\n                WebElement ABSYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",ABSYesEle);\r\n                ABSYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_false-inputEl')]\"))));\r\n                WebElement ABSNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",ABSNoEle);\r\n                ABSNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            \r\n            for(int retryD=0; retryD<5; retryD++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AntiTheftDevice-inputEl')]\"))));\r\n            WebElement antiTheftEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AntiTheftDevice-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",antiTheftEle);\r\n            antiTheftEle.sendKeys(selectText);\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[7]+\"'\",antiTheftEle);\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryD++;\r\n            }\r\n                \r\n            }\r\n        \r\n            \r\n            String AAASafetyInsp = addVehicleParams[8].toString();\r\n            \r\n            Thread.sleep(2000);\r\n            for(int retryE=0; retryE<5; retryE++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"))));\r\n            WebElement vehicleUsageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",vehicleUsageEle);\r\n            vehicleUsageEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[9]+\"'\",vehicleUsageEle);\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryE++;\r\n            }\r\n                \r\n            }\r\n        \r\n            for(int retryF=0; retryF<5; retryF++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:annualmiles_DV-inputEl')]\"))));\r\n            WebElement AnnualMileageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:annualmiles_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click()\",AnnualMileageEle);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[10]+\"'\",AnnualMileageEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(AnnualMileageEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryF++;\r\n            }\r\n                \r\n            }\r\n            \r\n            String PreviouslyTitled = addVehicleParams[11].toString(); \r\n            System.out.println(PreviouslyTitled);\r\n            Thread.sleep(2000);\r\n            if(PreviouslyTitled.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_true-inputEl')]\"))));\r\n                WebElement PreviouslyTitledYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",PreviouslyTitledYesEle);\r\n                //PreviouslyTitledYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(2000);\r\n                //js.executeScript(\"arguments[0].click()\",vehicleDetailsTabEle);\r\n                //Thread.sleep(2000);\r\n            }\r\n            else{\r\n                Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_false-inputEl')]\"))));\r\n                WebElement PreviouslyTitledNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",PreviouslyTitledNoEle);\r\n                Thread.sleep(1000);\r\n                //PreviouslyTitledNoEle.sendKeys(Keys.TAB);\r\n                //js.executeScript(\"arguments[0].click()\",vehicleDetailsTabEle); \r\n                //Thread.sleep(1000);\r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryG=0; retryG<5; retryG++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleOwnershipType-inputEl')]\"))));\r\n            WebElement ownershipEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleOwnershipType-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",ownershipEle);\r\n            ownershipEle.sendKeys(selectText);\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[12]+\"'\",ownershipEle);\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryG++;\r\n            }\r\n                \r\n            }\r\n        \r\n            \r\n            String VehicleModification = addVehicleParams[13].toString();\r\n            System.out.println(VehicleModification);\r\n            Thread.sleep(3000);\r\n            if(VehicleModification.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_true-inputEl')]\"))));\r\n                WebElement VehicleModificationYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",VehicleModificationYesEle);\r\n                //VehicleModificationYesEle.sendKeys(Keys.TAB);\r\n\r\n                Thread.sleep(3000);\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                //wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\"))));\r\n                wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\")));\r\n                WebElement VehicleModificationNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",VehicleModificationNoEle);\r\n                //VehicleModificationNoEle.sendKeys(Keys.TAB);\r\n\r\n                Thread.sleep(3000);\r\n            }\r\n                Thread.sleep(2000);\r\n            String StateName = addVehicleParams[17].toString();\r\n            System.out.println(StateName);\r\n            String Snowplow = addVehicleParams[18].toString();\r\n            System.out.println(StateName);\r\n            if(StateName.equalsIgnoreCase(\"MI\") || StateName.equalsIgnoreCase(\"TN\")){\r\n                if(Snowplow.equalsIgnoreCase(\"Yes\")){\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_true-inputEl')]\"))));\r\n                    WebElement snowPlowYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_true-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",snowPlowYesEle);\r\n                    Thread.sleep(2000);\r\n                }\r\n                else{\r\n                                   Thread.sleep(2000);\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_false-inputEl')]\"))));\r\n                    WebElement snowPlowNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_false-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",snowPlowNoEle);\r\n                    Thread.sleep(2000);\r\n                }\r\n            }\r\n            else{\r\n                            Thread.sleep(3000);\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The SnowPlow is not applicable for all other States.\";\r\n            }\r\n            Thread.sleep(3000);\r\n            for(int retryH=0; retryH<5; retryH++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:ExistingDamage-inputEl')]\"))));\r\n            WebElement ExistingDamageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:ExistingDamage-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",ExistingDamageEle);\r\n            ExistingDamageEle.sendKeys(selectText);\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[14]+\"'\",ExistingDamageEle);\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryH++;\r\n            }\r\n                \r\n            }\r\n        \r\n            for(int retryI=0; retryI<5; retryI++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AssignedDriver_Acg-inputEl')]\"))));\r\n            WebElement AssignedDriverEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AssignedDriver_Acg-inputEl')]\"));\r\n\r\n            //js.executeScript(\"document.getElementById(\\\"SubmissionWizard:LOBWizardStepGroup:LineWizardStepSet:PAVehiclesScreen:PAVehiclesPanelSet:VehiclesListDetailPanel:VehiclesDetailsCV:PersonalAuto_VehicleDV:AssignedDriver_Acg-inputEl\\\").click()\");           \r\n            \r\n            js.executeScript(\"arguments[0].click();\",AssignedDriverEle);\r\n            AssignedDriverEle.sendKeys(selectText);\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[15]+\"'\",AssignedDriverEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryI++;\r\n            }\r\n                \r\n            }\r\n        \r\n            \r\n            String NamedInsured = addVehicleParams[16].toString();\r\n            System.out.println(NamedInsured);\r\n            Thread.sleep(2000);\r\n        \r\n            \r\n\r\n            if(NamedInsured.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_true-inputEl')]\"))));\r\n                WebElement NamedInsuredYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",NamedInsuredYesEle);\r\n                //Thread.sleep(500);\r\n                //NamedInsuredYesEle.click();\r\n                //NamedInsuredYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n    \r\n            }\r\n            else{\r\n                Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_false-inputEl')]\"))));\r\n                WebElement NamedInsuredNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",NamedInsuredNoEle);\r\n                Thread.sleep(350);\r\n                NamedInsuredNoEle.click();\r\n                //NamedInsuredNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(2000);\r\n            }\r\n        \r\n\r\n            for(int retryJ=0; retryJ<5; retryJ++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"))));\r\n            WebElement VehicleNamedInsuredEle = driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"));\r\n            //js.executeScript(\"arguments[0].click();\",VehicleNamedInsuredEle);\r\n            //VehicleNamedInsuredEle.click();\r\n            driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\")).click();\r\n\r\n            VehicleNamedInsuredEle.sendKeys(selectText);\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[15]+\"'\",VehicleNamedInsuredEle);\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                \r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryA=0; retryA<5; retryA++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'TypeDescription2_DV-inputEl')]\"))));\r\n            WebElement vehicleDescEle = driver.findElement(By.xpath(\"//input[contains(@id,'TypeDescription2_DV-inputEl')]\"));       \r\n            js.executeScript(\"arguments[0].click();\",vehicleDescEle);\r\n            vehicleDescEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[1]+\"'\",vehicleDescEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.ENTER).build().perform();\r\n            Thread.sleep(1000);\r\n            //js.executeScript(\"arguments[0].click();\",vehicleDetailsTabEle);\r\n            //act.moveToElement(vehicleDescEle).sendKeys(Keys.TAB).build().perform();\r\n            //WebElement VINNoTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"));\r\n            //js.executeScript(\"arguments[0].click()\",VINNoTxtEle);\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryA++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryK=0; retryK<3; retryK++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDV:lookUp')]\"))));\r\n            WebElement vehicleLookupBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDV:lookUp')]\"));\r\n            js.executeScript(\"arguments[0].click();\", vehicleLookupBtnEle);\r\n            Thread.sleep(4000); \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryK++;\r\n            }\r\n                \r\n            }\r\n    \r\n\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"))));\r\n            WebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\r\n            js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n            Thread.sleep(4000);         \r\n            break;\r\n\r\n            \r\n            \r\n        }\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Additional Vehicles added\";\r\n        \r\n\r\n        }\r\n            \r\n                     wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(actionResult.element(82))));\r\n            WebElement nextBtnEle = driver.findElement(actionResult.element(82));\r\n            js.executeScript(\"arguments[0].click();\", nextBtnEle);\r\n            Thread.sleep(2000);\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n            actionResult.comments =  e.getMessage();\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddAdditionalVehicles_Updated",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 254,
    "Description": "Adding multiple vehicles on the Vehicle screen to bind the policy.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException; \r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement; \r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class AddAdditionalVehicles_tnc extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try{\r\n\r\n        driver.manage().timeouts().implicitlyWait(150, TimeUnit.SECONDS);\r\n        \r\n        WebDriverWait wait = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act = new Actions(driver);\r\n        String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n        String[] VehiclesInfo = inputValue.split(\"@@\");\r\n        int vehicleCount= VehiclesInfo.length;\r\n        System.out.println(vehicleCount);\r\n        for(int i=0;i<=vehicleCount-1;i++){\r\n        System.out.println(VehiclesInfo[i]);\r\n        String[] addVehicleParams = VehiclesInfo[i].split(\" AND \");\r\n        int paramsCount = addVehicleParams.length;\r\n\r\n            \r\n\r\n        for(int j=0;j<=vehicleCount-1;j++){\r\n             Thread.sleep(3000);\r\n\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehiclesListDetailPanel_tb:Add')]\"))));\r\n            WebElement createVehicleBtn = driver.findElement(By.xpath(\"//a[contains(@id,'VehiclesListDetailPanel_tb:Add')]\"));\r\n            js.executeScript(\"arguments[0].click()\",createVehicleBtn);\r\n            Thread.sleep(3000);\r\n\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDetailCardTab')]\"))));         \r\n            WebElement vehicleDetailsTabEle = driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDetailCardTab')]\"));\r\n            String getVehicleDetailsTabEle = vehicleDetailsTabEle.getAttribute(\"tabindex\");\r\n            if(getVehicleDetailsTabEle.equals(\"0\")){\r\n                actionResult.status = true;\r\n                    actionResult.comments =  \"User is on 'Vehicle Details Tab' in 'Vehicles Screen'\";\r\n            }\r\n            else{\r\n                           \r\n                actionResult.status = false;\r\n                actionResult.comments =  \" 'Vehicle Details Tab' is not opened\";\r\n            }\r\n                  Thread.sleep(2000);\r\n            \r\n            for(int retry=0; retry<5; retry++){\r\n            try{\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:Type_DV-inputEl')]\"))));\r\n            WebElement vehicleTypeEle = driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:Type_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",vehicleTypeEle);\r\n            vehicleTypeEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[0]+\"'\",vehicleTypeEle);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.ENTER).build().perform();\r\n            Thread.sleep(1000);\r\n            js.executeScript(\"arguments[0].click();\",vehicleDetailsTabEle);\r\n            act.moveToElement(vehicleTypeEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retry++;\r\n            }\r\n                \r\n            }\r\n            \r\n            \r\n\r\n            String vehiclesYearPrior1981 = addVehicleParams[2].toString();\r\n            System.out.println(vehiclesYearPrior1981);\r\n        \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_true-inputEl')]\"))));\r\n            WebElement vehiclesYearPrior1981YesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_true-inputEl')]\"));\r\n            WebElement vehiclesYearPrior1981NoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_false-inputEl')]\"));\r\n            if(vehiclesYearPrior1981.equalsIgnoreCase(\"Yes\")){\r\n            Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\",vehiclesYearPrior1981YesEle);\r\n                Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \" 'Vehicle's Year Prior to 1981' has been selected as : 'Yes'\";\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                js.executeScript(\"arguments[0].click();\",vehiclesYearPrior1981NoEle);\r\n                Thread.sleep(2000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \" 'Vehicle's Year Prior to 1981' has been selected as : 'No'\";\r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryB=0; retryB<5; retryB++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:searchBy-inputEl')]\"))));\r\n            WebElement searchByEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:searchBy-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",searchByEle);\r\n            searchByEle.sendKeys(selectText);\r\n            act.moveToElement(searchByEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[3]+\"'\",searchByEle);\r\n            act.moveToElement(searchByEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(searchByEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryB++;\r\n            }\r\n                \r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryC=0; retryC<5; retryC++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"))));\r\n            WebElement VINNoTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click()\",VINNoTxtEle);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[4]+\"'\",VINNoTxtEle);\r\n            act.moveToElement(VINNoTxtEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryC++;\r\n            }\r\n                \r\n            }\r\n            \r\n            String AirBag = addVehicleParams[5].toString();\r\n            System.out.println(AirBag);\r\n            Thread.sleep(4000);\r\n\r\n            if(AirBag.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_true-inputEl')]\"))));\r\n                WebElement AirBagYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",AirBagYesEle);\r\n                AirBagYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            else{\r\n                             Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_false-inputEl')]\"))));\r\n                WebElement AirBagNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AirBagType_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",AirBagNoEle);\r\n                AirBagNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n                      Thread.sleep(3000);\r\n            String ABS = addVehicleParams[6].toString();\r\n            System.out.println(ABS);\r\n            \r\n                   Thread.sleep(4000);\r\n            if(ABS.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_true-inputEl')]\"))));\r\n                WebElement ABSYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",ABSYesEle);\r\n                ABSYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_false-inputEl')]\"))));\r\n                WebElement ABSNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AbsType_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",ABSNoEle);\r\n                ABSNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n            }\r\n            \r\n            for(int retryD=0; retryD<5; retryD++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AntiTheftDevice-inputEl')]\"))));\r\n            WebElement antiTheftEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AntiTheftDevice-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",antiTheftEle);\r\n            antiTheftEle.sendKeys(selectText);\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[7]+\"'\",antiTheftEle);\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(antiTheftEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryD++;\r\n            }\r\n                \r\n            }\r\n        \r\n            \r\n            String AAASafetyInsp = addVehicleParams[8].toString();\r\n            \r\n            Thread.sleep(2000);\r\n            for(int retryE=0; retryE<5; retryE++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"))));\r\n            WebElement vehicleUsageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",vehicleUsageEle);\r\n            vehicleUsageEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[9]+\"'\",vehicleUsageEle);\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(vehicleUsageEle).sendKeys(Keys.TAB).build().perform();\r\n            String vehicleusagevalue = addVehicleParams[9].toString();\r\n                if (vehicleusagevalue.equalsIgnoreCase(\"Business\")) {\r\n                    WebElement useOfVehicle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'PersonalAuto_VehicleDV:TradesmanType-inputEl')]\"))));\r\n                    js.executeScript(\"arguments[0].click();\",useOfVehicle);\r\n                    useOfVehicle.sendKeys(selectText);\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.DELETE).build().perform();\r\n                    js.executeScript(\"arguments[0].value='\"+addVehicleParams[19]+\"'\",useOfVehicle);\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.ENTER).build().perform();\r\n                    act.moveToElement(useOfVehicle).sendKeys(Keys.TAB).build().perform();   \r\n                }\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryE++;\r\n            }\r\n                \r\n            }\r\n        \r\n            for(int retryF=0; retryF<5; retryF++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:annualmiles_DV-inputEl')]\"))));\r\n            WebElement AnnualMileageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:annualmiles_DV-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click()\",AnnualMileageEle);\r\n            Thread.sleep(750);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[10]+\"'\",AnnualMileageEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(AnnualMileageEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryF++;\r\n            }\r\n                \r\n            }\r\n            \r\n            String PreviouslyTitled = addVehicleParams[11].toString(); \r\n            System.out.println(PreviouslyTitled);\r\n            Thread.sleep(2000);\r\n            if(PreviouslyTitled.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_true-inputEl')]\"))));\r\n                WebElement PreviouslyTitledYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",PreviouslyTitledYesEle);\r\n                //PreviouslyTitledYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(2000);\r\n                //js.executeScript(\"arguments[0].click()\",vehicleDetailsTabEle);\r\n                //Thread.sleep(2000);\r\n            }\r\n            else{\r\n                Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_false-inputEl')]\"))));\r\n                WebElement PreviouslyTitledNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsPreviouslyTitled_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",PreviouslyTitledNoEle);\r\n                Thread.sleep(1000);\r\n                //PreviouslyTitledNoEle.sendKeys(Keys.TAB);\r\n                //js.executeScript(\"arguments[0].click()\",vehicleDetailsTabEle); \r\n                //Thread.sleep(1000);\r\n            }\r\n            Thread.sleep(2000);\r\n            for(int retryG=0; retryG<5; retryG++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleOwnershipType-inputEl')]\"))));\r\n            WebElement ownershipEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleOwnershipType-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",ownershipEle);\r\n            ownershipEle.sendKeys(selectText);\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[12]+\"'\",ownershipEle);\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(ownershipEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryG++;\r\n            }\r\n                \r\n            }\r\n        \r\n            \r\n            String VehicleModification = addVehicleParams[13].toString();\r\n            System.out.println(VehicleModification);\r\n            Thread.sleep(3000);\r\n            if(VehicleModification.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_true-inputEl')]\"))));\r\n                WebElement VehicleModificationYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",VehicleModificationYesEle);\r\n                //VehicleModificationYesEle.sendKeys(Keys.TAB);\r\n\r\n                Thread.sleep(3000);\r\n            }\r\n            else{\r\n                           Thread.sleep(2000);\r\n                //wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\"))));\r\n                wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\")));\r\n                WebElement VehicleModificationNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'HasVehicleSubstantialMod_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",VehicleModificationNoEle);\r\n                //VehicleModificationNoEle.sendKeys(Keys.TAB);\r\n\r\n                Thread.sleep(3000);\r\n            }\r\n                Thread.sleep(2000);\r\n            String StateName = addVehicleParams[17].toString();\r\n            System.out.println(StateName);\r\n            String Snowplow = addVehicleParams[18].toString();\r\n            System.out.println(StateName);\r\n            if(StateName.equalsIgnoreCase(\"MI\") || StateName.equalsIgnoreCase(\"TN\")){\r\n                if(Snowplow.equalsIgnoreCase(\"Yes\")){\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_true-inputEl')]\"))));\r\n                    WebElement snowPlowYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_true-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",snowPlowYesEle);\r\n                    Thread.sleep(2000);\r\n                }\r\n                else{\r\n                                   Thread.sleep(2000);\r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_false-inputEl')]\"))));\r\n                    WebElement snowPlowNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsSnowAttachedVehicle_false-inputEl')]\"));\r\n                    js.executeScript(\"arguments[0].click();\",snowPlowNoEle);\r\n                    Thread.sleep(2000);\r\n                }\r\n            }\r\n            else{\r\n                            Thread.sleep(3000);\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The SnowPlow is not applicable for all other States.\";\r\n            }\r\n            Thread.sleep(3000);\r\n            for(int retryH=0; retryH<5; retryH++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:ExistingDamage-inputEl')]\"))));\r\n            WebElement ExistingDamageEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:ExistingDamage-inputEl')]\"));\r\n            WebElement setClick = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleYearPrior_false-inputEl')]\"));          \r\n            js.executeScript(\"arguments[0].click();\",ExistingDamageEle);\r\n            ExistingDamageEle.sendKeys(selectText);\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.DELETE).build().perform();\r\n            Thread.sleep(300);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[14]+\"'\",ExistingDamageEle);\r\n            Thread.sleep(300);\r\n            act.moveToElement(ExistingDamageEle).sendKeys(Keys.ENTER).build().perform();\r\n                     // act.moveToElement(ExistingDamageEle).sendKeys(Keys.TAB).build().perform();\r\n\r\n            setClick.click();\r\n            //act.moveToElement(ExistingDamageEle).sendKeys(Keys.TAB).build().perform();\r\n            \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryH++;\r\n            }\r\n                \r\n            }\r\n        \r\n            for(int retryI=0; retryI<5; retryI++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AssignedDriver_Acg-inputEl')]\"))));\r\n            WebElement AssignedDriverEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:AssignedDriver_Acg-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",AssignedDriverEle);\r\n            AssignedDriverEle.sendKeys(selectText);\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[15]+\"'\",AssignedDriverEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.ENTER).build().perform();\r\n            act.moveToElement(AssignedDriverEle).sendKeys(Keys.TAB).build().perform();\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryI++;\r\n            }\r\n                \r\n            }\r\n        \r\n            \r\n            String NamedInsured = addVehicleParams[16].toString();\r\n            System.out.println(NamedInsured);\r\n            Thread.sleep(2000);\r\n        \r\n            \r\n\r\n            if(NamedInsured.equalsIgnoreCase(\"Yes\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_true-inputEl')]\"))));\r\n                WebElement NamedInsuredYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_true-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",NamedInsuredYesEle);\r\n                //Thread.sleep(500);\r\n                //NamedInsuredYesEle.click();\r\n                //NamedInsuredYesEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(1000);\r\n    \r\n            }\r\n            else{\r\n                Thread.sleep(2000);\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_false-inputEl')]\"))));\r\n                WebElement NamedInsuredNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_false-inputEl')]\"));\r\n                js.executeScript(\"arguments[0].click();\",NamedInsuredNoEle);\r\n                Thread.sleep(350);\r\n                NamedInsuredNoEle.click();\r\n                //NamedInsuredNoEle.sendKeys(Keys.TAB);\r\n                Thread.sleep(2000);\r\n            }\r\n        \r\n\r\n            for(int retryJ=0; retryJ<5; retryJ++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"))));\r\n            WebElement VehicleNamedInsuredEle = driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",VehicleNamedInsuredEle);\r\n            //VehicleNamedInsuredEle.click();\r\n            //driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\")).click();\r\n\r\n            VehicleNamedInsuredEle.sendKeys(selectText);\r\n                    Thread.sleep(1000);\r\n                     //VehicleNamedInsuredEle.sendKeys(Keys.DELETE);\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.DELETE).build().perform();\r\n            Thread.sleep(1000);\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[15]+\"'\",VehicleNamedInsuredEle);\r\n            Thread.sleep(2000);\r\n                            VehicleNamedInsuredEle.sendKeys(selectText);\r\n                            \r\n                     // driver.findElement(By.xpath(\"//*[contains(@id,'VehicleDetailCardTab-btnInnerEl')]\")).click();\r\n                       Thread.sleep(2000);\r\n                     act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.TAB).build().perform();\r\n            act.moveToElement(VehicleNamedInsuredEle).sendKeys(Keys.ENTER).build().perform();\r\n            \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                \r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryA=0; retryA<5; retryA++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'TypeDescription2_DV-inputEl')]\"))));\r\n            WebElement vehicleDescEle = driver.findElement(By.xpath(\"//input[contains(@id,'TypeDescription2_DV-inputEl')]\"));       \r\n            js.executeScript(\"arguments[0].click();\",vehicleDescEle);\r\n            vehicleDescEle.sendKeys(selectText);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.DELETE).build().perform();\r\n            js.executeScript(\"arguments[0].value='\"+addVehicleParams[1]+\"'\",vehicleDescEle);\r\n            Thread.sleep(1000);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.ENTER).build().perform();\r\n            Thread.sleep(1000);\r\n            //js.executeScript(\"arguments[0].click();\",vehicleDetailsTabEle);\r\n            act.moveToElement(vehicleDescEle).sendKeys(Keys.TAB).build().perform();\r\n            //WebElement VINNoTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VinYMM:Vin_DV-inputEl')]\"));\r\n            //js.executeScript(\"arguments[0].click()\",VINNoTxtEle);\r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryA++;\r\n            }\r\n                \r\n            }\r\n            \r\n            for(int retryK=0; retryK<3; retryK++){\r\n            try{\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDV:lookUp')]\"))));\r\n            WebElement vehicleLookupBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'VehicleDV:lookUp')]\"));\r\n            js.executeScript(\"arguments[0].click();\", vehicleLookupBtnEle);\r\n            Thread.sleep(4000); \r\n            break;\r\n            }\r\n        \r\n            catch(Exception ex){\r\n                //retryK++;\r\n            }\r\n                \r\n            }\r\n\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"))));\r\n            WebElement saveAndDraftBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'Draft')]\"));\r\n            js.executeScript(\"arguments[0].click();\", saveAndDraftBtnEle);\r\n            Thread.sleep(4000);         \r\n            break;          \r\n            \r\n        }\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"Additional Vehicles added\";       \r\n\r\n        }\r\n            \r\n        /*wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(actionResult.element(82))));\r\n            WebElement nextBtnEle = driver.findElement(actionResult.element(82));\r\n            js.executeScript(\"arguments[0].click();\", nextBtnEle);\r\n            Thread.sleep(2000);*/\r\n        \r\n\r\n    }\r\n    catch(Exception e){\r\n        actionResult.status = false;\r\n            actionResult.comments =  e.getMessage();\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddAdditionalVehicles_tnc",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 253,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.temporal.ChronoUnit;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.Locale;\r\nimport junit.framework.Assert;\r\nimport java.lang.reflect.InvocationTargetException;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Vehicle_Usage_Screenshot extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    try \r\n    {   \r\n            \r\n        WebDriverWait wait = new WebDriverWait(driver,30);\r\n        JavascriptExecutor js=(JavascriptExecutor) driver;\r\n\r\n        WebElement scroll = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:VehicleUsage-inputEl')]\"));\r\n        \r\n        js.executeScript(\"arguments[0].scrollIntoView(true);\", scroll);\r\n        js.executeScript(\"arguments[0].style.border='2px solid red'\", scroll);\r\n\r\n\r\n        Thread.sleep(1000);\r\n\r\n\r\n              actionResult.comments = \"Navigated to Vehicle Usage\";\r\n        actionResult.status = true;\r\n                            \r\n    }       \r\n        \r\n    catch(Exception e) \r\n    {\r\n        actionResult.comments =e.getMessage();\r\n        actionResult.status = false;\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n\r\n\r\n\r\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Vehicle_Usage_Screenshot",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1075,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 15488,
        "StepNumber": 1,
        "Description": "Clear Warning",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(text(), 'Clear')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15489,
        "StepNumber": 2,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15490,
        "StepNumber": 3,
        "Description": "Navigate to AAA Drive",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(text(), 'AAADrive')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15491,
        "StepNumber": 4,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15486,
        "StepNumber": 5,
        "Description": "Click Order Reports",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(text(), 'Order Reports')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15487,
        "StepNumber": 6,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15492,
        "StepNumber": 7,
        "Description": "ClickOnQuoteButton",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 914,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15493,
        "StepNumber": 8,
        "Description": "AjaxWait_Copy",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 925,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "AAADrive",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 914,
    "Description": "This custom action clicks on the quote button.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class QuoteButton extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n           \r\n           try \r\n           {   \r\n               \r\n           WebElement quoteButtonEle;\r\n           \r\n           driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\r\n           WebDriverWait wait = new WebDriverWait(driver,30);\r\n           Thread.sleep(2000);\r\n           quoteButtonEle = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//span[contains(@id,'QuoteOrReview-btnInnerEl')]\")));\r\n\r\n           JavascriptExecutor js = (JavascriptExecutor)driver;\r\n           js.executeScript(\"arguments[0].style.border='2px solid red'\", quoteButtonEle);\r\n           js.executeScript(\"arguments[0].click();\",quoteButtonEle);\r\n           \r\n           actionResult.status = true;\r\n            actionResult.comments =  \"Clicked On QUOTE button\";\r\n           //break;    \r\n           \r\n           }\r\n           catch(Exception e) {\r\n           actionResult.comments =\" Expection Type : \" + e.getMessage();\r\n           actionResult.status = false;\r\n           }      \r\n       \r\n       \r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnQuoteButton",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1102,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 15780,
        "StepNumber": 1,
        "Description": "SetMedicalLimit",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 357,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15790,
        "StepNumber": 2,
        "Description": "SetMedLim",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 2364,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15791,
        "StepNumber": 3,
        "Description": "Sel_Health",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 2365,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15792,
        "StepNumber": 4,
        "Description": "Select_HealthType",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 2366,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15781,
        "StepNumber": 5,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15782,
        "StepNumber": 6,
        "Description": "AjaxWait_Copy",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 925,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15783,
        "StepNumber": 7,
        "Description": "Liability_BodilyInjuryLimit",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 371,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15784,
        "StepNumber": 8,
        "Description": "PropertyDamageLiabilityLimit",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 372,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15793,
        "StepNumber": 9,
        "Description": "UninsuredMotor",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 2367,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15794,
        "StepNumber": 10,
        "Description": "UniMotorist",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 2368,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15785,
        "StepNumber": 11,
        "Description": "ComprehensiveDeductibleLimit",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 2363,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15786,
        "StepNumber": 12,
        "Description": "CollisionLimit",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 380,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15787,
        "StepNumber": 13,
        "Description": "CarRental",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 381,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15788,
        "StepNumber": 14,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15789,
        "StepNumber": 15,
        "Description": "AjaxWait_Copy",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 925,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "TestData_Coverage",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 357,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class SetMedicalLimit extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ntry{\n\n              WebDriverWait wait=new WebDriverWait(driver,10);\n              WebElement medicalLimitEle= wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'MedicalTermInput-inputEl')]\"))));\n\t\t//WebElement medicalLimitEle=driver.findElement(By.xpath(\"//input[contains(@id,'MedicalTermInput-inputEl')]\"));\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tmedicalLimitEle.sendKeys(s);\n\t\tmedicalLimitEle.sendKeys(Keys.DELETE);\n\n\t\tActions act = new Actions(driver);\n\t\tact.sendKeys(medicalLimitEle,inputValue).build().perform();\n\t\tmedicalLimitEle.sendKeys(Keys.ENTER);\n\t\tThread.sleep(1000);\n\t\tdriver.findElement(By.xpath(\"//span[contains(@id,'Next') and contains(text(),'Next')]\")).click();\n\n\n      \t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\"; \n\n\n\t}\n\tcatch(Exception e){\n\n\t\tactionResult.status = false;\n              actionResult.comments =  e.getMessage();\n\t}\n\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SetMedicalLimit",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 2364,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SetMedLim extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\ntry{\r\n\r\n              WebDriverWait wait=new WebDriverWait(driver,10);\r\n              WebElement medicalLimitEle= wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'MedicalTermInput-inputEl')]\"))));\r\n        //WebElement medicalLimitEle=driver.findElement(By.xpath(\"//input[contains(@id,'MedicalTermInput-inputEl')]\"));\r\n        String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        medicalLimitEle.sendKeys(s);\r\n        medicalLimitEle.sendKeys(Keys.DELETE);\r\n\r\n        Actions act = new Actions(driver);\r\n        act.sendKeys(medicalLimitEle,inputValue).build().perform();\r\n        medicalLimitEle.sendKeys(Keys.ENTER);\r\n        Thread.sleep(1000);\r\n        //driver.findElement(By.xpath(\"//span[contains(@id,'Next') and contains(text(),'Next')]\")).click();\r\n\r\n\r\n            actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n\r\n\r\n    }\r\n    catch(Exception e){\r\n\r\n        actionResult.status = false;\r\n              actionResult.comments =  e.getMessage();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SetMedLim",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 2365,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Sel_Health extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int retry=0; retry<5; retry++)\r\n      {\r\n        try\r\n        {\r\n        WebDriverWait wait = new WebDriverWait(driver,30); \r\n        JavascriptExecutor js = (JavascriptExecutor)driver;        \r\n        //Thread.sleep(400);\r\n        wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//div[contains(text(), '<none>')]\")));\r\n        WebElement SelectOption = driver.findElement(By.xpath(\"//div[contains(text(), '<none>')]\"));\r\n        js.executeScript(\"arguments[0].doubleclick();\",SelectOption);\r\n        //SelectOption.click();\r\n\r\n        WebElement typeinput=driver.findElement(By.xpath(\"//li[@role='option' and text()='\"+inputValue+\"']\"));\r\n        typeinput.click();\r\n        Thread.sleep(2000);\r\n\r\n        /*String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        interestType.sendKeys(s);\r\n        interestType.sendKeys(Keys.DELETE);\r\n        interestType.sendKeys(inputValue);\r\n        Thread.sleep(500);\r\n        interestType.sendKeys(Keys.ENTER);\r\n        interestType.sendKeys(Keys.TAB);*/\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\";  \r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" + retry + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n      }\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Sel_Health",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 2366,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Select_HealthType extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n        \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n    try{\r\n        WebDriverWait wait = new WebDriverWait(driver,60);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(text(), '<none>')]\"))));\r\n        \r\n        WebElement selectHealth = driver.findElement(By.xpath(\"//div[contains(text(), '<none>')]\"));\r\n    \r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        js.executeScript(\"arguments[0].scrollIntoView();\", selectHealth);\r\n        js.executeScript(\"arguments[0].click();\",selectHealth);\r\n        Thread.sleep(1000);\r\n        //WebElement paymentTypeValueEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//li[@role='option' and contains(text(),'\"+inputValue+\"')]\"))));\r\n        WebElement typeinput=driver.findElement(By.xpath(\"//li[@role='option' and text()='\"+inputValue+\"']\"));\r\n        typeinput.click();\r\n        Thread.sleep(2000);\r\n        \r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n    \r\n    break;\r\n    }\r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }       \r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Select_HealthType",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 371,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n//import org.openqa.selenium.StaleElementReferenceException;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Liability_BodilyInjuryLimit extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\tdriver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n        \n\t\t\tThread.sleep(5000);\n\t\n\t\t\tWebElement lbi = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[text()='Liability - Bodily Injury']\")));\n\t\t\t//WebElement lbi = driver.findElement(By.xpath(\"//div[text()='Liability - Bodily Injury']\"));\n\t\t\n\t\t\tString idVaue=lbi.getAttribute(\"id\");\n\t\t\tString str= idVaue.split(\"-\")[0];\n              \n\t\t\tWebElement bodilyInjuryLimitEle=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[@id='\"+str.trim()+\":0:CovTermInputSet:PackageTermInput-inputEl']\")));\n\n\t\t\t//driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":0:CovTermInputSet:PackageTermInput-inputEl']\"));\n\t\t\t\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tbodilyInjuryLimitEle.sendKeys(s);\n\t\t\tbodilyInjuryLimitEle.sendKeys(Keys.DELETE);\n\t\t\tbodilyInjuryLimitEle.sendKeys(inputValue.trim());\n\t\n\t\t\tThread.sleep(4000);\n\t\t\t//bodilyInjuryLimitEle.sendKeys(Keys.ENTER);\n\t\t\t//Thread.sleep(2000);\n\t\t\tbodilyInjuryLimitEle.sendKeys(Keys.TAB);\n\t\t\tThread.sleep(2000);\n \n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Executed Successfully\"; \n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Liability_BodilyInjuryLimit",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 372,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class PropertyDamageLiabilityLimit extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\tdriver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\twait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//div[text()='Property Damage Liability']\"))));\n\n\t\tWebElement pdl = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[text()='Property Damage Liability']\")));\n\t\t\n\t\t//driver.findElement(By.xpath(\"//div[text()='Property Damage Liability']\"));\n\t\tString idVaue=pdl.getAttribute(\"id\");\n\t\tString str= idVaue.split(\"-\")[0];\n\n\t\tWebElement propertyDamageLiabilityLimit=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[@id='\"+str.trim()+\":0:CovTermInputSet:OptionTermInput-inputEl']\")));\n\t\t\n\t\t//driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":0:CovTermInputSet:OptionTermInput-inputEl']\"));\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tpropertyDamageLiabilityLimit.sendKeys(s);\n\t\tpropertyDamageLiabilityLimit.sendKeys(Keys.DELETE);\n\t\tpropertyDamageLiabilityLimit.sendKeys(inputValue.trim());\n\t\tThread.sleep(2000);\n\t\tpropertyDamageLiabilityLimit.sendKeys(Keys.TAB);\n\t\tThread.sleep(2000);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "PropertyDamageLiabilityLimit",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 2367,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class UninsuredMotor extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {   \r\n        driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\r\n        WebDriverWait wait = new WebDriverWait(driver,30);          \r\n        wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//div[text()='Uninsured Motorists - Bodily Injury']\"))));\r\n\r\n        WebElement pdl = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[text()='Uninsured Motorists - Bodily Injury']\")));\r\n        \r\n        //driver.findElement(By.xpath(\"//div[text()='Uninsured Motorists - Bodily Injury']\"));\r\n        String idVaue=pdl.getAttribute(\"id\");\r\n        String str= idVaue.split(\"-\")[0];\r\n\r\n        WebElement uninsuredMotor = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//input[@id='\"+str.trim()+\":0:CovTermInputSet:OptionTermInput-inputEl']\")));\r\n        \r\n        //driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":0:CovTermInputSet:OptionTermInput-inputEl']\"));\r\n        String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        uninsuredMotor.sendKeys(s);\r\n        uninsuredMotor.sendKeys(Keys.DELETE);\r\n        uninsuredMotor.sendKeys(inputValue.trim());\r\n        Thread.sleep(2000);\r\n        uninsuredMotor.sendKeys(Keys.TAB);\r\n        Thread.sleep(2000);\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\";\r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "UninsuredMotor",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 2368,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class UniMotorist extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue)throws InterruptedException //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n          \r\n        try \r\n        {   \r\n            \r\n        WebDriverWait wait  = new WebDriverWait(driver, 30);\r\n        WebElement uniMotor = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"(//input[contains(@id, 'PackageTermInput-inputEl')])[2]\"))));\r\n            \r\n            String s=Keys.chord(Keys.CONTROL,\"a\");\r\n            uniMotor.sendKeys(s);\r\n            uniMotor.sendKeys(Keys.DELETE);\r\n            uniMotor.sendKeys(inputValue);\r\n            \r\n           \r\n            //carrier.sendKeys(Keys.ENTER);\r\n            /*  driver.findElement(By.xpath(\"//input[contains(@id,'Premium-inputEl')]\")).click();\r\n            // Thread.sleep(2000);\r\n            Keys.chord(Keys.TAB);*/\r\n            Actions act = new Actions(driver);\r\n            act.moveToElement(uniMotor).sendKeys(Keys.TAB).build().perform();\r\n             Thread.sleep(2000);\r\n\r\n            actionResult.status = true;\r\n            actionResult.comments = \"Executed Successfully\"; \r\n \r\n        \r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments = \" Expection Type : \" + e.getMessage();\r\n        actionResult.status   = false;\r\n        }\r\n      \r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "UniMotorist",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 2363,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ComprehensiveDeductibleLimit extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n            \r\n             WebElement comprehensive = driver.findElement(By.xpath(\"//div[text()='Comprehensive']\"));\r\n              String idVaue=comprehensive.getAttribute(\"id\");\r\n              String str= idVaue.split(\"-\")[0];\r\n             WebElement checkboxElementComprehensive = driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\r\n             String classValueComprihensive=checkboxElementComprehensive.getAttribute(\"class\");\r\n\r\n\r\n              if(!classValueComprihensive.contains(\"x-form-cb-checked\")){\r\n                driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click(); }\r\n    \r\n\r\n\r\n          if(driver.findElements(By.xpath(\"(//input[contains(@id,'CovTermInputSet:OptionTermInput-inputEl')])[2]\")).size()!=0){\r\n\r\n          WebElement comprehensiveDeductible = driver.findElement(By.xpath(\"(//input[contains(@id,'CovTermInputSet:OptionTermInput-inputEl')])[2]\"));\r\n            String s                           = Keys.chord(Keys.CONTROL,\"a\");\r\n            comprehensiveDeductible.sendKeys(s);\r\n            comprehensiveDeductible.sendKeys(Keys.DELETE);\r\n            comprehensiveDeductible.sendKeys(inputValue.trim());\r\n            \r\n            Thread.sleep(2000);\r\n            comprehensiveDeductible.sendKeys(Keys.TAB);\r\n            \r\n            Thread.sleep(2000);\r\n            }\r\n      \r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n\r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n       \r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ComprehensiveDeductibleLimit",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 380,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class CollisionLimit extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\tWebElement collision = driver.findElement(By.xpath(\"//div[text()='Collision']\"));\n\t\t\t  String idVaue=collision.getAttribute(\"id\");\n\t\t\t  String str= idVaue.split(\"-\")[0];\n\t\t\t WebElement checkboxElementCollision = driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n\t\t\t String classValueCollision=checkboxElementCollision.getAttribute(\"class\");\n\n\n\t\t\t  if(!classValueCollision.contains(\"x-form-cb-checked\")){\n\t\t\t\tdriver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click(); \n\n\t\t\t}\n\t\t\tWebElement collisionDeductible=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":DeductibleTermInput-inputEl']\"));\n\n\t\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\tcollisionDeductible.sendKeys(s);\n\t\t\tcollisionDeductible.sendKeys(Keys.DELETE);\n\t\t\tcollisionDeductible.sendKeys(inputValue.trim());\n\t\t\tThread.sleep(2000);\n\t\t\tcollisionDeductible.sendKeys(Keys.TAB);\n\t\t\tThread.sleep(2000);\n\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"Executed Successfully\"; \n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "CollisionLimit",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 381,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class CarRental extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\tdriver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);\n\t\tWebDriverWait wait=new WebDriverWait(driver,15);\n\t\tWebElement carRental = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//div[text()='Car Rental']\"))));\n\t\t//driver.findElement(By.xpath(\"//div[text()='Car Rental']\"));\n\t\tString idVaue=carRental.getAttribute(\"id\");\n\t\tString str= idVaue.split(\"-\")[0];\n\t\tWebElement checkboxElementCarRental = driver.findElement(By.xpath(\"//div[@id='\"+str.trim()+\"-legendChk']\"));\n\t\tString classValueCarRental=checkboxElementCarRental.getAttribute(\"class\");\n\n\t\tif(!classValueCarRental.contains(\"x-form-cb-checked\")){\n\t\tdriver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":_checkbox']\")).click();\n\t\t}\n\t\tThread.sleep(3000);\n\t\tWebElement carRantalLimit=driver.findElement(By.xpath(\"//input[@id='\"+str.trim()+\":0:CovTermInputSet:PackageTermInput-inputEl']\"));\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tcarRantalLimit.sendKeys(s);\n\t\tcarRantalLimit.sendKeys(Keys.DELETE);\n\t\tcarRantalLimit.sendKeys(inputValue);\n\t\tThread.sleep(2000);\n\t\tcarRantalLimit.sendKeys(Keys.TAB);\n\t\tThread.sleep(2000);\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "CarRental",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 653,
    "Description": "Submit a First Quote.",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 10292,
        "StepNumber": 1,
        "Description": "SumbitFirstQuote",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 436,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 10293,
        "StepNumber": 2,
        "Description": "AjaxWait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 989,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "SumbitFirstQuote",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 436,
    "Description": "Submitting First Quote in order to selecte the Payment Option for required plan.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SumbitFirstQuote extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n       try{\r\n       \r\n            \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            WebDriverWait wait = new WebDriverWait(driver,20);\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act = new Actions(driver);\r\n            String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n            String expMsg = inputValue.toString();\r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            ////////     Verify 'Risk Analysis' Screnn       //////////////////////\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'RiskAnalysisScreen:0')]\"))));\r\n            WebElement RiskAnalysisPageTtlEle = driver.findElement(By.xpath(\"//span[contains(@id,'RiskAnalysisScreen:0')]\"));\r\n            \r\n            String actRiskAnalysisPageTtl = RiskAnalysisPageTtlEle.getText();\r\n            if(actRiskAnalysisPageTtl.equals(\"Risk Analysis\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \" 'Risk Analysis' screen has been displayed\";\r\n                \r\n            }\r\n            \r\n            /////////     Click on 'Next' button     ////////////////////////////////\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(actionResult.element(82))));\r\n            WebElement nextBtnEle = driver.findElement(actionResult.element(82));\r\n            js.executeScript(\"arguments[0].click();\", nextBtnEle);\r\n            Thread.sleep(4000);\r\n            \r\n            ////////     Verify 'Policy Review' Screnn       //////////////////////\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'PolicyReviewScreen:ttlBar')]\"))));\r\n            WebElement PolyReviewPageTtlEle = driver.findElement(By.xpath(\"//span[contains(@id,'PolicyReviewScreen:ttlBar')]\"));\r\n            \r\n            String actPolyReviewPageTtl = PolyReviewPageTtlEle.getText();\r\n            if(actPolyReviewPageTtl.equals(\"Policy Review\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \" 'Policy Review' screen has been displayed\";\r\n                \r\n            }\r\n            \r\n            \r\n            /////// Click on 'Quote' Button on 'Policy Review' screen      /////////////////////////////////\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(actionResult.element(269))));\r\n            WebElement QuoteBtnEle = driver.findElement(actionResult.element(269));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", QuoteBtnEle);\r\n            Thread.sleep(1000);\r\n            js.executeScript(\"arguments[0].click();\", QuoteBtnEle);\r\n            Thread.sleep(30000);\r\n            \r\n            try {\r\n\r\n            status = false;\r\n            for (int i = 0; i <= 120; i++) {\r\n                status = Boolean.valueOf((boolean) js.executeScript(\"return Ext.Ajax.isLoading();\"));\r\n                System.out.println(status);\r\n                try {\r\n                    Thread.sleep(500);\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                if (!status) {\r\n\r\n                    break;\r\n                }\r\n            }\r\n            actionResult.status = true;\r\n            actionResult.comments = \"Wait Processed\";\r\n\r\n        } catch (Exception e) {\r\n            actionResult.comments =e.getMessage();\r\n        }\r\n            actionResult.comments = \"The Fisrt Quote has been submitted successfully\";\r\n            actionResult.status = true;\r\n            \r\n            \r\n            \r\n            \r\n            \r\n        }\r\n            \r\n            \r\n                \r\n            \r\n        catch(Exception e) {\r\n                actionResult.comments = e.getMessage();\r\n                actionResult.status = false;\r\n            }\r\n\r\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SumbitFirstQuote",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 651,
    "Description": "To Select the required 'Plan' & 'Payment Option' on 'Side - By Side Quoting'Screen.",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 10271,
        "StepNumber": 1,
        "Description": "SelectPlan_And_PaymentOption",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 428,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 10272,
        "StepNumber": 2,
        "Description": "SelectVersion1PaymentOption",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 426,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 10270,
        "StepNumber": 3,
        "Description": "Verify Error Message",
        "LocatorTypeId": 7,
        "Locator": "//div[@class='message']",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 10274,
        "StepNumber": 4,
        "Description": "SelectPlan_And_PaymentOption",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 428,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 10273,
        "StepNumber": 5,
        "Description": "AjaxWait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 989,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "SelectPlan_And_PaymentOption",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 428,
    "Description": "To Select the required 'Plan' & 'Payment Option' on 'Side - By Side Quoting'Screen.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport org.openqa.selenium.support.ui.FluentWait;\r\nimport org.openqa.selenium.support.ui.Wait;\r\nimport com.google.common.base.Function;\r\nimport groovy.time.Duration;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectPlan_And_PaymentOption extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n       try{\r\n       \r\n            \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            WebDriverWait wait = new WebDriverWait(driver,20);\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act = new Actions(driver);\r\n            String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n            String[] PlanDetails = inputValue.split(\" AND \");\r\n            String PlanType = PlanDetails[0].toString();\r\n            String PaymentOption = PlanDetails[1].toString();\r\n            \r\n        \r\n            \r\n            ////////     Verify Qualification Screen       //////////////////////\r\n            Thread.sleep(15000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'SideBySideScreen:ttlBar')]\"))));\r\n            WebElement QulPageTtlEle = driver.findElement(By.xpath(\"//span[contains(@id,'SideBySideScreen:ttlBar')]\"));\r\n            \r\n            String actQulPageTtl = QulPageTtlEle.getText();\r\n            if(actQulPageTtl.equals(\"Side-by-Side Quoting\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \" 'Side-by-Side Quoting' screen has been displayed\";\r\n                \r\n            }\r\n            \r\n            List<WebElement> link = driver.findElements(By.xpath(\"//input[contains(@id,'PickOffering-inputEl')]\"));\r\n            int planSize = link.size();\r\n            System.out.println(\"Size of Plan : \" + planSize);\r\n            if(PlanType.equals(\"Essential\")){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:0') and text()='\"+PaymentOption+\"']\"))));\r\n                WebElement payOptionEle = driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:0') and text()='\"+PaymentOption+\"']\"));\r\n                /* js.executeScript(\"arguments[0].style.border='2px solid red'\", payOptionEle);\r\n                Thread.sleep(1000);\r\n                js.executeScript(\"arguments[0].click();\",payOptionEle);*/\r\n                payOptionEle.click();\r\n                Thread.sleep(3000);\r\n                \r\n                if(driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle Rating Factors')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle History Report')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'The Insurance Score returned')]\")).size()>0)\r\n                  {\r\n                   driver.findElement(By.xpath(\"//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]\")).click();\r\n                   Thread.sleep(7000);\r\n                   payOptionEle = driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:0') and text()='\"+PaymentOption+\"']\"));\r\n               \r\n                   // js.executeScript(\"arguments[0].click();\",payOptionEle);  \r\n                   payOptionEle.click();   \r\n                  }\r\n                \r\n                }else if(PlanType.equals(\"Advantage\") && planSize == 3){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:1') and text()='\"+PaymentOption+\"']\"))));\r\n                WebElement payOptionEle = driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:1') and text()='\"+PaymentOption+\"']\"));\r\n                /* js.executeScript(\"arguments[0].style.border='2px solid red'\", payOptionEle);\r\n                Thread.sleep(1000);\r\n                js.executeScript(\"arguments[0].click();\",payOptionEle);*/\r\n                payOptionEle.click();\r\n                Thread.sleep(6000);\r\n                \r\n                if(driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle Rating Factors')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle History Report')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'The Insurance Score returned')]\")).size()>0)\r\n                  {\r\n                   driver.findElement(By.xpath(\"//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]\")).click();\r\n                   Thread.sleep(7000);\r\n                   //wait.until(ExpectedConditions.refreshed(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:1') and text()='\"+PaymentOption+\"']\")))));\r\n                   payOptionEle = driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:1') and text()='\"+PaymentOption+\"']\"));\r\n                \r\n                   payOptionEle.click();\r\n                   //js.executeScript(\"arguments[0].click();\",payOptionEle);     \r\n                  }\r\n                \r\n                \r\n                \r\n                }else if(PlanType.equals(\"Advantage\") && planSize == 2){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:0') and text()='\"+PaymentOption+\"']\"))));\r\n                WebElement payOptionEle = driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:0') and text()='\"+PaymentOption+\"']\"));\r\n                /* js.executeScript(\"arguments[0].style.border='2px solid red'\", payOptionEle);\r\n                Thread.sleep(1000);\r\n                js.executeScript(\"arguments[0].click();\",payOptionEle);*/\r\n                payOptionEle.click();\r\n                Thread.sleep(6000);\r\n                \r\n                if(driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle Rating Factors')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle History Report')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'The Insurance Score returned')]\")).size()>0)\r\n                  {\r\n                   driver.findElement(By.xpath(\"//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]\")).click();\r\n                   Thread.sleep(7000);\r\n                   payOptionEle = driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:0') and text()='\"+PaymentOption+\"']\"));\r\n               \r\n                   //js.executeScript(\"arguments[0].click();\",payOptionEle); \r\n                  payOptionEle.click();    \r\n                  }\r\n                \r\n                \r\n                \r\n                }else if(PlanType.equals(\"Ultimate\") && planSize == 3){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:2') and text()='\"+PaymentOption+\"']\"))));\r\n                WebElement payOptionEle = driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:2') and text()='\"+PaymentOption+\"']\"));\r\n                //js.executeScript(\"arguments[0].scrollLeft=arguments[0].offsetWidth\", payOptionEle);\r\n                // js.executeScript(\"arguments[0].scrollIntoView();\", payOptionEle);\r\n               // js.executeScript(\"arguments[0].style.border='2px solid red'\", payOptionEle);\r\n               // Thread.sleep(1000);\r\n               // js.executeScript(\"arguments[0].click();\",payOptionEle);\r\n               payOptionEle.click();\r\n                Thread.sleep(5000);\r\n                \r\n                if(driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle Rating Factors')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle History Report')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'The Insurance Score returned')]\")).size()>0)\r\n                  {\r\n                   driver.findElement(By.xpath(\"//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]\")).click();\r\n                   Thread.sleep(7000);\r\n                   payOptionEle = driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:2') and text()='\"+PaymentOption+\"']\"));\r\n                \r\n                   // js.executeScript(\"arguments[0].click();\",payOptionEle); \r\n                   payOptionEle.click();    \r\n                  }\r\n                \r\n                \r\n                \r\n                }else if(PlanType.equals(\"Ultimate\") && planSize == 2){\r\n                wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:1') and text()='\"+PaymentOption+\"']\"))));\r\n                WebElement payOptionEle = driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:1') and text()='\"+PaymentOption+\"']\"));\r\n                /* js.executeScript(\"arguments[0].style.border='2px solid red'\", payOptionEle);\r\n                Thread.sleep(1000);\r\n                js.executeScript(\"arguments[0].click();\",payOptionEle);*/\r\n                payOptionEle.click();\r\n                Thread.sleep(4000);\r\n                \r\n                if(driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle Rating Factors')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle History Report')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'The Insurance Score returned')]\")).size()>0)\r\n                  {\r\n                   driver.findElement(By.xpath(\"//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]\")).click();\r\n                   Thread.sleep(7000);\r\n                   payOptionEle = driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:1') and text()='\"+PaymentOption+\"']\"));\r\n                \r\n                   //js.executeScript(\"arguments[0].click();\",payOptionEle); \r\n                   payOptionEle.click();    \r\n            }\r\n                \r\n                \r\n                }\r\n            \r\n            else{\r\n                actionResult.comments = \"Please check the 'Plan and Payment Option.....'  \";\r\n                \r\n            }\r\n            \r\n            \r\n              \r\n            \r\n            Thread.sleep(3000);\r\n            actionResult.comments = \"The Payment Option has been selected as : \"+PaymentOption +\"for the plan : \"+PlanType;\r\n            actionResult.status = true;\r\n            \r\n        }\r\n            \r\n            \r\n                \r\n            \r\n        catch(Exception e) {\r\n                actionResult.comments = e.getMessage();\r\n                actionResult.status = false;\r\n            }\r\n\r\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectPlan_And_PaymentOption",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 426,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action; \r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectVersion1PaymentOption extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\nfor(int i =1; i<=5; i++)\r\n{\r\n    try{\r\n    \r\n driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);\r\n        WebElement version1PaymentOptEle = driver.findElement(By.xpath(\"//a[contains(@id,'SideBySidePeriod:0') and text()='\"+inputValue+\"']\"));\r\n        WebDriverWait wait = new WebDriverWait(driver,25);\r\n        wait.until(ExpectedConditions.elementToBeClickable(version1PaymentOptEle));\r\n        version1PaymentOptEle.click();\r\n        Thread.sleep(5000);\r\n        \r\n        \r\n            if(driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle Rating Factors')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle History Report')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'The Insurance Score returned')]\")).size()>0)\r\n            {\r\n            driver.findElement(By.xpath(\"//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]\")).click();\r\n            Thread.sleep(3000);\r\n             version1PaymentOptEle .click();     \r\n            }\r\n         \r\n        \r\n        \r\n            actionResult.status = true;\r\n            actionResult.comments =  \"The Payment option for Version 1 selected as:\"+inputValue;\r\n        \r\nbreak;\r\n}\r\ncatch(Exception e) {\r\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\nactionResult.status = false;\r\n}\r\n}\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectVersion1PaymentOption",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 421,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectAndApproveUWIssues extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        for(int i =1; i<=5; i++) \r\n        {   \r\n                try{\r\n                    WebDriverWait wait = new WebDriverWait(driver,30);\r\n                    JavascriptExecutor js = (JavascriptExecutor)driver;\r\n                    Actions act = new Actions(driver);\r\n                    String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n                    Thread.sleep(1000);\r\n                    try{\r\n                    WebElement detailsBtn = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'DetailsButton-btnInnerEl')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", detailsBtn);\r\n                    js.executeScript(\"arguments[0].click();\",detailsBtn);\r\n                    Thread.sleep(1500);\r\n                    }catch(Exception exc){\r\n                        actionResult.comments = exc.getMessage();\r\n                    }\r\n                        List<WebElement> noOptions = driver.findElements(By.xpath(\"//a[contains(@id,'ShortDescription')]/ancestor::tr/descendant::img[contains(@class,'checkcolumn')]\"));\r\n                        int numberOfOptions = noOptions.size();\r\n                        System.out.println(\"No Of Options: \"+numberOfOptions);\r\n                        \r\n                        for(int j =0; j<numberOfOptions; j++) \r\n                        {\r\n                        int g                   = j+1;\r\n                        WebElement noOptionsEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//a[contains(@id,'ShortDescription')]/ancestor::tr/descendant::img[contains(@class,'checkcolumn')])[\"+g+\"]\"))));\r\n                        js.executeScript(\"arguments[0].style.border='2px solid red'\", noOptionsEle);\r\n                        //js.executeScript(\"arguments[0].click();\",noOptionsEle);\r\n                        noOptionsEle.click();\r\n                        Thread.sleep(1000);\r\n                        }\r\n                    try{\r\n                    driver.findElement(By.xpath(\"//a[contains(@id,'RiskEvaluationPanelSet:Approve') and contains(@class,'disabled')]\"));\r\n                    WebElement reopenBtn = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'Reopen-btnInnerEl')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", reopenBtn);\r\n                    js.executeScript(\"arguments[0].click();\",reopenBtn);\r\n                    Thread.sleep(1000);\r\n                    for(int q =0; q<numberOfOptions; q++) \r\n                        {\r\n                        int o                   = q+1;\r\n                        WebElement noOptionsElemt = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//a[contains(@id,'ShortDescription')]/ancestor::tr/descendant::img[contains(@class,'checkcolumn')])[\"+o+\"]\"))));\r\n                        js.executeScript(\"arguments[0].style.border='2px solid red'\", noOptionsElemt);\r\n                        //js.executeScript(\"arguments[0].click();\",noOptionsElemt);\r\n                        noOptionsElemt.click();\r\n                        Thread.sleep(1000);\r\n                        }}\r\n                    catch(Exception v){\r\n                        actionResult.comments =v.getMessage();\r\n                    }\r\n                    WebElement approveBtn = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'RiskEvaluationPanelSet:Approve')]\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", approveBtn);\r\n                    js.executeScript(\"arguments[0].click();\",approveBtn);\r\n                    Thread.sleep(1000);\r\n                    WebElement oKBtn = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'Update-btnInnerEl')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", oKBtn);\r\n                    js.executeScript(\"arguments[0].click();\",oKBtn);\r\n                    Thread.sleep(1000);\r\n                    \r\n                    actionResult.status = true;\r\n                    actionResult.comments =  \"Executed Successfully\";\r\n                    break;\r\n                    }catch(Exception e) {\r\n                        actionResult.comments =\"Exception at Value Element\"+e.getMessage();\r\n                        actionResult.status = false;\r\n\r\n                    }\r\n        }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectAndApproveUWIssues",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 45,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 5931,
        "StepNumber": 1,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5887,
        "StepNumber": 2,
        "Description": "VerifyFormsScreenVisible",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1051,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5945,
        "StepNumber": 3,
        "Description": "VerifyIFSendTrailDoc",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(text(),'all Trailing Documents')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5968,
        "StepNumber": 4,
        "Description": "Click No for send all trailing doc",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'SendDocusignID_false-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5946,
        "StepNumber": 5,
        "Description": "click yes",
        "LocatorTypeId": 7,
        "Locator": "(//input[@type='button'])[1]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5951,
        "StepNumber": 6,
        "Description": "click No",
        "LocatorTypeId": 7,
        "Locator": "(//input[@type='button'])[2]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5947,
        "StepNumber": 7,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5948,
        "StepNumber": 8,
        "Description": "Enter email ",
        "LocatorTypeId": 7,
        "Locator": "//input[@name='SubmissionWizard:FormsScreen:emailPNI']",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "aali@acg.aaa.com",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5949,
        "StepNumber": 9,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5950,
        "StepNumber": 10,
        "Description": "Renter Email ",
        "LocatorTypeId": 7,
        "Locator": "(//input[@data-ref='inputEl'])[7]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "aali@acg.aaa.com",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5893,
        "StepNumber": 11,
        "Description": "Verify if send Email sign is visible",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'SendEsignRenewalID_true-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5941,
        "StepNumber": 12,
        "Description": "Re-enteremailid",
        "LocatorTypeId": 3,
        "Locator": "SubmissionWizard:FormsScreen:ReEnterEmailPNI-inputEl",
        "ActionId": 43,
        "ParameterName": "phase5",
        "ParameterValue": "aali@acg.aaa.com",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5942,
        "StepNumber": 13,
        "Description": "ReEnterEmail",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "phase5tcvalidation",
        "ParameterValue": null,
        "CustomActionId": 451,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5851,
        "StepNumber": 14,
        "Description": "VerifySendEmailSign",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(text(),'Send all PIP/BI forms')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5879,
        "StepNumber": 15,
        "Description": "YesorNoSendEmailSign",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 446,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5929,
        "StepNumber": 16,
        "Description": "TransactionOnForms",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "ForBRAndURValidations1",
        "ParameterValue": null,
        "CustomActionId": 449,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5930,
        "StepNumber": 17,
        "Description": "FormsListOnFormsScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "ForBRAndURValidations2",
        "ParameterValue": null,
        "CustomActionId": 450,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5957,
        "StepNumber": 18,
        "Description": "wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5866,
        "StepNumber": 19,
        "Description": "ClickOnProceedToBindButtonOnFormsScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'ProceedToBind')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 20,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5943,
        "StepNumber": 20,
        "Description": "Click on Poliy Info",
        "LocatorTypeId": 7,
        "Locator": "//td[@id=\"SubmissionWizard:LOBWizardStepGroup:PolicyInfo\"]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 20,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5944,
        "StepNumber": 21,
        "Description": "Type ACG Life Policy Number",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'acgLifePolicyNumber-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5967,
        "StepNumber": 22,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5928,
        "StepNumber": 23,
        "Description": "ClickOnDrivers",
        "LocatorTypeId": 7,
        "Locator": "//td[@id=\"SubmissionWizard:LOBWizardStepGroup:PADrivers\"]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6006,
        "StepNumber": 24,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5934,
        "StepNumber": 25,
        "Description": "NavigateToDriversScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 138,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5888,
        "StepNumber": 26,
        "Description": "VerifyDriversPageVisible",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1044,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5867,
        "StepNumber": 27,
        "Description": "ClickOnNextBtnOnDriversScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'SubmissionWizard:Next')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5966,
        "StepNumber": 28,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6007,
        "StepNumber": 29,
        "Description": "VerifyWarning",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(text(),'License # format does not match License State')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6008,
        "StepNumber": 30,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5889,
        "StepNumber": 31,
        "Description": "VerifyReportsScreenVisible",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1048,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5969,
        "StepNumber": 32,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5970,
        "StepNumber": 33,
        "Description": "Click on Order Prefill button",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'SubmissionWizard:SubmissionWizard_PolicyReviewScreen:JobWizardToolbarButtonSet:orderPrefill-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5971,
        "StepNumber": 34,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5873,
        "StepNumber": 35,
        "Description": "LossesandViolationsTabOpened",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 282,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5874,
        "StepNumber": 36,
        "Description": "YesorNoAutoLosses",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 283,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5875,
        "StepNumber": 37,
        "Description": "YesorNoDrivingViolations",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No",
        "CustomActionId": 284,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5876,
        "StepNumber": 38,
        "Description": "ClickOnOrderorRetrieveAutoLossHistory",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 285,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5917,
        "StepNumber": 39,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "6",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5937,
        "StepNumber": 40,
        "Description": "Click on Bypass MVR check box",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'bypassMVR-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5863,
        "StepNumber": 41,
        "Description": "ClickOnBypassAutoLoss",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 297,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5938,
        "StepNumber": 42,
        "Description": "ClickOnByepassMVR",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 296,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5877,
        "StepNumber": 43,
        "Description": "OrderMVR",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "BARRY SHAFFER",
        "CustomActionId": 286,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5935,
        "StepNumber": 44,
        "Description": "AddDrivingViolations",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "ForBRAndUWRuleValidationsOnly",
        "ParameterValue": null,
        "CustomActionId": 1187,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5939,
        "StepNumber": 45,
        "Description": "AddDrivingViolations_FL",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": "ForBRvalidationsonly",
        "ParameterValue": null,
        "CustomActionId": 1189,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5940,
        "StepNumber": 46,
        "Description": "AddDrivingViolations_MI",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1191,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5936,
        "StepNumber": 47,
        "Description": "AddLossesOnReportsPage",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1252,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5926,
        "StepNumber": 48,
        "Description": "OrderMVR_Copy",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 289,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5895,
        "StepNumber": 49,
        "Description": "If MVR is not found",
        "LocatorTypeId": 7,
        "Locator": "//td/div[text()='Not found']",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:48",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5959,
        "StepNumber": 50,
        "Description": "Click on logout",
        "LocatorTypeId": 7,
        "Locator": "//a[@id=':TabLinkMenuButton']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5996,
        "StepNumber": 51,
        "Description": "LogoutFromPolicyCenter",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 960,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5997,
        "StepNumber": 52,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5910,
        "StepNumber": 53,
        "Description": "Log out GW",
        "LocatorTypeId": 7,
        "Locator": "//a[@id=':TabLinkMenuButton']~//a[@id='TabBar:LogoutTabBarLink-itemEl']",
        "ActionId": 64,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5911,
        "StepNumber": 54,
        "Description": "Click Ok on the pop up",
        "LocatorTypeId": 7,
        "Locator": "//span[text()='OK']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5896,
        "StepNumber": 55,
        "Description": "Navigate to agent browser",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 27,
        "ParameterName": null,
        "ParameterValue": "GDT_GWEnv_URL",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5897,
        "StepNumber": 56,
        "Description": "ClickLogOutFromFooter",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 2420,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5898,
        "StepNumber": 57,
        "Description": "Navigate to URL",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 27,
        "ParameterName": null,
        "ParameterValue": "GDT_GWEnv_URL",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5899,
        "StepNumber": 58,
        "Description": "Enter UW user Name",
        "LocatorTypeId": 4,
        "Locator": "username",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "GDT_GWEnv_UW_Username",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5900,
        "StepNumber": 59,
        "Description": "Enter UW password",
        "LocatorTypeId": 4,
        "Locator": "password",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "GDT_GWEnv_UW_Password",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5901,
        "StepNumber": 60,
        "Description": "Click Login",
        "LocatorTypeId": 4,
        "Locator": "submit",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6009,
        "StepNumber": 61,
        "Description": "WaitForPageload",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6010,
        "StepNumber": 62,
        "Description": "Refresh",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 31,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6011,
        "StepNumber": 63,
        "Description": "WaitForPageload",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5902,
        "StepNumber": 64,
        "Description": "Click on AAA insurance activity",
        "LocatorTypeId": 7,
        "Locator": "//div[contains(text(), ' AAA Insurance Link Activities ')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5903,
        "StepNumber": 65,
        "Description": "ClickPolicyTab",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 956,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5904,
        "StepNumber": 66,
        "Description": "Enter quote number",
        "LocatorTypeId": 3,
        "Locator": "TabBar:PolicyTab:PolicyTab_SubmissionNumberSearchItem-inputEl",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_QuoteNumber",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5905,
        "StepNumber": 67,
        "Description": "Click on search button",
        "LocatorTypeId": 3,
        "Locator": "TabBar:PolicyTab:PolicyTab_SubmissionNumberSearchItem_Button",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5913,
        "StepNumber": 68,
        "Description": "Click on Policy Info Tab",
        "LocatorTypeId": 7,
        "Locator": "//*[@id='SubmissionWizard:LOBWizardStepGroup:PolicyInfo']//div//span[text()='Policy Info']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5964,
        "StepNumber": 69,
        "Description": "Click on Has the Named Insured lived at the Policy Address for less than 3 years?",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'prevstaylessthan3_false-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5914,
        "StepNumber": 70,
        "Description": "Click Yes for current AAA Membership",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'PNIMemberShipID_true-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5923,
        "StepNumber": 71,
        "Description": "BypassMembership",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1059,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5915,
        "StepNumber": 72,
        "Description": "Provide membership Number",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'membership-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_MembershipNumber",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5916,
        "StepNumber": 73,
        "Description": "Provide Member since",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'membersince-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_MemberSince",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5962,
        "StepNumber": 74,
        "Description": "Binding Agent Org code",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'Producer1-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5963,
        "StepNumber": 75,
        "Description": "Bindingagent_Producercode",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1039,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5924,
        "StepNumber": 76,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5960,
        "StepNumber": 77,
        "Description": "SelectOrgNameAndProducerCode_Bindingagent",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 73,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5961,
        "StepNumber": 78,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5965,
        "StepNumber": 79,
        "Description": "Click on ACG Life",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'acgLifePolicyNumber-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "HOM70000100",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5906,
        "StepNumber": 80,
        "Description": "Click on report tab",
        "LocatorTypeId": 7,
        "Locator": "//*[@id='SubmissionWizard:LOBWizardStepGroup:Reports_Acg']//div//span[text()='Reports']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5925,
        "StepNumber": 81,
        "Description": "ClickReportTab",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1049,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5918,
        "StepNumber": 82,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5907,
        "StepNumber": 83,
        "Description": "VerifyReportsScreenVisible",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1048,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5908,
        "StepNumber": 84,
        "Description": "LossesandViolationsTabOpened",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 282,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5909,
        "StepNumber": 85,
        "Description": "Click on Bypass MVR check box",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id,'bypassMVR-inputEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 20,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5958,
        "StepNumber": 86,
        "Description": "ClickOnBypassAutoLoss",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 297,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5933,
        "StepNumber": 87,
        "Description": "ClickOnByepassMVR",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 296,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5994,
        "StepNumber": 88,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5995,
        "StepNumber": 89,
        "Description": "ClickOnQuoteButton",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'QuoteOrReview-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5919,
        "StepNumber": 90,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5912,
        "StepNumber": 91,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5868,
        "StepNumber": 92,
        "Description": "VerifyVehiclesPage",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 225,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5927,
        "StepNumber": 93,
        "Description": "Quote2SelectNamedInsured",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 247,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5973,
        "StepNumber": 94,
        "Description": "ExistingDamageDROPDOWN",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "No existing damage to the vehicle",
        "CustomActionId": 224,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5932,
        "StepNumber": 95,
        "Description": "NameInsuredOrSpouse",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_Drivers_AddDriverName",
        "CustomActionId": 1134,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5881,
        "StepNumber": 96,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5920,
        "StepNumber": 97,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5864,
        "StepNumber": 98,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5865,
        "StepNumber": 99,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5890,
        "StepNumber": 100,
        "Description": "Varify if MIPIP Screen visible",
        "LocatorTypeId": 7,
        "Locator": "//span[text()='MI PIP Coverage' and contains(@id,'PIPHouseholdScreen')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5880,
        "StepNumber": 101,
        "Description": "VerifyMIPIPCoverageScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 356,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5882,
        "StepNumber": 102,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5921,
        "StepNumber": 103,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5954,
        "StepNumber": 104,
        "Description": "Verify if Health Plan validation msg available",
        "LocatorTypeId": 7,
        "Locator": "//div[contains(text(),'Health Plan : Missing')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5955,
        "StepNumber": 105,
        "Description": "SelectHealthPlan_MIPIP",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1233,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5956,
        "StepNumber": 106,
        "Description": "wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5869,
        "StepNumber": 107,
        "Description": "VerifyPACoveragesScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 367,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5852,
        "StepNumber": 108,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5853,
        "StepNumber": 109,
        "Description": "Click Plan and Dicounts",
        "LocatorTypeId": 7,
        "Locator": "//span[text()='Plan & Discount']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5854,
        "StepNumber": 110,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5870,
        "StepNumber": 111,
        "Description": "VerifyPlanandDiscountTabOpened",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 369,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5855,
        "StepNumber": 112,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5856,
        "StepNumber": 113,
        "Description": "paymentPlanSelection",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1015,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5857,
        "StepNumber": 114,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5883,
        "StepNumber": 115,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5922,
        "StepNumber": 116,
        "Description": null,
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5871,
        "StepNumber": 117,
        "Description": "VerifyRiskAnalysisScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 415,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5884,
        "StepNumber": 118,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5872,
        "StepNumber": 119,
        "Description": "VerifyPolicyReviewScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 274,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6005,
        "StepNumber": 120,
        "Description": "ClickOnQuoteButton",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 914,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5878,
        "StepNumber": 121,
        "Description": "ClickOnQuoteBtnOnPolicyReviewScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'QuoteOrReview')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5952,
        "StepNumber": 122,
        "Description": "Verify if Soft error displayes",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'ClearButton-btnInnerEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5972,
        "StepNumber": 123,
        "Description": "Click on Clear",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'ClearButton-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5953,
        "StepNumber": 124,
        "Description": "ClickOnQuoteBtnOnPolicyReviewScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'QuoteOrReview')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5894,
        "StepNumber": 125,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "100",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5891,
        "StepNumber": 126,
        "Description": "VerifyQuoteScreenVisible",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1042,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5885,
        "StepNumber": 127,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5892,
        "StepNumber": 128,
        "Description": "VerifyFormsScreenVisible",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1051,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5886,
        "StepNumber": 129,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5974,
        "StepNumber": 130,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5975,
        "StepNumber": 131,
        "Description": "Click Save Draft",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'Draft-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5976,
        "StepNumber": 132,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5977,
        "StepNumber": 133,
        "Description": "Click on logout",
        "LocatorTypeId": 7,
        "Locator": "//a[@id=':TabLinkMenuButton']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5998,
        "StepNumber": 134,
        "Description": "LogoutFromPolicyCenter",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 960,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5999,
        "StepNumber": 135,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5978,
        "StepNumber": 136,
        "Description": "Log out GW",
        "LocatorTypeId": 7,
        "Locator": "//a[@id=':TabLinkMenuButton']~//a[@id='TabBar:LogoutTabBarLink-itemEl']",
        "ActionId": 64,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": true,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5979,
        "StepNumber": 137,
        "Description": "Click Ok on the pop up",
        "LocatorTypeId": 7,
        "Locator": "//span[text()='OK']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5980,
        "StepNumber": 138,
        "Description": "Navigate to agent browser",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 27,
        "ParameterName": null,
        "ParameterValue": "GDT_GWEnv_URL",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5981,
        "StepNumber": 139,
        "Description": "ClickLogOutFromFooter",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 2420,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5982,
        "StepNumber": 140,
        "Description": "Navigate to URL",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 27,
        "ParameterName": null,
        "ParameterValue": "GDT_GWEnv_URL",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5983,
        "StepNumber": 141,
        "Description": "Enter UW user Name",
        "LocatorTypeId": 4,
        "Locator": "username",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "GDT_GWEnv_Username",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5984,
        "StepNumber": 142,
        "Description": "Enter UW password",
        "LocatorTypeId": 4,
        "Locator": "password",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "GDT_GWEnv_Password",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5985,
        "StepNumber": 143,
        "Description": "Click Login",
        "LocatorTypeId": 4,
        "Locator": "submit",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6012,
        "StepNumber": 144,
        "Description": "WaitForPageload",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6013,
        "StepNumber": 145,
        "Description": "Refresh",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 31,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6014,
        "StepNumber": 146,
        "Description": "WaitForPageload",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5986,
        "StepNumber": 147,
        "Description": "Click on AAA insurance activity",
        "LocatorTypeId": 7,
        "Locator": "//div[contains(text(),'AAA Insurance Link Activities')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5987,
        "StepNumber": 148,
        "Description": "ClickPolicyTab",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 956,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5988,
        "StepNumber": 149,
        "Description": "Enter quote number",
        "LocatorTypeId": 3,
        "Locator": "TabBar:PolicyTab:PolicyTab_SubmissionNumberSearchItem-inputEl",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": "DT_QuoteNumber",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5989,
        "StepNumber": 150,
        "Description": "Click on search button",
        "LocatorTypeId": 3,
        "Locator": "TabBar:PolicyTab:PolicyTab_SubmissionNumberSearchItem_Button",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5858,
        "StepNumber": 151,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5859,
        "StepNumber": 152,
        "Description": "ClickOnEditTransaction",
        "LocatorTypeId": 7,
        "Locator": "//*[text()='Edit Policy Transaction']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5860,
        "StepNumber": 153,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5861,
        "StepNumber": 154,
        "Description": "ClickOk",
        "LocatorTypeId": 7,
        "Locator": "//*[text()='OK']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5862,
        "StepNumber": 155,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6015,
        "StepNumber": 156,
        "Description": "VerifyQuoteBtn",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'QuoteOrReview')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6000,
        "StepNumber": 157,
        "Description": "ClickOnQuoteBtnOnPolicyReviewScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'QuoteOrReview')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6001,
        "StepNumber": 158,
        "Description": "Verify if Soft error displayes",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'ClearButton-btnInnerEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6002,
        "StepNumber": 159,
        "Description": "Click on Clear",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'ClearButton-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6003,
        "StepNumber": 160,
        "Description": "ClickOnQuoteBtnOnPolicyReviewScreen",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(@id,'QuoteOrReview')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6004,
        "StepNumber": 161,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5990,
        "StepNumber": 162,
        "Description": "VerifyQuoteScreenVisible",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1042,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5991,
        "StepNumber": 163,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5992,
        "StepNumber": 164,
        "Description": "VerifyFormsScreenVisible",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1051,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 5993,
        "StepNumber": 165,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Forms_With_MVR_Validation",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1051,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action; \nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyFormsScreenVisible extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \nfor(int i =1; i<=5; i++)\n{\ntry\n{\n\ndriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\n              WebDriverWait wait=new WebDriverWait(driver,15);\n\t\tWebElement pageTitleEle = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'FormsScreen:ttlBar')]\"))));\n\n\n\n\t\t//WebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'FormsScreen:ttlBar')]\"));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"Forms\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Forms' screen successfully\";\n\t\t}\n\n\t\t\t\n\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyFormsScreenVisible",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 451,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ReEnterEmail extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ntry \n\t\t{\t\n\t\t\t\n\t\t\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\t\tWebElement ReEnterEmailEle;\n\t\t\t\tReEnterEmailEle = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//input[contains(@id,'ReEnterEmailPNI-inputEl')]\")));\n\t\t\t\tReEnterEmailEle.click();\n\t\t\t\tReEnterEmailEle.sendKeys(inputValue);\n\t\t\t\tKeys.chord(Keys.TAB);\n\t\t\t\tactionResult.status = true;\n\t\t\t\tactionResult.comments =  \"Email entered as:\"+inputValue;\n\n\t\t\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ReEnterEmail",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 446,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class YesorNoSendEmailSign extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\nfor(int i =1; i<=3; i++)\r\n{\r\n    try{\r\n\r\n           WebElement SendEsignRenewaYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'SendEsignRenewalID_true-inputEl')]\"));\r\n        WebElement SendEsignRenewaNoEle= driver.findElement(By.xpath(\"//input[contains(@id,'SendEsignRenewalID_false-inputEl')]\"));\r\n        if(inputValue.equalsIgnoreCase(\"Yes\")){\r\n            SendEsignRenewaYesEle.click();\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"'Send Esign Renewal' has been selected as : 'Yes'\";\r\n        }\r\n        if(inputValue.equalsIgnoreCase(\"No\")){\r\n            SendEsignRenewaNoEle.click();\r\n                     Thread.sleep(3);\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"'Send Esign Renewal' has been selected as : 'No'\";\r\n        }\r\n        \r\n\r\n\r\nbreak;\r\n}\r\ncatch(Exception e) {\r\nactionResult.comments = \"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\nactionResult.status   = true;\r\n}\r\n}\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoSendEmailSign",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 449,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class TransactionOnForms extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tWebDriverWait wait = new WebDriverWait(driver,30);\n\tJavascriptExecutor js=(JavascriptExecutor) driver;\n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[text()='Transaction']\"))));\n\t\tWebElement transaction = driver.findElement(By.xpath(\"//span[text()='Transaction']\"));\n\t\tjs.executeScript(\"arguments[0].setAttribute('style', 'border:2px solid red; background:yellow')\", transaction);\n\t\tjs.executeScript(\"arguments[0].scrollIntoView(true);\", transaction);\n\t\t\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Transaction on Forms Screen\";\n\n\t\tbreak;\n\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Not Navigated to Forms Screen\";\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "TransactionOnForms",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 450,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class FormsListOnFormsScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tWebDriverWait wait = new WebDriverWait(driver,30);\n\tJavascriptExecutor js=(JavascriptExecutor) driver;\n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//*[text()='Forms'])[3]\"))));\n\t\tWebElement forms = driver.findElement(By.xpath(\"(//*[text()='Forms'])[3]\"));\n\t\tjs.executeScript(\"arguments[0].setAttribute('style', 'border:2px solid red; background:yellow')\", forms);\n\t\tjs.executeScript(\"arguments[0].scrollIntoView(true);\", forms);\n\t\t\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Forms List on Forms Screen\";\n\n\t\tbreak;\n\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Not Navigated to Forms Screen\";\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "FormsListOnFormsScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 138,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class NavigateToDriversScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n         \n        \tWebElement driverPageBtn= driver.findElement(By.xpath(\"//*[contains(@id,'LOBWizardStepGroup:PADrivers')]/div/span[text()='Drivers']\"));\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driverPageBtn));\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tjs.executeScript(\"arguments[0].click();\", driverPageBtn);\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Navigated to Drivers Screen\";\n \n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "NavigateToDriversScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1044,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class VerifyDriversPageVisible extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    for(int i =1; i<=5; i++)\r\n{\r\n    try{\r\n    \r\n driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\r\n\r\n        WebDriverWait wait      = new WebDriverWait(driver,15);\r\n        WebElement driverPageEle = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(text(),'Drivers')]\"))));\r\n        driverPageEle.click();\r\n        Thread.sleep(2000);\r\n        WebElement pageTitleEle = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'PADriversScreen:ttlBar')]\"))));\r\n\r\n        \r\n        //WebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'PADriversScreen:ttlBar')]\"));\r\n        String actPageTitle = pageTitleEle.getText();\r\n        if(actPageTitle.equals(\"Drivers\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"Naviagted to 'Drivers' screen successfully\";\r\n        }\r\n\r\n        \r\n\r\n\r\nbreak;\r\n}\r\ncatch(Exception e) {\r\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\nactionResult.status = false;\r\n}\r\n}\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyDriversPageVisible",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1048,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyReportsScreenVisible extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++)\n{\n\ttry{\n\t\n WebDriverWait wait = new WebDriverWait(driver,30);\n\n\t\tWebElement txt_reports = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//span[contains(@id,'eport_AcgScreen:ttlBar')]\")));\n\n\n\t\tString actPageTitle = txt_reports.getText();\n\t\tif(actPageTitle.equals(\"Reports\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Reports' screen successfully\";\n\t\t}\n\n\n\t\t\n\n\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyReportsScreenVisible",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 282,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class LossesandViolationsTabOpened extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\t//WebElement PlanandDiscountTabEle = driver.findElement(By.xpath(\"//a[contains(@id,'lossesAndViolationsCardTab')]\"));\n\t\tdriver.findElement(By.xpath(\"//a[contains(@id,'lossesAndViolationsCardTab')]\")).click();\n\t\tThread.sleep(3000);\n\t\tString getLossesAndViolationsTabIndex = driver.findElement(By.xpath(\"//a[contains(@id,'lossesAndViolationsCardTab')]\")).getAttribute(\"tabindex\");\n\t\tif(getLossesAndViolationsTabIndex.equals(\"0\")){\n\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"User is on 'Losses And Violations Tab'\";\n\t\t}\n\t\telse{\n           \t\tactionResult.status = false;\n\t\t\tactionResult.comments =  \" ''Losses And Violations Tab' is not opened\";\n\t\t}\n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "LossesandViolationsTabOpened",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 283,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesorNoAutoLosses extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++)\n{\n\ttry{\n\t\n WebElement autoLossesYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'autoLosses_true-inputEl')]\"));\n\t\tWebElement autoLossesYesEleNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'autoLosses_false-inputEl')]\"));\n\t\t\n\t\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\tif(autoLossesYesEle.getAttribute(\"tabindex\").equals(\"0\")){\n\t\t\tautoLossesYesEle.click();\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \" 'autoLossesYesEleNoEle' has been selected as : 'Yes'\";\n\t\t\t}\n\t\t\telse{\n\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \" 'autoLossesYesEleNoEle' has been selected as : 'Yes'\";\n\t\t\t}\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\tif(autoLossesYesEleNoEle.getAttribute(\"tabindex\").equals(\"0\")){\n\t\t\tautoLossesYesEleNoEle.click();\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"'autoLossesYesEleNoEle' has been selected as : 'No'\";\n\t\t\t}\n\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"'autoLossesYesEleNoEle' has been selected as : 'No'\";\n\t\t}\n\t\t\n\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoAutoLosses",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 284,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class YesorNoDrivingViolations extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \nfor(int i =1; i<=5; i++)\n{\n\ttry{\n\t\nWebElement drivingViolationsYesEle = driver.findElement(By.xpath(\"//input[contains(@id,'drivingViolations_true-inputEl')]\"));\n\t\tWebElement drivingViolationsNoEle = driver.findElement(By.xpath(\"//input[contains(@id,'drivingViolations_false-inputEl')]\"));\n\t\t\n\t\n\t\tif(inputValue.equalsIgnoreCase(\"Yes\")){\n\t\t\tif(drivingViolationsYesEle.getAttribute(\"tabindex\").equals(\"-1\")){\n\t\t\tdrivingViolationsYesEle.click();\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \" 'Driving Violations' has been selected as : 'Yes'\";\n\t\t\t}\n\t\t\telse{\n\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \" 'Driving Violations' has been selected as : 'Yes'\";\n\t\t\t}\n\t\t}\n\t\tif(inputValue.equalsIgnoreCase(\"No\")){\n\t\t\tif(drivingViolationsNoEle.getAttribute(\"tabindex\").equals(\"-1\")){\n\t\t\tdrivingViolationsNoEle.click();\n           \t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"'Driving Violations' has been selected as : 'No'\";\n\t\t\t}\n\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"'Driving Violations' has been selected as : 'No'\";\n\t\t}\n\t\t\n\t\n\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\n\n\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "YesorNoDrivingViolations",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 285,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ClickOnOrderorRetrieveAutoLossHistory extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\tWebDriverWait wait=new WebDriverWait(driver, 20);\n\t\t\twait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//a[contains(@id,'autoLoss:orderAutoLH')]\"))));\n\t\t\tdriver.findElement(By.xpath(\"//a[contains(@id,'autoLoss:orderAutoLH')]\")).click();\n\t\t\t\n\t\t\tThread.sleep(2000);\n           \tactionResult.status = true;\n           \tactionResult.comments =  \"Executed successfully\";\n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnOrderorRetrieveAutoLossHistory",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 297,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ClickOnBypassAutoLoss extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\ttry{\n\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,50);\n\t\tJavascriptExecutor js=(JavascriptExecutor)driver;\n\t\tWebElement byepass = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'bypassAutoLoss-inputEl')]\"))));\n\t\t\n\t\tjs.executeScript(\"arguments[0].click();\", byepass);\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"Executed successfully\";\n\t\t}\n\t\tcatch(Exception e){\n           actionResult.status = false;\n           actionResult.comments =  e.getMessage();\n\t\t}\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnBypassAutoLoss",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 296,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ClickOnByepassMVR extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n   \r\n for(int i =1; i<=5; i++) \r\n   {   \r\n       \r\n    try{\r\n        \r\n        WebDriverWait wait    = new WebDriverWait(driver,50);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        WebElement byepassMvr = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'bypassMVR-inputEl')]\"))));\r\n        \r\n        js.executeScript(\"arguments[0].click();\", byepassMvr);\r\n        actionResult.status   = true;\r\n        actionResult.comments = \"Executed successfully\";\r\n        break;\r\n    }\r\n    catch(Exception e){\r\n           actionResult.status = false;\r\n           actionResult.comments =  e.getMessage();\r\n    }\r\n\r\n   }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnByepassMVR",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 286,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class OrderMVR extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tThread.sleep(2000);\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//span[text()='Name']/ancestor::div/preceding-sibling::div)[11]\"))));\n\t\t//driver.findElement(By.xpath(\"//div[text()='\"+inputValue+\"']/parent::td/preceding-sibling::td/div/img\")).click();\n             Thread.sleep(3000);\n\t\t//driver.findElement(By.xpath(\"(//span[text()='Name']/ancestor::div/preceding-sibling::div)[11]\")).click();\n              WebElement retriveMVR=driver.findElement(By.xpath(\"(//span[text()='Name']/ancestor::div/preceding-sibling::div)[11]\"));\n\t\tjs.executeScript(\"arguments[0].scrollIntoView(true);\", retriveMVR);\n             js.executeScript(\"arguments[0].click();\",retriveMVR);\n\t\tThread.sleep(1000);\n\t\tdriver.findElement(By.xpath(\"//a[contains(@id,'violationReport:orderALH')]\")).click();\n\t\tThread.sleep(4000);\n           \tactionResult.status = true;\n           \tactionResult.comments =  \"MVR ordered successfully\";\n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "OrderMVR",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1189,
    "Description": "FL State adding violation in policy change",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class AddDrivingViolations_FL extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n     \r\n    \r\n    try{\r\n       \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            \r\n            WebDriverWait wait = new WebDriverWait(driver,20);\r\n            \r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            \r\n            Actions act = new Actions(driver);\r\n            \r\n            String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n            String[] violationParams = inputValue.split(\" AND \");\r\n            String driverName = violationParams[0].toString();\r\n            String occuranceDt = violationParams[1].toString();\r\n            String convictionDt = violationParams[2].toString();\r\n            String violationDesc = violationParams[3].toString();\r\n            \r\n            /////////    Enter into Losses and Violation   ///////////\r\n            \r\n            for(int retryA =1; retryA<=5; retryA++) \r\n            {\r\n                    \r\n                try \r\n                    {   \r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'lossesAndViolationsCardTab-btnInnerEl')]\"))));\r\n                    WebElement lossedAndViolationElemt = driver.findElement(By.xpath(\"//*[contains(@id,'lossesAndViolationsCardTab-btnInnerEl')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", lossedAndViolationElemt);\r\n                                                            \r\n                    lossedAndViolationElemt.click();\r\n                    \r\n                    Thread.sleep(500);\r\n                                    \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Driver Name' has been Selected as : \"+driverName;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryA + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    Thread.sleep(3000);\r\n                                \r\n            ////////       Add Violation      ///////////////////////////////\r\n            for(int retryA =1; retryA<=5; retryA++) \r\n            {\r\n                    \r\n                try \r\n                    {   \r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violation:Add-btnInnerEl')]\"))));\r\n                    WebElement addBtn = driver.findElement(By.xpath(\"//*[contains(@id,'violation:Add-btnInnerEl')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", addBtn);\r\n                    \r\n                                        \r\n                    addBtn.click();\r\n                    Thread.sleep(1000);\r\n                                        \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"Executed\";\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryA + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    Thread.sleep(2000);\r\n                    \r\n                    ///Number of Violations///////////////\r\n                    \r\n                    int noOfViolations = driver.findElements(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table\")).size();\r\n            \r\n            \r\n            ////////       Driver Name      ///////////////////////////////\r\n            \r\n            \r\n            for(int retryA =1; retryA<=5; retryA++) \r\n            {\r\n                    \r\n                try \r\n                    {   \r\n                        WebElement driverNameEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"+noOfViolations+\"]/tbody/tr/td[2]/div[contains(text(),'none')]\"))));\r\n                    \r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", driverNameEle);\r\n                    \r\n                                        \r\n                    js.executeScript(\"arguments[0].click();\", driverNameEle);\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(driverNameEle).sendKeys(Keys.ARROW_DOWN).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(driverNameEle).sendKeys(Keys.ENTER).build().perform();\r\n                    //Thread.sleep(500);\r\n                    //js.executeScript(\"arguments[0].value='\"+driverName+\"'\",driverNameEle);\r\n                    //Thread.sleep(500);\r\n                    //act.moveToElement(driverNameEle).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(2000);\r\n                                        \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Driver Name' has been Selected as : \"+driverName;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryA + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    Thread.sleep(3000);\r\n                    \r\n                    ////////       Occurance Date        ///////////////////////////////\r\n            \r\n                for(int retryB =1; retryB<=5; retryB++) \r\n                    {\r\n                    \r\n                    try \r\n                    {   \r\n                        WebElement occuranceDtEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"+noOfViolations+\"]/tbody/tr/td[3]/div\"))));\r\n                    \r\n                    \r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", occuranceDtEle);\r\n                    \r\n                    js.executeScript(\"arguments[0].click();\", occuranceDtEle);\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(occuranceDtEle).sendKeys(occuranceDt).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(occuranceDtEle).sendKeys(Keys.ENTER).build().perform();\r\n                    Thread.sleep(1000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Occurance Date' has been Selected as : \"+occuranceDt;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryB + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    //////////   Conviction Date   //////////////////////////////\r\n                    for(int retryC =1; retryC<=5; retryC++) \r\n                    {\r\n                    \r\n                    try \r\n                    {   \r\n                    \r\n                        WebElement convictionDtEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"+noOfViolations+\"]/tbody/tr/td[4]/div\"))));\r\n                    \r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", convictionDtEle);\r\n                    js.executeScript(\"arguments[0].click();\", convictionDtEle);\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(convictionDtEle).sendKeys(convictionDt).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(convictionDtEle).sendKeys(Keys.ENTER).build().perform();\r\n                    Thread.sleep(2000);\r\n                    \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Personal Property' has been Entered as : \"+convictionDt;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryC + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    //////////   Violation Description   //////////////////////////////\r\n                    for(int retryD =1; retryD<=5; retryD++) \r\n                    {\r\n                    \r\n                    try \r\n                    {   \r\n                        \r\n                    WebElement violationDescEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table/tbody/tr/td[6]/div[contains(text(),'none')]\"))));\r\n                    \r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", violationDescEle);\r\n                    \r\n                    js.executeScript(\"arguments[0].click();\", violationDescEle);\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.ARROW_UP).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.ARROW_UP).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.ENTER).build().perform();\r\n                    Thread.sleep(500);\r\n                    //js.executeScript(\"arguments[0].value='\"+violationDesc+\"'\",violationDescEle);\r\n                    //Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(2000);\r\n                    \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Violation Description' has been Entered as : \"+violationDesc;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryD + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                            \r\n                    Thread.sleep(3000);\r\n                                                    \r\n            actionResult.comments = \"The Violation Details have been updated\" + driverName + occuranceDt + convictionDt + violationDesc;\r\n            actionResult.status = true;\r\n\r\n                }\r\n            \r\n            \r\n        catch(Exception e) {\r\n                actionResult.comments = e.getMessage();\r\n                actionResult.status = false;\r\n            }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddDrivingViolations_FL",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1191,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class AddDrivingViolations_MI extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n     \r\n    \r\n    try{\r\n       \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            \r\n            WebDriverWait wait = new WebDriverWait(driver,20);\r\n            \r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            \r\n            Actions act = new Actions(driver);\r\n            \r\n            String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n            String[] violationParams = inputValue.split(\" AND \");\r\n            String driverName = violationParams[0].toString();\r\n            String occuranceDt = violationParams[1].toString();\r\n            String convictionDt = violationParams[2].toString();\r\n            String violationDesc = violationParams[3].toString();\r\n            \r\n            /////////    Enter into Losses and Violation   ///////////\r\n            \r\n            for(int retryA =1; retryA<=5; retryA++) \r\n            {\r\n                    \r\n                try \r\n                    {   \r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'lossesAndViolationsCardTab-btnInnerEl')]\"))));\r\n                    WebElement lossedAndViolationElemt = driver.findElement(By.xpath(\"//*[contains(@id,'lossesAndViolationsCardTab-btnInnerEl')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", lossedAndViolationElemt);\r\n                                                            \r\n                    lossedAndViolationElemt.click();\r\n                    \r\n                    Thread.sleep(500);\r\n                                    \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Driver Name' has been Selected as : \"+driverName;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryA + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    Thread.sleep(3000);\r\n                                \r\n            ////////       Add Violation      ///////////////////////////////\r\n            for(int retryA =1; retryA<=5; retryA++) \r\n            {\r\n                    \r\n                try \r\n                    {   \r\n                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violation:Add-btnInnerEl')]\"))));\r\n                    WebElement addBtn = driver.findElement(By.xpath(\"//*[contains(@id,'violation:Add-btnInnerEl')]\"));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", addBtn);\r\n                    \r\n                                        \r\n                    addBtn.click();\r\n                    Thread.sleep(1000);\r\n                                        \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"Executed\";\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryA + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    Thread.sleep(2000);\r\n                    \r\n                    ///Number of Violations///////////////\r\n                    \r\n                    int noOfViolations = driver.findElements(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table\")).size();\r\n            \r\n            \r\n            \r\n            ////////       Driver Name      ///////////////////////////////\r\n            \r\n            for(int retryA =1; retryA<=5; retryA++) \r\n            {\r\n                    \r\n                try \r\n                    {   \r\n                        WebElement driverNameEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[2]/tbody/tr/td[2]/div[contains(text(),'none')]\"))));\r\n                    //WebElement driverNameEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[2]/tbody/tr/td[2]/div\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", driverNameEle);\r\n                    \r\n                                        \r\n                    js.executeScript(\"arguments[0].click();\", driverNameEle);\r\n                    Thread.sleep(500);\r\n                    //act.moveToElement(driverNameEle).sendKeys(selectText).build().perform();\r\n                    //Thread.sleep(500);\r\n                    //act.moveToElement(driverNameEle).sendKeys(Keys.ARROW_DOWN).build().perform();\r\n                    act.moveToElement(driverNameEle).sendKeys(Keys.ARROW_DOWN).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(driverNameEle).sendKeys(Keys.ENTER).build().perform();\r\n                    //Thread.sleep(500);\r\n                    //js.executeScript(\"arguments[0].value='\"+driverName+\"'\",driverNameEle);\r\n                    //Thread.sleep(500);\r\n                    //act.moveToElement(driverNameEle).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(2000);\r\n                                        \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Driver Name' has been Selected as : \"+driverName;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryA + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    Thread.sleep(3000);\r\n                    \r\n                    ////////       Occurance Date        ///////////////////////////////\r\n            \r\n                for(int retryB =1; retryB<=5; retryB++) \r\n                    {\r\n                    \r\n                    try \r\n                    {   \r\n                        WebElement occuranceDtEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"+noOfViolations+\"]/tbody/tr/td[3]/div\"))));\r\n                    \r\n                    //WebElement occuranceDtEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[2]/tbody/tr/td[3]/div\"))));\r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", occuranceDtEle);\r\n                    \r\n                    js.executeScript(\"arguments[0].click();\", occuranceDtEle);\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(occuranceDtEle).sendKeys(occuranceDt).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(occuranceDtEle).sendKeys(Keys.ENTER).build().perform();\r\n                    Thread.sleep(1000);\r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Occurance Date' has been Selected as : \"+occuranceDt;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryB + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    //////////   Conviction Date   //////////////////////////////\r\n                    for(int retryC =1; retryC<=5; retryC++) \r\n                    {\r\n                    \r\n                    try \r\n                    {   \r\n                        WebElement convictionDtEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"+noOfViolations+\"]/tbody/tr/td[4]/div\"))));\r\n    \r\n                    //WebElement convictionDtEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[2]/tbody/tr/td[4]/div\"))));\r\n                    \r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", convictionDtEle);\r\n                    js.executeScript(\"arguments[0].click();\", convictionDtEle);\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(convictionDtEle).sendKeys(convictionDt).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(convictionDtEle).sendKeys(Keys.ENTER).build().perform();\r\n                    Thread.sleep(2000);\r\n                    \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Personal Property' has been Entered as : \"+convictionDt;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryC + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                    \r\n                    //////////   Violation Description   //////////////////////////////\r\n                    for(int retryD =1; retryD<=5; retryD++) \r\n                    {\r\n                    \r\n                    try \r\n                    {   \r\n                        WebElement violationDescEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[\"+noOfViolations+\"]/tbody/tr/td[6]/div[contains(text(),'none')]\"))));\r\n                    \r\n                    //WebElement violationDescEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[2]/tbody/tr/td[6]/div[contains(text(),'none')]\"))));\r\n                    \r\n                    js.executeScript(\"arguments[0].style.border='2px solid red'\", violationDescEle);\r\n                    js.executeScript(\"arguments[0].click();\", violationDescEle);\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.ARROW_UP).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.ARROW_UP).build().perform();\r\n                    Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.ENTER).build().perform();\r\n                    Thread.sleep(500);\r\n                    //js.executeScript(\"arguments[0].value='\"+violationDesc+\"'\",violationDescEle);\r\n                    //Thread.sleep(500);\r\n                    act.moveToElement(violationDescEle).sendKeys(Keys.TAB).build().perform();\r\n                    Thread.sleep(2000);\r\n                    \r\n                    actionResult.status = true;\r\n                    actionResult.comments = \"The 'Violation Description' has been Entered as : \"+violationDesc;\r\n\r\n                    break;\r\n                    }\r\n                    catch(Exception e) {\r\n                    actionResult.comments =\"Max No. of Attepts reached : \" +retryD + \" Expection Type : \" + e.getMessage();\r\n                    actionResult.status = false;\r\n                    }\r\n                    }\r\n                            \r\n                    Thread.sleep(3000);\r\n                                                    \r\n            actionResult.comments = \"The Violation Details have been updated\" + driverName + occuranceDt + convictionDt + violationDesc;\r\n            actionResult.status = true;\r\n\r\n                }\r\n            \r\n            \r\n        catch(Exception e) {\r\n                actionResult.comments = e.getMessage();\r\n                actionResult.status = false;\r\n            }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddDrivingViolations_MI",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1252,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class AddLossesOnReportsPage extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\t\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\t\n\t\tActions act = new Actions(driver);\n\t\t\t\n\t\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\t\tString[] violationParams = inputValue.split(\" AND \");\n\t\tString driverName = violationParams[0].toString();\n\t\tString occuranceDt = violationParams[1].toString();\n\t\tString convictionDt = violationParams[2].toString();\n\t\tString violationDesc = violationParams[3].toString();\n\t\t\t\n\t\n\t\ttry{\n       \n\t\t\tThread.sleep(3000);\n\t\t\t\n\t\t\t////////       Add Violation      ///////////////////////////////\n\t\t\tfor(int retryA =1; retryA<=5; retryA++) \n\t\t\t{\n\t\t\t\t\t\n\t\t\t\ttry \n\t\t\t\t\t{\t\n\t\t\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violation:Add-btnInnerEl')]\"))));\n\t\t\t\t\tWebElement addBtn = driver.findElement(By.xpath(\"//*[contains(@id,'violation:Add-btnInnerEl')]\"));\n\t\t\t\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", addBtn);\n\t\n\t\t\t\t\taddBtn.click();\n\t\t\t\t\tThread.sleep(1000);\n\n\t\t\t\t\tactionResult.status = true;\n\t\t\t\t\tactionResult.comments = \"Executed\";\n\n\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcatch(Exception e) {\n\t\t\t\t\tactionResult.comments =\"Max No. of Attepts reached : \" +retryA + \" Expection Type : \" + e.getMessage();\n\t\t\t\t\tactionResult.status = false;\n\t\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tThread.sleep(2000);\n\t\t\t\n\t\t\t\n\t\t\t////////       Driver Name      ///////////////////////////////\n\t\t\t\n\t\t\tfor(int retryA =1; retryA<=5; retryA++) \n\t\t\t{\n\t\t\t\t\t\n\t\t\t\ttry \n\t\t\t\t\t{\t\n\t\t\t\t\t\n\t\t\t\t\tWebElement driverNameEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table/tbody/tr/td[2]/div[contains(text(),'none')]\"))));\n\t\t\t\t\t\n\t\t\t\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", driverNameEle);\n\t\t\t\t\tjs.executeScript(\"arguments[0].click();\", driverNameEle);\n\t\t\t\t\t//driverNameEle.click();\n\t\t\t\t\tThread.sleep(500);\n\t\t\t\t\tact.moveToElement(driverNameEle).sendKeys(Keys.ARROW_DOWN).build().perform();\n\t\t\t\t\tThread.sleep(350);\n\t\t\t\t\t//act.moveToElement(driverNameEle).sendKeys(Keys.ARROW_DOWN).build().perform();\n\t\t\t\t\t//Thread.sleep(500);\n\t\t\t\t\tact.moveToElement(driverNameEle).sendKeys(Keys.ENTER).build().perform();\n\t\t\t\t\tThread.sleep(1500);\t\t\t\t\t\n\t\t\t\t\tactionResult.status = true;\n\t\t\t\t\tactionResult.comments = \"The 'Driver Name' has been Selected as : \"+driverName;\n\n\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcatch(Exception e) {\n\t\t\t\t\tactionResult.comments =\"Max No. of Attepts reached : \" +retryA + \" Expection Type : \" + e.getMessage();\n\t\t\t\t\tactionResult.status = false;\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\tThread.sleep(3000);\n\n\t\t\t////////       Occurance Date        ///////////////////////////////\n\t\t\t\n\t\t\tfor(int retryB =1; retryB<=5; retryB++) \n\t\t\t{\n\t\t\t\t\ttry \n\t\t\t\t\t{\t\n\t\t\t\t\tWebElement occuranceDtEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[2]/tbody/tr/td[3]/div\"))));\n\t\t\t\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", occuranceDtEle);\n\t\t\t\t\t\n\t\t\t\t\tjs.executeScript(\"arguments[0].click();\", occuranceDtEle);\n\t\t\t\t\tThread.sleep(500);\n\t\t\t\t\tact.moveToElement(occuranceDtEle).sendKeys(occuranceDt).build().perform();\n\t\t\t\t\tThread.sleep(500);\n\t\t\t\t\tact.moveToElement(occuranceDtEle).sendKeys(Keys.ENTER).build().perform();\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\tactionResult.status = true;\n\t\t\t\t\tactionResult.comments = \"The 'Occurance Date' has been Selected as : \"+occuranceDt;\n\n\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcatch(Exception e) {\n\t\t\t\t\tactionResult.comments =\"Max No. of Attepts reached : \" +retryB + \" Expection Type : \" + e.getMessage();\n\t\t\t\t\tactionResult.status = false;\n\t\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\n\t\t\t//////////   Conviction Date   //////////////////////////////\n\t\t\tfor(int retryC =1; retryC<=5; retryC++) \n\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\ttry \n\t\t\t\t\t{\t\n\t\t\t\t\t\t\n\t\t\t\t\tWebElement convictionDtEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[2]/tbody/tr/td[4]/div\"))));\n\t\t\t\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", convictionDtEle);\n\t\t\t\t\tjs.executeScript(\"arguments[0].click();\", convictionDtEle);\n\t\t\t\t\tThread.sleep(500);\n\t\t\t\t\tact.moveToElement(convictionDtEle).sendKeys(convictionDt).build().perform();\n\t\t\t\t\tThread.sleep(500);\n\t\t\t\t\tact.moveToElement(convictionDtEle).sendKeys(Keys.ENTER).build().perform();\n\t\t\t\t\tThread.sleep(2000);\n\t\t\t\t\t\n\t\t\t\t\tactionResult.status = true;\n\t\t\t\t\tactionResult.comments = \"The 'Personal Property' has been Entered as : \"+convictionDt;\n\n\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcatch(Exception e) {\n\t\t\t\t\tactionResult.comments =\"Max No. of Attepts reached : \" +retryC + \" Expection Type : \" + e.getMessage();\n\t\t\t\t\tactionResult.status = false;\n\t\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\n\t\t\t//////////   Violation Description   //////////////////////////////\n\t\t\tfor(int retryD =1; retryD<=5; retryD++) \n\t\t\t{\n\t\t\t\ttry \n\t\t\t\t\t{\t\n\t\t\t\t\t\t\n\t\t\t\t\tWebElement violationDescEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'violationsPanel:ViolationLV-body')]/div/div/table[2]/tbody/tr/td[6]/div\"))));\n\t\t\t\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", violationDescEle);\n\t\t\t\t\t\n\t\t\t\t\tjs.executeScript(\"arguments[0].click();\", violationDescEle);\n\t\t\t\t\tThread.sleep(500);\n\t\t\t\t\tact.moveToElement(violationDescEle).sendKeys(Keys.ARROW_UP).build().perform();\n\t\t\t\t\tThread.sleep(500);\n\t\t\t\t\tact.moveToElement(violationDescEle).sendKeys(Keys.ARROW_UP).build().perform();\n\t\t\t\t\tThread.sleep(500);\n\t\t\t\t\tact.moveToElement(violationDescEle).sendKeys(Keys.ENTER).build().perform();\n\t\t\t\t\tThread.sleep(500);\n\t\t\t\t\t//js.executeScript(\"arguments[0].value='\"+violationDesc+\"'\",violationDescEle);\n\t\t\t\t\t//Thread.sleep(500);\n\t\t\t\t\tact.moveToElement(violationDescEle).sendKeys(Keys.TAB).build().perform();\n\t\t\t\t\tThread.sleep(2000);\n\t\t\t\t\t\n\t\t\t\t\tactionResult.status = true;\n\t\t\t\t\tactionResult.comments = \"The 'Violation Description' has been Entered as : \"+violationDesc;\n\n\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcatch(Exception e) {\n\t\t\t\t\tactionResult.comments =\"Max No. of Attepts reached : \" +retryD + \" Expection Type : \" + e.getMessage();\n\t\t\t\t\tactionResult.status = false;\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\tThread.sleep(3000);\n\t\n\t\t\tactionResult.comments = \"The Violation Details have been updated\" + driverName + occuranceDt + convictionDt + violationDesc;\n\t\t\tactionResult.status = true;\n\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\tcatch(Exception e) \n\t\t\t{\n\t\t\t\tactionResult.comments = e.getMessage();\n\t\t\t\tactionResult.status = false;\n\t\t\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddLossesOnReportsPage",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 289,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class OrderMVR_Copy extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\t\tdriver.findElement(By.xpath(\"(//span[text()='Name']/ancestor::div/preceding-sibling::div)[11]\")).click();\n\t\tThread.sleep(1000);\n\t\tdriver.findElement(By.xpath(\"//a[contains(@id,'violationReport:orderALH')]\")).click();\n\t\tThread.sleep(2000);\n           \tactionResult.status = true;\n           \tactionResult.comments =  \"MVR ordered successfully\";\n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "OrderMVR_Copy",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 960,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class LogoutFromPolicyCenter extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\t\t\n\t\tThread.sleep(5000);\n\t\tdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n\t\tWebDriverWait wait=new WebDriverWait(driver,20);\n\n\t\tWebElement systemIcon=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//a[contains(@id,':TabLinkMenuButton')]\")));\n\t\t//WebElement systemIcon=driver.findElement(By.xpath(\"//a[contains(@id,':TabLinkMenuButton')]\"));\n\t\tJavascriptExecutor executor = (JavascriptExecutor)driver;\n\t\texecutor.executeScript(\"arguments[0].click();\", systemIcon);\n\t\t//systemIcon.click();\n\t\tThread.sleep(5000);\n\t\tWebElement logOut=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//a[@id='TabBar:LogoutTabBarLink-itemEl']\")));\n\t\t//driver.findElement(By.xpath(\"//a[@id='TabBar:LogoutTabBarLink-itemEl']\"));\n\t\t\n\t\tlogOut.click();\n\t\tThread.sleep(2000);\n\t\tactionResult.status = true;\n\t\tactionResult.comments =  \"Logged Out from policy Center\";\n\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "LogoutFromPolicyCenter",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1,
    "ProjectId": 1,
    "Key": "GDT_GWEnv_URL",
    "Value": "https://citipxyvip01.aaa-acg.net/aba/agentbrowser/",
    "GlobalSheetId": null,
    "IsEncrypted": false,
    "Name": null,
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 2420,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ClickLogOutFromFooter extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        for(int i =1; i<=5; i++) \r\n        {\r\n        try \r\n        {           \r\n           WebDriverWait wait = new WebDriverWait(driver,30);\r\n           JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Thread.sleep(3000);\r\n        //WebElement systemIcon = driver.findElement(By.xpath(\"//*[contains(@id,'largeMenuTrigger')]\"));\r\n        //systemIcon.click();\r\n        Thread.sleep(5000);\r\n        // if(driver.findElements(By.xpath(\"(//a[text()='Logout'])[2]\")).size()>0){\r\n        //driver.findElement(By.xpath(\"(//a[text()='Logout'])[2]\")).click();\r\n        if(driver.findElements(By.xpath(\"//a[text()='Logout']\")).size()>0){\r\n        driver.findElement(By.xpath(\"//a[text()='Logout']\")).click();\r\n        Thread.sleep(2000);\r\n        driver.navigate().refresh();\r\n         WebElement here = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//a[text()='here']\")));\r\n        js.executeScript(\"arguments[0].click();\",here);\r\n        // driver.findElement(By.xpath(\"//a[text()='here']\")).click();\r\n        driver.get(\"https://www.google.com\");\r\n        }\r\n        actionResult.status = true;\r\n        actionResult.comments =  \"Logged Out\";\r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickLogOutFromFooter",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 9,
    "ProjectId": 1,
    "Key": "GDT_GWEnv_UW_Username",
    "Value": "p77190",
    "GlobalSheetId": null,
    "IsEncrypted": false,
    "Name": null,
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 22,
    "ProjectId": 1,
    "Key": "GDT_GWEnv_UW_Password",
    "Value": "password123",
    "GlobalSheetId": null,
    "IsEncrypted": false,
    "Name": null,
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 956,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions; \nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ClickPolicyTab extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\tWebElement elem = driver.findElement(By.xpath(\"//span[@id='TabBar:PolicyTab-btnInnerEl']\"));\n\t\tActions act = new Actions(driver);\n\t\tact.moveToElement(elem).moveByOffset(40,0).click().build().perform();\n\n\t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\"; \n\t\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickPolicyTab",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1039,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.StaleElementReferenceException;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Bindingagent_Producercode extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\t\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\t\t\n\t\tdriver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS); \n       \tWebDriverWait wait=new WebDriverWait(driver,15);\n\t\tWebElement producer= wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//input[contains(@id,'ProducerCode4-inputEl')]\"))));\n\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\tproducer.sendKeys(s);\n\t\tproducer.sendKeys(Keys.DELETE);\n\n\t\tActions act = new Actions(driver);\n\t\tact.sendKeys(producer,inputValue).build().perform();\n        Thread.sleep(2000);\n\t\tproducer.sendKeys(Keys.TAB);\n\n      \tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\";  \n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Bindingagent_Producercode",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 73,
    "Description": "Searching and selecting the required Organization Name on Create Account screen.",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectOrgNameAndProducerCode_Bindingagent extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++)\r\n{\r\n    try{\r\n    \r\n        String[] orgProducerCodeParams = inputValue.split(\" AND \");\r\n        String organizationName = orgProducerCodeParams[0].toString();\r\n        String ProducerCode = orgProducerCodeParams[1].toString();\r\n        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n        WebDriverWait wait = new WebDriverWait(driver,20);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        Actions act = new Actions(driver);\r\n        String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//div[contains(@id,'Producer1:SelectOrganization')]\"))));\r\n            WebElement searchOrgEle = driver.findElement(By.xpath(\"//div[contains(@id,'Producer1:SelectOrganization')]\"));\r\n            js.executeScript(\"arguments[0].click();\",searchOrgEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'OrganizationSearchPopupScreen:ttlBar')]\"))));\r\n            WebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'OrganizationSearchPopupScreen:ttlBar')]\"));\r\n            String actPageTitle = pageTitleEle.getText();\r\n            if(actPageTitle.equals(\"Organizations\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Organizations' Screen has been displayed\";\r\n            }\r\n            else{\r\n                actionResult.status = false;\r\n                actionResult.comments =  \"The 'Organizations' Screen not displayed\";\r\n            }\r\n            \r\n            WebElement OrgTxtEle = driver.findElement(By.xpath(\"//input[contains(@id,'OrganizationSearchDV:GlobalContactNameInputSet:Name-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",OrgTxtEle);\r\n            OrgTxtEle.sendKeys(organizationName);\r\n            \r\n            WebElement searchBtnEle = driver.findElement(actionResult.element(359));\r\n            js.executeScript(\"arguments[0].click();\",searchBtnEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'OrganizationSearchResultsLV:0:_Select')]\"))));\r\n            WebElement selectOrgBtnEle = driver.findElement(By.xpath(\"//a[contains(@id,'OrganizationSearchResultsLV:0:_Select')]\"));\r\n            js.executeScript(\"arguments[0].click();\",selectOrgBtnEle);\r\n            Thread.sleep(2000);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'Screen:ttlBar')]\"))));\r\n            WebElement pageTitleEle1 = driver.findElement(By.xpath(\"//span[contains(@id,'Screen:ttlBar')]\"));\r\n            String actPageTitle1 = pageTitleEle1.getText();\r\n            if(actPageTitle1.equals(\"Create account\") || actPageTitle1.equals(\"New Submissions\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Create account' Screen has been displayed\";\r\n            }\r\n            else{\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"The 'Create account' Screen not displayed\";\r\n            }\r\n            \r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'ProducerCode4-inputEl')]\"))));\r\n            WebElement producerCodeEle = driver.findElement(By.xpath(\"//input[contains(@id,'ProducerCode4-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",producerCodeEle);\r\n            producerCodeEle.sendKeys(selectText);\r\n            Thread.sleep(1000);\r\n            producerCodeEle.sendKeys(Keys.DELETE);\r\n            Thread.sleep(500);\r\n            producerCodeEle.sendKeys(ProducerCode);\r\n            producerCodeEle.sendKeys(Keys.ENTER);\r\n            Thread.sleep(1000);\r\n\r\n            actionResult.status = true;\r\n            actionResult.comments =  \"The required 'Organization' and 'Producer Code' have been selected\";\r\n \r\n        \r\n    break;\r\n    }\r\ncatch(Exception e) {\r\nactionResult.comments = \"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\nactionResult.status   = true;\r\n}\r\n}\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectOrgNameAndProducerCode_Bindingagent",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1049,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ClickReportTab extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tWebElement reportTab;\n   \t\treportTab = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//*[@id='SubmissionWizard:LOBWizardStepGroup:Reports_Acg']//div//span[text()='Reports']\")));\n\n\t\t//js.executeScript(\"arguments[0].style.border='2px solid red'\", nextBtnEle);\n\t\tjs.executeScript(\"arguments[0].click();\",reportTab);\n\t\tactionResult.status = true;\n      \tactionResult.comments =  \"Clicked On button\";\n\n\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickReportTab",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 225,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyVehiclesPage extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n      \nfor(int i =1; i<=5; i++)\n{\n\ttry{\n\t\n\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\t\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//span[contains(@id,'PAVehiclesScreen:ttlBar')]\")));\n\n\t\tWebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'PAVehiclesScreen:ttlBar')]\")); \n\n\t\t//wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'PAVehiclesScreen:ttlBar')]\"))));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"Vehicles\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Vehicles' screen successfully\";\n\t\t}\n\t\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyVehiclesPage",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 247,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class Quote2SelectNamedInsured extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\n\tdriver.manage().timeouts().implicitlyWait(150, TimeUnit.SECONDS);\n\tWebDriverWait wait = new WebDriverWait(driver,40);\n\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\tActions act = new Actions(driver);\n\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\n\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:TitleHolderName-inputEl')]\"))));\n\t\t\tWebElement VehicleNamedInsuredEle = driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:TitleHolderName-inputEl')]\"));\n\t\t\tjs.executeScript(\"arguments[0].click();\",VehicleNamedInsuredEle);\n\t\t\tVehicleNamedInsuredEle.sendKeys(selectText);\n\t\t\tThread.sleep(2000);\n\t\t\tVehicleNamedInsuredEle.sendKeys(Keys.DELETE);\n\t\t\tThread.sleep(2000);\n\t\t\tVehicleNamedInsuredEle.sendKeys(inputValue);\n\t\t\tVehicleNamedInsuredEle.sendKeys(Keys.ENTER);\n\t\t\t//VehicleNamedInsuredEle.sendKeys(Keys.TAB);\n\t\t\tThread.sleep(2000);\n\t\t\t//js.executeScript(\"arguments[0].click()\",vehicleDetailsTabEle);\n\t\t\t//Thread.sleep(1000);\n\n\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"The Named Insured has been selected on Vehicle screen\";\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Quote2SelectNamedInsured",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 224,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ExistingDamageDROPDOWN extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ntry{\n\n\n\t\tWebElement existingDamageEle=driver.findElement(By.xpath(\"//input[contains(@id,'VehicleDV:ExistingDamage-inputEl')]\"));\n\t\tString s=Keys.chord(Keys.CONTROL,\"a\");\n\t\texistingDamageEle.sendKeys(s);\n\t\texistingDamageEle.sendKeys(Keys.DELETE);\n\n\t\tActions act = new Actions(driver);\n\t\tact.sendKeys(existingDamageEle,inputValue).build().perform();\n\t\texistingDamageEle.sendKeys(Keys.ENTER);\n\n\n      \t\tactionResult.status = true;\n\t\tactionResult.comments = \"Executed Successfully\"; \n\n\n\t}\n\tcatch(Exception e){\n\n\t\tactionResult.status = false;\n              actionResult.comments =  e.getMessage();\n\t}\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ExistingDamageDROPDOWN",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1134,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class NameInsuredOrSpouse extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n      \r\n    WebDriverWait wait = new WebDriverWait(driver,30);  \r\n    JavascriptExecutor js = (JavascriptExecutor)driver;\r\n    String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n    Actions act = new Actions(driver);\r\n\r\n    for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {\r\n        WebElement nameInsuredOrSpouseYes = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'IsVehicleRegistered_true-inputEl')]\"))));\r\n        js.executeScript(\"arguments[0].setAttribute('style', 'border:2px solid red; background:yellow')\", nameInsuredOrSpouseYes);\r\n        js.executeScript(\"arguments[0].click();\",nameInsuredOrSpouseYes);\r\n        Thread.sleep(3000);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"))));\r\n        WebElement nameInsuredOrSpouse = driver.findElement(By.xpath(\"//input[contains(@id,'TitleHolderName-inputEl')]\"));\r\n        js.executeScript(\"arguments[0].setAttribute('style', 'border:2px solid red; background:yellow')\", nameInsuredOrSpouse);\r\n        js.executeScript(\"arguments[0].click();\",nameInsuredOrSpouse);\r\n        nameInsuredOrSpouse.sendKeys(selectText);\r\n        act.moveToElement(nameInsuredOrSpouse).sendKeys(Keys.DELETE).build().perform();\r\n        js.executeScript(\"arguments[0].scrollIntoView(true);\", nameInsuredOrSpouse);\r\n        js.executeScript(\"arguments[0].value='\"+inputValue+\"'\",nameInsuredOrSpouse);\r\n        //act.moveToElement(nameInsuredOrSpouse).sendKeys(Keys.ENTER).build().perform();\r\n        act.moveToElement(nameInsuredOrSpouse).sendKeys(Keys.TAB).build().perform();\r\n        \r\n        actionResult.status = true;\r\n        actionResult.comments = \"The Value for the Field has been Selected as : \"+inputValue;\r\n\r\n        break;\r\n\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "NameInsuredOrSpouse",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 356,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyMIPIPCoverageScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++)\n{\ntry\n{\n\n\nWebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'PIPHouseholdScreen:0')]\"));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"MI PIP Coverage\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'MI PIP Coverage' screen successfully\";\n\t\n\n\n\nbreak;\n}}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyMIPIPCoverageScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1233,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport java.util.List;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class SelectHealthPlan_MIPIP extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\nfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n\t\t\t\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\t\tActions act = new Actions(driver);\n\t\t\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\t\n                     wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[contains(@id,'PIPHouseholdScreen:HouseholdTableLV-body')]//table[1]//td[3]/div\"))));\n\t\t\t WebElement healthPlan = driver.findElement(By.xpath(\"//*[contains(@id,'PIPHouseholdScreen:HouseholdTableLV-body')]//table[1]//td[3]/div\"));\n                     WebElement healthPlan2 = driver.findElement(By.xpath(\"//*[contains(@id,'PIPHouseholdScreen:HouseholdTableLV-body')]//table[2]//td[3]/div\"));\n\n\t\t\tString healthPlanValue = healthPlan.getText();\n\t\t\tString healthPlanValue2 = healthPlan2.getText();\nSystem.out.println(\"healthPlan = \"+healthPlanValue+\" And healthPlan2 = \"+healthPlanValue2);\n\n\n\t\t\tif(healthPlanValue.contains(\"none\")){\n                     js.executeScript(\"arguments[0].click();\",healthPlan);\n\n                     Thread.sleep(1000);\n\t\n\t              act.moveToElement(driver.findElement(By.xpath(\"//div//li[contains(text(),'Medicaid')]\"))).click().build().perform();\n                     Thread.sleep(2000);\n\t\t\t\n                     actionResult.status = true;\n           \t\tactionResult.comments =  \"Health plan is selected as Medicaid\";\n}\n\n\tif(healthPlanValue2.contains(\"none\")){\n                     js.executeScript(\"arguments[0].click();\",healthPlan2);\n\n                     Thread.sleep(1000);\n\t\n\t              act.moveToElement(driver.findElement(By.xpath(\"//div//li[contains(text(),'Medicaid')]\"))).click().build().perform();\n                     Thread.sleep(2000);\n\t\t\t\n                     actionResult.status = true;\n           \t\tactionResult.comments =  \"Health plan is selected as Medicaid\";\n}\n\n\n\n                 \t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(actionResult.element(82))));\n\t\t\tWebElement nextBtnEle = driver.findElement(actionResult.element(82));\n\t\t\tjs.executeScript(\"arguments[0].click();\", nextBtnEle);\n\t\t\tThread.sleep(3000);\n\n\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"The 'MI PIP Coverage' details have been added successfully\";\n\t\t\n\t\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectHealthPlan_MIPIP",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 367,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyPACoveragesScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++)\n{\ntry\n{\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tActions act = new Actions(driver);\n\t\t\n        Thread.sleep(5000);\n\t\t//WebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:ttlBar')]\"));\n\t\t//String actPageTitle = pageTitleEle.getText();\n\t\t\t\n\t\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:ttlBar')]\"))));\n\t\t\tString actPageTitle = driver.findElement(By.xpath(\"//span[contains(@id,'PersonalAutoScreen:ttlBar')]\")).getText();\n\t\tThread.sleep(2000);\n\t\tif(actPageTitle.equals(\"PA Coverages\") || actPageTitle.equals(\"Auto Coverages\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'PA Coverages' screen successfully\";\n\t\t}\n\n\n\n\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyPACoveragesScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 369,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyPlanandDiscountTabOpened extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \nfor(int i =1; i<=5; i++)\n{\n\ttry{\n\t\nWebElement PlanandDiscountTabEle = driver.findElement(By.xpath(\"//a[contains(@id,'planAndDiscountTab')]\"));\n\t\tPlanandDiscountTabEle.click();\n\t\tThread.sleep(3000);\n\t\tString getPlanandDiscountTabIndex = driver.findElement(By.xpath(\"//a[contains(@id,'planAndDiscountTab')]\")).getAttribute(\"tabindex\");\n\t\tif(getPlanandDiscountTabIndex.equals(\"0\")){\n\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"User is on 'Plan and Discount Tab' in Drivers screen\";\n\t\t}\n\t\telse{\n           \t\tactionResult.status = false;\n\t\t\tactionResult.comments =  \" 'Plan and Discount Tab' is not opened\";\n\t\t}\n\n\t\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}  \n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyPlanandDiscountTabOpened",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1015,
    "Description": "To Change the payment plan in coverages page\r\nDatasheet Parameter Syntax : Plan AND PaymentOptions\r\nExample : Ultimate AND PAY1",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.StaleElementReferenceException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\n\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class paymentPlanSelection extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    try\r\n        {\r\n            \r\n            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n            WebDriverWait wait = new WebDriverWait(driver,20);\r\n            JavascriptExecutor js = (JavascriptExecutor)driver;\r\n            Actions act = new Actions(driver);\r\n            String selectText=Keys.chord(Keys.CONTROL,\"a\");\r\n            String[] paymentPlans = inputValue.split(\"AND\");\r\n            String plan = paymentPlans[0].toString().trim();\r\n            String paymentOptions = paymentPlans[1].toString().trim();\r\n            \r\n            \r\n        for(int i =1; i<=5; i++) \r\n        {\r\n        try \r\n        {   \r\n            Thread.sleep(250);\r\n            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//input[contains(@id,'planType-inputEl')]\"))));\r\n            WebElement planEle = driver.findElement(By.xpath(\"//input[contains(@id,'planType-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",planEle);\r\n            planEle.sendKeys(selectText);\r\n            Thread.sleep(750);\r\n            planEle.sendKeys(Keys.DELETE);\r\n            Thread.sleep(750);\r\n            driver.findElement(By.xpath(\"//input[contains(@id,'planType-inputEl')]\")).sendKeys(plan);\r\n            //planEle.sendKeys(Keys.ENTER);\r\n            planEle.sendKeys(Keys.TAB);\r\n            Thread.sleep(4000);\r\n            if( driver.findElements(By.xpath(\"//span[text()='OK']\")).size()>0){\r\n            \r\n            driver.findElement(By.xpath(\"//span[text()='OK']\")).click();\r\n            \r\n            Thread.sleep(2000);\r\n            }\r\n            \r\n            \r\n        \r\n            break;\r\n        }\r\n        catch(StaleElementReferenceException e) \r\n        {\r\n            actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n            actionResult.status = false;\r\n        }\r\n        }\r\n        \r\n            Thread.sleep(750);\r\n            //wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[text()='OK']\"))));\r\n            //WebElement okBtnEle = driver.findElement(By.xpath(\"//span[text()='OK']\"));\r\n            //js.executeScript(\"arguments[0].click();\", okBtnEle);\r\n            //Thread.sleep(500);\r\n            \r\n        for(int i =1; i<=5; i++) \r\n        {\r\n        try \r\n        {           \r\n            Thread.sleep(1000);\r\n            WebElement paymentOptionEle = driver.findElement(By.xpath(\"//input[contains(@id,'paymentType-inputEl')]\"));\r\n            js.executeScript(\"arguments[0].click();\",paymentOptionEle);\r\n            paymentOptionEle.sendKeys(selectText);\r\n            Thread.sleep(1000);\r\n            paymentOptionEle.sendKeys(Keys.DELETE);\r\n            Thread.sleep(750);\r\n            driver.findElement(By.xpath(\"//input[contains(@id,'paymentType-inputEl')]\")).sendKeys(paymentOptions);\r\n            paymentOptionEle.sendKeys(Keys.ENTER);\r\n            paymentOptionEle.sendKeys(Keys.TAB);        \r\n\r\n            actionResult.status = true;\r\n                actionResult.comments =  \"The Payment Plans details have been Changed successfully\";\r\n        \r\n            break;\r\n        }\r\n        catch(StaleElementReferenceException e) \r\n        {\r\n            actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n            actionResult.status = false;\r\n        }\r\n        }       \r\n        \r\n        }\r\n    catch(Exception e)\r\n        {\r\n            actionResult.status = false;\r\n            actionResult.comments =  \"The Payment Plans details have Not been Changed successfully\"+e.getMessage();\r\n\r\n        }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n          return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "paymentPlanSelection",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 415,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyRiskAnalysisScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\tfor(int i =1; i<=5; i++)\n{\n\ttry{\n\t\t\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//span[contains(@id,'Job_RiskAnalysisScreen:0')]\")));\n\t\tWebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'Job_RiskAnalysisScreen:0')]\"));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"Risk Analysis\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Risk Analysis' screen successfully\";\n\t\t}\n\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\t\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyRiskAnalysisScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 274,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyPolicyReviewScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n   \n  for(int i =1; i<=5; i++)\n{\n\ttry{\n\t\t\t\n\t\t\tWebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'PolicyReviewScreen:ttlBar')]\"));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"Policy Review\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Policy Review' screen successfully\";\n\t\t}\n\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyPolicyReviewScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1042,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyQuoteScreenVisible extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \nfor(int i =1; i<=5; i++)\n{\n\ttry{\n\t\n driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);\n\n              WebDriverWait wait=new WebDriverWait(driver,30);\n\t\tWebElement pageTitleEle = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'QuoteScreen:ttlBar')]\"))));\n\n\n\t\t//WebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'QuoteScreen:ttlBar')]\"));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"Quote\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Quote' screen successfully\";\n\t\t}\n\n\t\nbreak;\n}\ncatch(Exception e) {\nactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\nactionResult.status = false;\n}\n}\n\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyQuoteScreenVisible",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 2,
    "ProjectId": 1,
    "Key": "GDT_GWEnv_Username",
    "Value": "p77832",
    "GlobalSheetId": null,
    "IsEncrypted": false,
    "Name": null,
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 3,
    "ProjectId": 1,
    "Key": "GDT_GWEnv_Password",
    "Value": "password123",
    "GlobalSheetId": null,
    "IsEncrypted": false,
    "Name": null,
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1080,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 15538,
        "StepNumber": 1,
        "Description": "Clear Existing Num",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id, 'AgeLicensedInUS-inputEl')]",
        "ActionId": 8,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15535,
        "StepNumber": 2,
        "Description": "Enter Age License",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id, 'AgeLicensedInUS-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15540,
        "StepNumber": 3,
        "Description": "SelectGenderMeemicPI",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": 2336,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15541,
        "StepNumber": 4,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15542,
        "StepNumber": 5,
        "Description": "Clear DOB",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id, 'DateOfBirth-inputEl')]",
        "ActionId": 8,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15543,
        "StepNumber": 6,
        "Description": "Enter DOB",
        "LocatorTypeId": 7,
        "Locator": "//input[contains(@id, 'DateOfBirth-inputEl')]",
        "ActionId": 43,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15536,
        "StepNumber": 7,
        "Description": "ClickOnNextBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 877,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15539,
        "StepNumber": 8,
        "Description": "AjaxWait_Copy",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 925,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 15537,
        "StepNumber": 9,
        "Description": "ClickOnSaveBtn",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 911,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "DriverAgeLicense",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 2336,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class SelectGenderMeemicPI extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\nActions act = new Actions(driver);\r\n\r\n    for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {           \r\n            WebElement gender = driver.findElement(By.xpath(\"//input[contains(@id,'GlobalPersonNameInputSet:Gender-inputEl')]\"));\r\n        String s=Keys.chord(Keys.CONTROL,\"a\");\r\n        gender.sendKeys(s);\r\n        gender.sendKeys(Keys.DELETE);\r\n        gender.sendKeys(inputValue);\r\n        act.moveToElement(gender).sendKeys(Keys.ENTER).build().perform();\r\n        act.moveToElement(gender).sendKeys(Keys.TAB).build().perform();\r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\";\r\n    \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectGenderMeemicPI",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 911,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ClickOnSaveBtn extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        try \r\n        {   \r\n            \r\n        WebElement nextBtnEle;\r\n        \r\n        driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\r\n        WebDriverWait wait = new WebDriverWait(driver,30);\r\n        Thread.sleep(2000);\r\n        nextBtnEle = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//span[text()='ave Draft']\")));\r\n\r\n        //nextBtnEle=driver.findElement(actionResult.element(14));\r\n        //wait.until(ExpectedConditions.elementToBeClickable(nextBtnEle));\r\n\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        js.executeScript(\"arguments[0].style.border='2px solid red'\", nextBtnEle);\r\n        js.executeScript(\"arguments[0].click();\",nextBtnEle);\r\n        \r\n        actionResult.status   = true;\r\n        actionResult.comments = \"Clicked On SAVE button\";\r\n        //break;    \r\n        \r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }       \r\n    \r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnSaveBtn",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 53,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 6100,
        "StepNumber": 1,
        "Description": "VerifyPaymentScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 459,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6104,
        "StepNumber": 2,
        "Description": "ClickManageAndAcceptAlert",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 462,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6106,
        "StepNumber": 3,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": "2",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6105,
        "StepNumber": 4,
        "Description": "ClickOnCreditCardTab",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 465,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6098,
        "StepNumber": 5,
        "Description": "Click on Credit Card",
        "LocatorTypeId": 7,
        "Locator": "//a[contains(text(),'Credit Card')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6107,
        "StepNumber": 6,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": "3",
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6099,
        "StepNumber": 7,
        "Description": "Enter Card Number",
        "LocatorTypeId": 7,
        "Locator": "//*[@id=\"creditaccno\"]",
        "ActionId": 43,
        "ParameterName": "P_1_Credit_Card_Number",
        "ParameterValue": "DT_CreditCardNumber",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 10,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6101,
        "StepNumber": 8,
        "Description": "SelectExpiryYear",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 501,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6102,
        "StepNumber": 9,
        "Description": "SelectExpiryMonth",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 500,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6108,
        "StepNumber": 10,
        "Description": "Current_CreditCard_Expiry_Month_Year",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 922,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6109,
        "StepNumber": 11,
        "Description": "Future_CreditCard_Expiry_Month_Year",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 924,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6103,
        "StepNumber": 12,
        "Description": "ClickOnSaveBtnOnPaymentCollectionScreen",
        "LocatorTypeId": 7,
        "Locator": "//button[contains(text(), 'Save')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Manage_Payments_Check",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 459,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class VerifyPaymentScreen extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\n    \r\n    try{\r\n    \r\n        WebDriverWait wait = new WebDriverWait(driver,30);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n              Thread.sleep(5000);\r\n        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"(//span[text()='Payment'])[1]\"))));\r\n            WebElement PaymentTabEle = driver.findElement(By.xpath(\"(//span[text()='Payment'])[1]\"));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", PaymentTabEle);\r\n            js.executeScript(\"arguments[0].click();\",PaymentTabEle);\r\n            Thread.sleep(2000);\r\n        wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[contains(@id,'PaymentScreen:ttlBar')]\"))));\r\n        WebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'PaymentScreen:ttlBar')]\"));\r\n        String actPageTitle = pageTitleEle.getText();\r\n        if(actPageTitle.equals(\"Payment\")){\r\n                actionResult.status = true;\r\n                actionResult.comments =  \"Naviagted to 'Payment' screen successfully\";\r\n        }\r\n\r\n\r\n    }   \r\n    catch(Exception e) {\r\n        actionResult.comments = \"Expection Type : \" + e.getMessage();\r\n        actionResult.status   = false;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyPaymentScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 462,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport org.openqa.selenium.Alert;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class ClickManageAndAcceptAlert extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        \r\n        try{\r\n        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\r\n\r\n        WebDriverWait wait = new WebDriverWait(driver,40);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n        WebElement CCManageEle;\r\n        CCManageEle = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(@id,'PaymentScreen:BillingAdjustmentsDV:AddNew') or contains(@id,'PaymentScreen:BillingAdjustmentsDetailsDV:AddNew')]\"))));\r\n        js.executeScript(\"arguments[0].style.border='2px solid red'\", CCManageEle);\r\n        js.executeScript(\"arguments[0].click();\",CCManageEle);\r\n        \r\n        if(wait.until(ExpectedConditions.alertIsPresent()) == null){\r\n            System.out.println(\"NO Alerts to handle\");\r\n        }else{\r\n        Thread.sleep(3000);     \r\n        Alert accpt = driver.switchTo().alert();\r\n        accpt.accept();\r\n        Thread.sleep(3000); \r\n        }\r\n        actionResult.status   = true;\r\n        actionResult.comments = \"Clicked on 'Manage' button and Accepted the Alert\";\r\n        }\r\n    catch(Exception e){\r\n        actionResult.status   = true;\r\n        actionResult.comments = \" Expection Type : \" + e.getMessage();\r\n    }\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickManageAndAcceptAlert",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 465,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport org.openqa.selenium.support.ui.FluentWait;\nimport org.openqa.selenium.support.ui.Wait;\nimport com.google.common.base.Function;\nimport groovy.time.Duration;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ClickOnCreditCardTab extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ttry{\n\t\tdriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tActions act = new Actions(driver);\n\t\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\t\t\t\n\t\twait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//a[contains(text(),'Credit Card')]\"))));\n\t\tWebElement creditCardTabEle = driver.findElement(By.xpath(\"//a[contains(text(),'Credit Card')]\"));\n\t\tjs.executeScript(\"arguments[0].click()\",creditCardTabEle);\n\t\tThread.sleep(3000);\n\t\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"Clicked on 'Credit Card Tab'\";\n\t\n\t}\n\tcatch(Exception e){\n\t\tactionResult.status = false;\n           \tactionResult.comments =  e.getMessage();\n\n\t}\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnCreditCardTab",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 501,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class SelectExpiryYear extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\ttry{\t\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//select[@name='expyear']\")));\n\t\tWebElement expiryMonthEle;\n\t\texpiryMonthEle=driver.findElement(By.xpath(\"//select[@name='expyear']\"));\n\t\tSelect selectExpMonth = new Select(expiryMonthEle);\n\t\tThread.sleep(750);\n\t\tselectExpMonth.selectByVisibleText(inputValue); \n           \tactionResult.status = true;\n           \tactionResult.comments =  \"Credit Card Exiry Month has been selected\";\n\t\t\n\t}\n\tcatch(Exception e){\n           actionResult.status = false;\n           actionResult.comments =  e.getMessage();\n\t}\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectExpiryYear",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 500,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class SelectExpiryMonth extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ttry{\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\t\t\t\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//select[@name='expmonth']\")));\n\t\tWebElement expiryMonthEle;\n\t\texpiryMonthEle=driver.findElement(By.xpath(\"//select[@name='expmonth']\"));\n\t\tSelect selectExpMonth = new Select(expiryMonthEle);\n\t\tThread.sleep(750);\n\t\tselectExpMonth.selectByVisibleText(inputValue);\n           \tactionResult.status = true;\n           \tactionResult.comments =  \"Credit Card Exiry Month has been selected\";\n\t\t\n\t}\n\tcatch(Exception e){\n           actionResult.status = false;\n           actionResult.comments =  e.getMessage();\n\t}\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectExpiryMonth",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 922,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.text.SimpleDateFormat;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Current_CreditCard_Expiry_Month_Year extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\nfor(int i =1; i<=5; i++) \r\n    {       \r\n        try \r\n        {   \r\n         \r\n         WebDriverWait wait=new WebDriverWait(driver, 20);\r\n         SimpleDateFormat dateFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n         Date currentDate            = new Date();\r\n         String todaysDate           = dateFormat.format(currentDate);\r\n         \r\n         \r\n         \r\n         \r\n         //actionResult.getDTParameter(\"DT_EffectiveDate\",effectiveDate);\r\n         String[] dateArray = todaysDate.split(\"/\");\r\n        String month = dateArray[0].toString();\r\n        String year = dateArray[2].toString();\r\n        \r\n        \r\n              \r\n        \r\n        System.out.println(\"Current Month is....\"+month);\r\n        System.out.println(\"Current Year is....\"+year);\r\n        \r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//select[@name='expmonth']\")));\r\n        WebElement expiryMonthEle;\r\n        expiryMonthEle=driver.findElement(By.xpath(\"//select[@name='expmonth']\"));\r\n        Select selectExpMonth = new Select(expiryMonthEle);\r\n        Thread.sleep(1000);\r\n        selectExpMonth.selectByVisibleText(month);\r\n        \r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//select[@name='expyear']\")));\r\n        WebElement expiryYearEle;\r\n        expiryYearEle        = driver.findElement(By.xpath(\"//select[@name='expyear']\"));\r\n        Select selectExpYear = new Select(expiryYearEle);\r\n        Thread.sleep(1000);\r\n        selectExpYear.selectByVisibleText(year); \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"Current Credit Card Expiry Month and Year entered\";\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Current_CreditCard_Expiry_Month_Year",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 924,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.*;\r\nimport java.text.SimpleDateFormat;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class Future_CreditCard_Expiry_Month_Year extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n         \r\n         for(int i =1; i<=5; i++) \r\n         {       \r\n        try \r\n        {   \r\n         \r\n         WebDriverWait wait          = new WebDriverWait(driver, 20);\r\n         SimpleDateFormat dateFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n         Date currentDate            = new Date();\r\n         String todaysDate           = dateFormat.format(currentDate);\r\n         int nextYearValue           = 0;\r\n         int nextMonthValue          = 0;\r\n         String expectednextMonth;\r\n         String expectednextYear;\r\n        String[] dateArray = todaysDate.split(\"/\");\r\n        String month = dateArray[0].toString();\r\n        String year = dateArray[2].toString();\r\n        \r\n        int monthValue = Integer.parseInt(month);\r\n        int yearValue  = Integer.parseInt(year);\r\n        if(monthValue+1>12){\r\n        \r\n             nextYearValue  = yearValue+1;\r\n             nextMonthValue = 1;\r\n             \r\n            }else{\r\n            \r\n                nextYearValue  = yearValue;\r\n                nextMonthValue = monthValue+1;\r\n            \r\n            }\r\n        if(nextMonthValue<10){\r\n              String nextMonth  = Integer.toString(nextMonthValue);\r\n              expectednextMonth = \"0\"+nextMonth;\r\n              expectednextYear  = Integer.toString(nextYearValue);\r\n          }else{\r\n            expectednextMonth  = Integer.toString(nextMonthValue);\r\n            expectednextYear  = Integer.toString(nextYearValue);\r\n            \r\n          } \r\n        \r\n        System.out.println(expectednextMonth);\r\n         System.out.println(expectednextYear);\r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//select[@name='expmonth']\")));\r\n        WebElement expiryMonthEle;\r\n        expiryMonthEle=driver.findElement(By.xpath(\"//select[@name='expmonth']\"));\r\n        Select selectExpMonth = new Select(expiryMonthEle);\r\n        Thread.sleep(1000);\r\n        selectExpMonth.selectByVisibleText(expectednextMonth);\r\n        \r\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//select[@name='expyear']\")));\r\n        WebElement expiryYearEle;\r\n        expiryYearEle        = driver.findElement(By.xpath(\"//select[@name='expyear']\"));\r\n        Select selectExpYear = new Select(expiryYearEle);\r\n        Thread.sleep(1000);\r\n        selectExpYear.selectByVisibleText(expectednextYear); \r\n            actionResult.status   = true;\r\n            actionResult.comments = \"Next Month and Year entered for Credit Card Expiry information\";\r\n \r\n        break;\r\n        }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "Future_CreditCard_Expiry_Month_Year",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 155,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 633,
        "StepNumber": 1,
        "Description": "Policy Review",
        "LocatorTypeId": 7,
        "Locator": "//*[text()='Policy Review']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 625,
        "StepNumber": 2,
        "Description": "Wait",
        "LocatorTypeId": 9,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 629,
        "StepNumber": 3,
        "Description": "Click on Quote Button",
        "LocatorTypeId": 7,
        "Locator": "(//span[contains(text(),'uote')])[2]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 630,
        "StepNumber": 4,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 612,
        "StepNumber": 5,
        "Description": "Verify Conflict",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'OOSConflictsTab-btnInnerEl') and contains(text(),'Change Conflicts')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:7",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 613,
        "StepNumber": 6,
        "Description": "Click On Change Conflict ",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'OOSConflictsTab-btnInnerEl') and contains(text(),'Change Conflicts')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 614,
        "StepNumber": 7,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 615,
        "StepNumber": 8,
        "Description": "Click On Override All Btn",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'OverrideAll-btnInnerEl') and contains(text(),'Override All')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 621,
        "StepNumber": 9,
        "Description": "Click On Override None Btn",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'OverrideNone-btnInnerEl') and contains(text(),'Override None')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 616,
        "StepNumber": 10,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 617,
        "StepNumber": 11,
        "Description": "Click On Submit Btn",
        "LocatorTypeId": 7,
        "Locator": "//*[@id=\"PolicyChangeWizard:PolicyChangeWizard_DifferencesScreen:OOSConflictPanelSet:Done\"]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 618,
        "StepNumber": 12,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 619,
        "StepNumber": 13,
        "Description": "Click On OK Btn",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'btnInnerEl') and text()='OK']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 620,
        "StepNumber": 14,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 578,
        "StepNumber": 15,
        "Description": "Click on Quote Button",
        "LocatorTypeId": 7,
        "Locator": "(//span[contains(text(),'uote')])[2]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 579,
        "StepNumber": 16,
        "Description": "AjaxWait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 989,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 634,
        "StepNumber": 17,
        "Description": "VerifyWaringVehiclefactor",
        "LocatorTypeId": 7,
        "Locator": "//*[@class='message' and contains(text(),'Vehicle Rating Factors')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 635,
        "StepNumber": 18,
        "Description": "ClickOnClearButton",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 890,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 636,
        "StepNumber": 19,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 637,
        "StepNumber": 20,
        "Description": "ClickOnQuoteBtn",
        "LocatorTypeId": 7,
        "Locator": "(//span[contains(text(),'uote')])[2]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 638,
        "StepNumber": 21,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 607,
        "StepNumber": 22,
        "Description": "Verify Validation Results",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:ttlBar') and contains(text(),'Validation Results')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 627,
        "StepNumber": 23,
        "Description": "VerifyValidationErroMsgs",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 440,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 608,
        "StepNumber": 24,
        "Description": "Click on Clear Btn",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 609,
        "StepNumber": 25,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 610,
        "StepNumber": 26,
        "Description": "Click on Quote Button",
        "LocatorTypeId": 7,
        "Locator": "(//span[contains(text(),'uote')])[2]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 640,
        "StepNumber": 27,
        "Description": "Verify if warning message displayed",
        "LocatorTypeId": 7,
        "Locator": "//*[@class='message']",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 628,
        "StepNumber": 28,
        "Description": "Verify if Clear button appears",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element is visible",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 641,
        "StepNumber": 29,
        "Description": "Click on Clear Button",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 642,
        "StepNumber": 30,
        "Description": "Click on Quote Button",
        "LocatorTypeId": 7,
        "Locator": "(//span[contains(text(),'uote')])[2]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 15,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 611,
        "StepNumber": 31,
        "Description": "AjaxWait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 989,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 626,
        "StepNumber": 32,
        "Description": "GetQuoteNumberInPolicyChangeQuoteScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 901,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 622,
        "StepNumber": 33,
        "Description": "GetQuoteChargesDetails",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 1008,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 580,
        "StepNumber": 34,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 581,
        "StepNumber": 35,
        "Description": "Click the Next> button in the Quote screen in the Quote screen",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'Next-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 582,
        "StepNumber": 36,
        "Description": "AjaxWait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 989,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 583,
        "StepNumber": 37,
        "Description": "Click the Next> button in the Quote screen in the Quote screen",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'Next-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 584,
        "StepNumber": 38,
        "Description": "AjaxWait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 989,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 639,
        "StepNumber": 39,
        "Description": "AddRemarksInPCH",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "Policy Change",
        "CustomActionId": 991,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 585,
        "StepNumber": 40,
        "Description": "lick Add Remarks Button",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'PolicyRemarks-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 586,
        "StepNumber": 41,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 587,
        "StepNumber": 42,
        "Description": "Type Remarks in text area",
        "LocatorTypeId": 3,
        "Locator": "PolicyRemarks_AcgPopup:Remarks-inputEl",
        "ActionId": 43,
        "ParameterName": "Para_1",
        "ParameterValue": "Policy change",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 588,
        "StepNumber": 43,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 589,
        "StepNumber": 44,
        "Description": "Click Update button",
        "LocatorTypeId": 3,
        "Locator": "PolicyRemarks_AcgPopup:Update-btnInnerEl",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 590,
        "StepNumber": 45,
        "Description": "AjaxWait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 989,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 604,
        "StepNumber": 46,
        "Description": "Verify DayOfMonth Exists",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'dayofmonths-inputEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 598,
        "StepNumber": 47,
        "Description": "EnterDayOfMonth",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": "DT_PaymentDayOfMonth",
        "CustomActionId": 1013,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 599,
        "StepNumber": 48,
        "Description": "AjaxWait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 989,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 605,
        "StepNumber": 49,
        "Description": "SelectListBillingContact",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 818,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 606,
        "StepNumber": 50,
        "Description": "AjaxWait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 989,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 623,
        "StepNumber": 51,
        "Description": "Verify Recurring Payment Options is Required",
        "LocatorTypeId": 7,
        "Locator": "//*[@class = 'x-grid-item-container']/table/tbody/tr/td[1]/div/div",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 624,
        "StepNumber": 52,
        "Description": "Click Recurring Payment Option",
        "LocatorTypeId": 7,
        "Locator": "//*[@class = 'x-grid-item-container']/table/tbody/tr/td[1]/div/div",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 591,
        "StepNumber": 53,
        "Description": "Click Issue Policy button",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'JobWizardBillingToolbarButtonSet:BindPolicyChange-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 601,
        "StepNumber": 54,
        "Description": "AjaxWait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 989,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 593,
        "StepNumber": 55,
        "Description": "Click on OK button",
        "LocatorTypeId": 7,
        "Locator": "//span[text()='OK']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 30,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 600,
        "StepNumber": 56,
        "Description": "AjaxWait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 989,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 592,
        "StepNumber": 57,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 594,
        "StepNumber": 58,
        "Description": "Verify Validation Results",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:ttlBar') and contains(text(),'Validation Results')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 595,
        "StepNumber": 59,
        "Description": "Click on Clear Btn",
        "LocatorTypeId": 7,
        "Locator": "//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 631,
        "StepNumber": 60,
        "Description": "VerifyIfClearExsits",
        "LocatorTypeId": 7,
        "Locator": "//*[text()='Clear']",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:4",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 632,
        "StepNumber": 61,
        "Description": "ClickOnClearButton",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 890,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 596,
        "StepNumber": 62,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "5",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 597,
        "StepNumber": 63,
        "Description": "Click Issue Policy button",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'JobWizardBillingToolbarButtonSet:BindPolicyChange-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 602,
        "StepNumber": 64,
        "Description": "AjaxWait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 989,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 603,
        "StepNumber": 65,
        "Description": "Click on OK button",
        "LocatorTypeId": 7,
        "Locator": "//span[text()='OK']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Quote_Issue_Policy",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 890,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class ClickOnClearButton extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\ttry \n\t\t{\t\n\t\t\t\n\t\tWebElement clearBtnEle;\n   \t\t\n\t\t//driver.manage().timeouts().implicitlyWait(50, TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\tThread.sleep(2000);\n\t\tclearBtnEle = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//span[contains(@id,'ClearButton-btnInnerEl')]\")));\n\n\t\t//clearBtnEle=driver.findElement(By.xpath(\"//span[contains(@id,'ClearButton-btnInnerEl')]\"));\n\t\t//wait.until(ExpectedConditions.elementToBeClickable(clearBtnEle));\n\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", clearBtnEle);\n\t\tjs.executeScript(\"arguments[0].click();\",clearBtnEle);\n\t\t\n\t\tactionResult.status = true;\n       \t actionResult.comments =  \"Clicked On CLEAR button\";\n\t\t//break;\t\n\t\t\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\t\t\n\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "ClickOnClearButton",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 440,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.List;\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyValidationErroMsgs extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\t\t\t\n\ttry \n\t{\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\tJavascriptExecutor js = (JavascriptExecutor)driver;\n\t\tList<WebElement> errorMsgs =  driver.findElements(By.xpath(\"//div[contains(@id,'WebMessageWorksheet')]/div\"));\n\t\tint numberOfTable = errorMsgs.size();\n\t\tif(numberOfTable>0){\n\t\tfor(int j =0; j<numberOfTable; j++) \n\t\t{\n\t\t\tint x = j+1;\n\t\t\tWebElement errorMsg = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"(//div[contains(@id,'WebMessageWorksheet')]/div)[\"+x+\"]\"))));\n\t\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", errorMsg);\n\t\t}}\n\t\tactionResult.status = true;\n       \tactionResult.comments =  \"Executed successfully\";\n\t}\n\tcatch(Exception e) {\n\tactionResult.comments =\" Expection Type : \" + e.getMessage();\n\tactionResult.status = false;\n\t}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyValidationErroMsgs",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 901,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class GetQuoteNumberInPolicyChangeQuoteScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n     \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n         \n        WebDriverWait wait = new WebDriverWait(driver,20);\n\t\tWebElement quoteNumberEle = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//div[contains(@id,'title') and contains(text(),'QTE')]\"))));\n\t\tString quoteNumberText=quoteNumberEle.getText();\n\t\tString[] arrquoteNumber=quoteNumberText.split(\" \");\n\t\tString quoteNumber=arrquoteNumber[2].toString().replace(\"Version\", \"\");\n\t\tSystem.out.println(quoteNumber);\n\t\tactionResult.SaveParameterValue(\"DT_QuoteNumber\", quoteNumber);\n\t\tactionResult.status = true;\n           \tactionResult.comments =  \"Quote has been completed successfully : \"+quoteNumber;\n \n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "GetQuoteNumberInPolicyChangeQuoteScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1008,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class GetQuoteChargesDetails extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n         \n         WebDriverWait wait = new WebDriverWait(driver,20);\n\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(\"//div[contains(@id,'TotalPremium-inputEl')]\")));\n\n\t\tWebElement quoteTotalPremiumTxt= driver.findElement(By.xpath(\"//div[contains(@id,'TotalPremium-inputEl')]\"));\t\t\n\t\tString quoteTotalPremium=quoteTotalPremiumTxt.getText();\n\t\tString totalPremium=\"\";\n\t\tif(quoteTotalPremium.contains(\",\")){\n\t\t\ttotalPremium=quoteTotalPremium.replace(\",\", \"\");\n\t\t\tSystem.out.println(totalPremium);\n\t\t\tactionResult.SaveParameterValue(\"DT_QuoteTotalPremium\", totalPremium);\n\t\t} else {\n\t\t\ttotalPremium = quoteTotalPremium;\n\t\t\tSystem.out.println(totalPremium);\n\t\t\tactionResult.SaveParameterValue(\"DT_QuoteTotalPremium\", totalPremium);\t\t\t\n\t\t}\n\t\n\t\tWebElement quoteTotalCostTxt= driver.findElement(By.xpath(\"//div[contains(@id,'TotalCost-inputEl')]\"));\t\t\n\t\tString quoteTotalCost=quoteTotalCostTxt.getText();\n\t\tString totalCost=\"\";\n\t\tif(quoteTotalCost.contains(\",\")){\n\t\t\ttotalCost = quoteTotalCost.replace(\",\", \"\");\n\t\t\tSystem.out.println(totalCost);\n\t\t\tactionResult.SaveParameterValue(\"DT_QuoteTotalCost\", totalCost);\n\t\t} else {\n\t\t\ttotalCost = quoteTotalCost;\n\t\t\tSystem.out.println(totalCost);\n\t\t\tactionResult.SaveParameterValue(\"DT_QuoteTotalCost\", totalCost);\t\n\t\t}\n\t\t\n\t\tWebElement quoteChangeInCostTxt= driver.findElement(By.xpath(\"//div[contains(@id,'ChangeInCost-inputEl')]\"));\t\t\n\t\tString quoteChangeInCost=quoteChangeInCostTxt.getText();\n\t\tString ChangeInCost=\"\";\n\t\tif(quoteChangeInCost.contains(\",\")){\t\t\t\n\t\t\tChangeInCost = quoteChangeInCost.replace(\",\", \"\");\n\t\t\tSystem.out.println(ChangeInCost);\n\t\t\tactionResult.SaveParameterValue(\"DT_QuoteChangeInCost\", ChangeInCost);\n\t\t} else {\n\t\t\tChangeInCost = quoteChangeInCost;\n\t\t\tSystem.out.println(ChangeInCost);\n\t\t\tactionResult.SaveParameterValue(\"DT_QuoteChangeInCost\", ChangeInCost);\n\t\t}\t\t\n\t\t\n\t\t\n\t\tactionResult.status = true;\n       \tactionResult.comments =  \"Policy Change has been Quoted successfully : \"+\"QuoteTotalPremium : \"+totalPremium+\" QuoteTotalCost : \"+totalCost\n\t\t+\" QuoteChangeInCost : \"+ChangeInCost;\n \n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "GetQuoteChargesDetails",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 991,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class AddRemarksInPCH extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n        try \r\n    {   \r\n        \r\n        WebDriverWait wait = new WebDriverWait(driver,20);\r\n        JavascriptExecutor js = (JavascriptExecutor)driver;\r\n                        \r\n        Thread.sleep(2000);\r\n            WebElement addRemarks = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'PolicyRemarks-btnInnerEl')]\"))));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", addRemarks);\r\n            js.executeScript(\"arguments[0].click();\", addRemarks);\r\n            Thread.sleep(3000);\r\n            WebElement remarks = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[@id='PolicyRemarks_AcgPopup:Remarks-inputEl']\"))));\r\n            js.executeScript(\"arguments[0].click();\", remarks);\r\n            remarks.sendKeys(inputValue);\r\n            Thread.sleep(3000);\r\n            WebElement updateRemarks = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//*[@id='PolicyRemarks_AcgPopup:Update-btnInnerEl']\"))));\r\n            js.executeScript(\"arguments[0].style.border='2px solid red'\", updateRemarks);\r\n            js.executeScript(\"arguments[0].click();\", updateRemarks);\r\n            Thread.sleep(3000);\r\n        actionResult.status = true;\r\n        actionResult.comments =  \"Verified successfully\";\r\n    }\r\n    \r\n    catch(Exception e) {\r\n    actionResult.comments =\" Expection Type : \" + e.getMessage();\r\n    actionResult.status = true;\r\n    }\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "AddRemarksInPCH",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 1013,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class EnterDayOfMonth extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n\t\n\tfor(int i =1; i<=5; i++) \n\t{\n\ttry\n\t{\n\t\tdriver.manage().timeouts().implicitlyWait(30,TimeUnit.SECONDS);\n\t\tWebDriverWait wait = new WebDriverWait(driver,30);\n\t\tJavascriptExecutor js=(JavascriptExecutor) driver;\n\t\tString selectText=Keys.chord(Keys.CONTROL,\"a\");\n\t\tThread.sleep(2000);\n\t\tWebElement DayOfMonth = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//*[contains(@id,'dayofmonths-inputEl')]\"))));\n\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", DayOfMonth);\n\t\tDayOfMonth.click();\n\t\tjs.executeScript(\"arguments[0].style.border='2px solid red'\", DayOfMonth);\n\t\tDayOfMonth.sendKeys(selectText);\n\t\tDayOfMonth.sendKeys(Keys.DELETE);\n\t\tDayOfMonth.sendKeys(inputValue);\n\t\tDayOfMonth.sendKeys(Keys.ENTER);\n\t\tThread.sleep(500);\n\t\tDayOfMonth.sendKeys(Keys.TAB);\n\t\tThread.sleep(2000);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\tactionResult.status = true;\n\t\t\tactionResult.comments = \"The 'Day Of Month' has been Selected as : \"+inputValue;\n\t\n\t\tbreak;\n\t}\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}       \n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "EnterDayOfMonth",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 818,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\nimport java.util.concurrent.TimeUnit;\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class SelectListBillingContact extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\ttry\n{\n\n\tfor(int i =1; i<=5; i++)\n\t{\n\ttry{\n\t\t\t\n\t\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\t\n\t\t\t\tWebElement billingContactDropdown= driver.findElement(By.xpath(\"//a[contains(@id,'AccountContactBillingInputSet:ListBilling:ListBillingMenuIcon')]/img\"));\n\t\t\t\twait.until(ExpectedConditions.elementToBeClickable(billingContactDropdown));\n\t\t\t\tbillingContactDropdown.click();\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Successfully selected\";\n\t\t\n\tbreak;\n\t}\n\tcatch(Exception e) {\n\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\tactionResult.status = false;\n\t}\n\t}\n\n\tfor(int i =1; i<=5; i++)\n\t{\n\ttry{\n\t\t\t\n\t\t\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\t\t\n\t\t\t\tWebElement additionalInterest= driver.findElement(By.xpath(\"//span[contains(@id,'ListBilling:ExistingBillingContact-textEl')]\"));\n\t\t\t\twait.until(ExpectedConditions.elementToBeClickable(additionalInterest));\n\t\t\t\tdriver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);\t\n\t\t\t\tadditionalInterest.click();\n\t\t\t\t\n\t\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Successfully selected\";\n\t\t\n\tbreak;\n\t}\n\tcatch(Exception e) {\n\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\tactionResult.status = false;\n\t}\n\t}\n\n\tfor(int i =1; i<=5; i++)\n\t{\n\ttry{\n\t\t\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\t\t\t\t\n\t\t\t\tWebElement companyName= driver.findElement(By.xpath(\"//*[contains(@id,'ExistingBillingContact:0:UnassignedAccountContact-textEl')]\"));\n\t\t\t\twait.until(ExpectedConditions.elementToBeClickable(companyName));\n\t\t\t\tdriver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);\t\n\t\t\t\tcompanyName.click();\n\t\t\t\t\n\t\t\t\tactionResult.status = true;\n           \t\tactionResult.comments =  \"Successfully selected\";\n\t\t\n\tbreak;\n\t}\n\tcatch(Exception e) {\n\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\tactionResult.status = false;\n\t}\n\t}\n\t\n\tactionResult.comments = \"ListBilling contact has been selected as same as insured\";\n\tactionResult.status = true;\n\n}\n\t\ncatch(Exception e) {\n\tactionResult.comments = e.getMessage();\n\tactionResult.status = false;\n}\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "SelectListBillingContact",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 68,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 6311,
        "StepNumber": 1,
        "Description": "VerifyPaymentScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 459,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6321,
        "StepNumber": 2,
        "Description": "PaymentndBindClick",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'BindOptions-btnInnerEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6325,
        "StepNumber": 3,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6322,
        "StepNumber": 4,
        "Description": "Ready for Payment",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'ReadyForPayment-textEl')]",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6315,
        "StepNumber": 5,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6324,
        "StepNumber": 6,
        "Description": "Pay and bind",
        "LocatorTypeId": 7,
        "Locator": "//*[text()='Pay And Bind']",
        "ActionId": 9,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": "Element to be clickable",
        "TimeoutWaitForCondition": 5,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6316,
        "StepNumber": 7,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "3",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6326,
        "StepNumber": 8,
        "Description": "PaymentAndBindOptionsTAB",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 458,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6323,
        "StepNumber": 9,
        "Description": "Verify Error Message",
        "LocatorTypeId": 7,
        "Locator": "//div[@class='message']",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6317,
        "StepNumber": 10,
        "Description": "PaymentAndBindOptionsTAB",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 458,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6318,
        "StepNumber": 11,
        "Description": "Wait",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 47,
        "ParameterName": null,
        "ParameterValue": "2",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6312,
        "StepNumber": 12,
        "Description": "Verify PayAndBind Tab",
        "LocatorTypeId": 7,
        "Locator": "//span[contains(@id,'BindOptions-btnInnerEl')]",
        "ActionId": 53,
        "ParameterName": null,
        "ParameterValue": "executenextSteps:1",
        "CustomActionId": null,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6319,
        "StepNumber": 13,
        "Description": "PaymentAndBindOptionsTAB",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 458,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6314,
        "StepNumber": 14,
        "Description": "PayAndBindOptionWIthAlertHandled",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 463,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6313,
        "StepNumber": 15,
        "Description": "BindWithoutMSandPayment",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 461,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 6320,
        "StepNumber": 16,
        "Description": "BindWithOutPayment",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 472,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": true,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Payment",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 458,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport org.openqa.selenium.Alert;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class PaymentAndBindOptionsTAB extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n   ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {       \r\n    try \r\n    {   \r\n    \r\n    //driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n    WebElement paymentBindOptionsTabElement;\r\n    WebElement payAndBindElement;\r\n    Actions act;\r\n\r\n    WebDriverWait wait=new WebDriverWait(driver,30);\r\n    paymentBindOptionsTabElement = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'BindOptions-btnInnerEl')]\"))));\r\n\r\n    act = new Actions(driver);\r\n    act.moveToElement(paymentBindOptionsTabElement).moveByOffset(40,0).click().build().perform();\r\n\r\n    payAndBindElement= driver.findElement(By.xpath(\"//span[contains(@id,'BindOptions:PayAndBind-textEl')]\"));\r\n    act.moveToElement(payAndBindElement).moveByOffset(40,0).click().build().perform();\r\n    Thread.sleep(2000);\r\n    \r\n    if(driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle Rating Factors')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle History Report')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'The Insurance Score returned')]\")).size()>0)\r\n            {\r\n            driver.findElement(By.xpath(\"//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]\")).click();\r\n            Thread.sleep(3000);\r\n            act.moveToElement(paymentBindOptionsTabElement).moveByOffset(40,0).click().build().perform();\r\n            act.moveToElement(payAndBindElement).moveByOffset(40,0).click().build().perform(); \r\n            Thread.sleep(2000);     \r\n            }\r\n         \r\n    // To Confirm whether the page has been navigated to Payment Page or not\r\n    \r\n    // WebElement paymentMethod = driver.findElement(By.xpath(\"//select[@id='payMethodType1']\"));\r\n    Thread.sleep(4000);\r\n    Alert alert = driver.switchTo().alert();\r\n    if(wait.until(ExpectedConditions.alertIsPresent())== null)\r\n    {\r\n    System.out.println(\"Alert not exists\");\r\n    }\r\n    else\r\n    {\r\n    alert.accept();\r\n    System.out.println(\"Unexpected alert accepted Successfully.........\");\r\n    }\r\n    \r\n    actionResult.status      = true;\r\n    actionResult.comments    = \"Executed Successfully\"; \r\n \r\n    break;\r\n    }\r\n    \r\n    catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }   \r\n\r\n\r\n   ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "PaymentAndBindOptionsTAB",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 463,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\nimport java.util.concurrent.TimeUnit;\r\nimport org.openqa.selenium.Alert;\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class PayAndBindOptionWIthAlertHandled extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n\r\ntry{\r\n    //driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\r\n    WebElement paymentBindOptionsTabElement;\r\n    WebElement payAndBindElement;\r\n    Actions act;\r\n\r\n    WebDriverWait wait=new WebDriverWait(driver,30);\r\n    paymentBindOptionsTabElement = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'BindOptions-btnInnerEl')]\"))));\r\n\r\n    act = new Actions(driver);\r\n    act.moveToElement(paymentBindOptionsTabElement).moveByOffset(40,0).click().build().perform();\r\n\r\n    payAndBindElement= driver.findElement(By.xpath(\"//span[contains(@id,'BindOptions:PayAndBind-textEl')]\"));\r\n    act.moveToElement(payAndBindElement).moveByOffset(40,0).click().build().perform();\r\n    Thread.sleep(4000);\r\n\r\n    /*wait.until(ExpectedConditions.alertIsPresent());\r\n       Alert simpleAlert = driver.switchTo().alert();\r\n       simpleAlert.accept();\r\n    System.out.println(\"Unexpected alert accepted Successfully.........\");*/\r\n\r\n    //alertIsPresent() condition applied\r\n    //wait.until(ExpectedConditions.alertIsPresent());\r\n    \r\n    \r\n    \r\n     if(driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle Rating Factors')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle History Report')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'The Insurance Score returned')]\")).size()>0)\r\n            {\r\n            driver.findElement(By.xpath(\"//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]\")).click();\r\n            Thread.sleep(3000);\r\n               paymentBindOptionsTabElement = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'BindOptions-btnInnerEl')]\"))));\r\n\r\n               // act = new Actions(driver);\r\n    act.moveToElement(paymentBindOptionsTabElement).moveByOffset(40,0).click().build().perform();\r\n\r\n    payAndBindElement= driver.findElement(By.xpath(\"//span[contains(@id,'BindOptions:PayAndBind-textEl')]\"));\r\n    act.moveToElement(payAndBindElement).moveByOffset(40,0).click().build().perform();\r\n    Thread.sleep(4000);\r\n  \r\n            }\r\n         \r\n    \r\n    \r\n    Alert alert = driver.switchTo().alert();\r\n    if(wait.until(ExpectedConditions.alertIsPresent())== null)\r\n    {\r\n    System.out.println(\"Alert not exists\");\r\n    }\r\n    else\r\n    {\r\n    alert.accept();\r\n    System.out.println(\"Unexpected alert accepted Successfully.........\");\r\n    }\r\n\r\n    actionResult.status = true;\r\n    actionResult.comments = \"Executed Successfully\"; \r\n\r\n\r\n}\r\ncatch(Exception e){\r\n\r\n    actionResult.status = true;\r\n           actionResult.comments =  e.getMessage();\r\n           e.printStackTrace();\r\n           \r\n}\r\n\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "PayAndBindOptionWIthAlertHandled",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 461,
    "Description": "",
    "Code": "////<Mandatory_libraries>\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.InvalidElementStateException;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.NoSuchElementException;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.interactions.Action;\r\nimport org.openqa.selenium.interactions.Actions;\r\nimport org.openqa.selenium.remote.CapabilityType;\r\nimport org.openqa.selenium.remote.DesiredCapabilities;\r\nimport org.openqa.selenium.remote.RemoteWebDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.Select;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport stmJava.ActionResult;\r\nimport stmJava.CustomStep;\r\n\r\n\r\n//</Mandatory_libraries>\r\n// Additional libraries might be declared here\r\n\r\n\r\n//<This_lines_must_not_be_modified>\r\n   public class BindWithoutMSandPayment extends ActionResult\r\n   {\r\n       /// <summary>\r\n       /// A method to perform a custom test step\r\n       /// </summary>\r\n       /// <param>\r\n       /// The method receive parameters:\r\n       ///  * driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\r\n       /// \r\n       ///  * and a second optional parameter which can be a String or a String[] array.\r\n       ///    One Parameter : public ActionResult Execute(WebDriver driver)\r\n       ///    Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\r\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\r\n       /// \r\n       ///  * also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\r\n       ///    using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\r\n       /// </param>\r\n       /// <returns>\r\n       ///  The method returns an ActionResult object which is expected to contain the step\r\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \r\n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \r\n       ///  of a screenshot.\r\n       /// </returns>\r\n       ///  Also it is possible to save a String value to Datasheet.\r\n       ///  e.g. 1:\r\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\r\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\r\n       ///  e.g. 2:\r\n       ///   actionResult.columnName = \"DatasheetColumnName\";\r\n       ///   actionResult.propertyValue = \"Value to be saved\";\r\n       ///  Or save several values to Datasheet.\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\r\n       ///   actionResult.PropertyValues.add(Value to be saved1);\r\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\r\n       ///   actionResult.PropertyValues.add(Value to be savedN);\r\n       //</This_lines_must_not_be_modified>\r\n       //<Mandatory_lines>\r\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\r\n       {\r\n           ActionResult actionResult = new ActionResult();\r\n           actionResult.status = false;\r\n           actionResult.comments =  \"\";\r\n       //</Mandatory_lines>\r\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\r\n       \r\n    for(int i =1; i<=5; i++) \r\n    {\r\n        try \r\n        {           \r\n\r\n        WebElement paymentBindOptionsTabElement;\r\n        WebElement payAndBindElement;\r\n\r\n        paymentBindOptionsTabElement= driver.findElement(By.xpath(\"//span[contains(@id,'BindOptions-btnInnerEl')]\"));\r\n        Actions act = new Actions(driver);\r\n        act.moveToElement(paymentBindOptionsTabElement).moveByOffset(40,0).click().build().perform();\r\n\r\n        //payAndBindElement= driver.findElement(By.xpath(\"//span[contains(@id,'BindOptions:PayAndBind-textEl')]\"));\r\n        payAndBindElement= driver.findElement(By.xpath(\"//span[contains(@id,'BindWithoutMembership-textEl') or contains(@id,'BindWithoutPayment-textEl')]\"));\r\n        act.moveToElement(payAndBindElement).moveByOffset(40,0).click().build().perform();\r\n        \r\n        \r\n        if(driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle Rating Factors')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'Vehicle History Report')]\")).size()>0  ||driver.findElements(By.xpath(\"//*[@class='message' and contains(text(),'The Insurance Score returned')]\")).size()>0){\r\n       driver.findElement(By.xpath(\"//*[contains(@id,'WebMessageWorksheet:WebMessageWorksheetScreen:') and contains(text(),'Clear')]\")).click();\r\n       Thread.sleep(3000);\r\n        act.moveToElement(paymentBindOptionsTabElement).moveByOffset(40,0).click().build().perform();\r\n         Thread.sleep(2000);\r\n        act.moveToElement(payAndBindElement).moveByOffset(40,0).click().build().perform();\r\n        \r\n    }\r\n        \r\n\r\n        actionResult.status = true;\r\n        actionResult.comments = \"Executed Successfully\"; \r\n        \r\n        break;\r\n        }\r\n        catch(Exception e) {\r\n        actionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\r\n        actionResult.status = false;\r\n        }\r\n    }\r\n\r\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\r\n       //</Mandatory_lines>\r\n       // Return results in ActionResult object\r\n           return actionResult;\r\n       }\r\n   }\r\n //</Mandatory_lines>\r\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "BindWithoutMSandPayment",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 472,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class BindWithOutPayment extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\n\n\ttry{\n\n\n\tWebElement paymentBindOptionsTabElement;\n\tWebElement BindWithOutPayment;\n\tThread.sleep(5000);\n\n\tWebDriverWait wait=new WebDriverWait(driver,20);\n\tpaymentBindOptionsTabElement = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(\"//span[contains(@id,'JobWizardBillingToolbarButtonSet:BindOptions-btnInnerEl')]\"))));\n\tpaymentBindOptionsTabElement.click();\n\n\tThread.sleep(2000);\n\tBindWithOutPayment= driver.findElement(By.xpath(\"//span[text()='Bind Without Payment']\"));\n\tBindWithOutPayment.click();\n\tactionResult.status = true;\n\tactionResult.comments = \"Executed Successfully\"; \n\n\n\t}\n\tcatch(Exception e){\n\n\tactionResult.status = false;\n           actionResult.comments =  e.getMessage();\n\t}\n\n\n\n\n\n\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "BindWithOutPayment",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 510,
    "Description": "",
    "isMobile": false,
    "TestCaseType": 1,
    "Steps": [
      {
        "TempId": 8542,
        "StepNumber": 1,
        "Description": "VerifyTheSubmissionBoundScreen",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 983,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 8543,
        "StepNumber": 2,
        "Description": "GetTheSubmissionID",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 982,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      },
      {
        "TempId": 8544,
        "StepNumber": 3,
        "Description": "GetThePolicyNumber_PayWithoutMembership",
        "LocatorTypeId": null,
        "Locator": null,
        "ActionId": 1,
        "ParameterName": null,
        "ParameterValue": null,
        "CustomActionId": 981,
        "ObjectDictionaryId": null,
        "ImageRepositoryId": null,
        "SkipStep": false,
        "Screenshot": false,
        "UserSays": null,
        "BotSays": null,
        "Assertions": [],
        "Parameters": [],
        "ApiParams": [],
        "qTestStepIdForComp": null,
        "WaitForCondition": null,
        "TimeoutWaitForCondition": 0,
        "IsEncrypted": false,
        "Breakpoint": false,
        "Name": null,
        "Created": null,
        "Modified": null
      }
    ],
    "isPOM": true,
    "TestSteps": [],
    "Headers": [],
    "Authentication": null,
    "uri": null,
    "Name": "Submission_bound",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 983,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class VerifyTheSubmissionBoundScreen extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\t\t\n\t\tWebElement pageTitleEle = driver.findElement(By.xpath(\"//span[contains(@id,'JobCompleteScreen:ttlBar')]\"));\n\t\tString actPageTitle = pageTitleEle.getText();\n\t\tif(actPageTitle.equals(\"Submission Bound\")){\n           \t\tactionResult.status = true;\n          \t\tactionResult.comments =  \"Naviagted to 'Submission Bound' screen successfully\";\n\t\t}\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "VerifyTheSubmissionBoundScreen",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 982,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport java.util.*;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class GetTheSubmissionID extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\n\t\ttry \n\t\t{\t\t\t\n\t\tWebElement submissionIDEle;\n\t\tsubmissionIDEle = driver.findElement(By.xpath(\"//label[contains(@id,'JobCompleteScreen:Message')]\"));\n\t\tWebDriverWait wait = new WebDriverWait(driver,10);\n\t\twait.until(ExpectedConditions.elementToBeClickable(submissionIDEle));\n\t\tString submissionID=submissionIDEle.getText();\n\t\tString[] arrSubmissionID=submissionID.split(\"#\");\n\t\t//String policySubmissionID=arrSubmissionID[1].split(\" \").toString();\n\t\tString policySubmissionID=arrSubmissionID[1].toString().replace(\")\", \"\");\n\t\tSystem.out.println(policySubmissionID);\n\t\tactionResult.SaveParameterValue(\"DT_PolicySubmissionID\", policySubmissionID);\n\t\tactionResult.status = true;\n     \t\tactionResult.comments =  \"Policy Submission has been completed successfully\"+policySubmissionID;\n\t\t\n\t\tbreak;\n\t\t}\n\t\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "GetTheSubmissionID",
    "Created": null,
    "Modified": null
  },
  {
    "TempId": 981,
    "Description": "",
    "Code": "////<Mandatory_libraries>\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.InvalidElementStateException;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.NoSuchElementException;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Action;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.remote.CapabilityType;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport stmJava.ActionResult;\nimport stmJava.CustomStep;\n\n\n//</Mandatory_libraries>\n// Additional libraries might be declared here\n\n\n//<This_lines_must_not_be_modified>\n   public class GetThePolicyNumber_PayWithoutMembership extends ActionResult\n   {\n       /// <summary>\n       /// A method to perform a custom test step\n       /// </summary>\n       /// <param>\n       /// The method receive parameters:\n       /// \t* driver which is an instance of WebDriver or a mobile driver such as AndroidDriver\n       /// \n       /// \t* and a second optional parameter which can be a String or a String[] array.\n       /// \t  One Parameter : public ActionResult Execute(WebDriver driver)\n       /// \t  Two Parameters: public ActionResult Execute(WebDriver driver, String inputValue)\n       ///              or: public ActionResult Execute(WebDriver driver, String[] inputValue)\n       /// \n       /// \t* also it is possible to pass objects to a Custom Action adding a third argument of type WebElement with name: cAElement\n       /// \t  using web element: public ActionResult Execute(WebDriver driver, String inputValue, WebElement caElement)\n       /// </param>\n       /// <returns>\n       ///  The method returns an ActionResult object which is expected to contain the step\n       ///  execution information, such as the status (true or false equivalent to pass or fail), details \n       ///  that may explain the fail cause or some extra information and  the path to find the file resulting \n       ///  of a screenshot.\n       /// </returns>\n       ///  Also it is possible to save a String value to Datasheet.\n       ///  e.g. 1:\n       ///   actionResult.SaveParameterValue(\"DT_ParamName\", paramValue);\n       ///   actionResult.SaveParameterValue(\"GDT_ParamName\", paramValueGlobal);\n       ///  e.g. 2:\n       ///   actionResult.columnName = \"DatasheetColumnName\";\n       ///   actionResult.propertyValue = \"Value to be saved\";\n       ///  Or save several values to Datasheet.\n       ///   actionResult.ColumnNames.add('DatasheetColumnName1');\n       ///   actionResult.PropertyValues.add(Value to be saved1);\n       ///   actionResult.ColumnNames.add('DatasheetColumnNameN');\n       ///   actionResult.PropertyValues.add(Value to be savedN);\n       //</This_lines_must_not_be_modified>\n       //<Mandatory_lines>\n       public ActionResult Execute(WebDriver driver, String inputValue) //replace WebDriver by AndroidDriver for mobile actions\n       {\n           ActionResult actionResult = new ActionResult();\n           actionResult.status = false;\n           actionResult.comments =  \"\";\n       //</Mandatory_lines>\n       ///////////////WORKSPACE START////////////////////////////////////////////////////////////////////////////////////////\n       \n\tfor(int i =1; i<=5; i++) \n\t{\t\t\n\t\ttry \n\t\t{\t\n         \n\t\tWebDriverWait wait = new WebDriverWait(driver,20);\n\n            // wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"(//span[@class='infobar_elem_val'])[3]\"))));\n\n\t\tWebElement policyNumEle;\n\t\t\t//policyNumEle=driver.findElement(By.xpath(\"(//span[@class='infobar_elem_val'])[3]\"));\n                policyNumEle=wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(\"//span[(contains(text(),'Policy #'))]//following-sibling::span\"))));\n\n\n\t\t\n\t\tString policyNumber = policyNumEle.getText();\n\t\tactionResult.SaveParameterValue(\"DT_PolicyNumber\", policyNumber);\n\t\tactionResult.status = true;\n      \tactionResult.comments =  \"Policy  Number :\"+policyNumber+\" has been created successfully\";\n\n \t\tbreak;\n\t\t}\n\t\n\tcatch(Exception e) {\n\t\tactionResult.comments =\"Max No. of Attepts reached : \" +i + \" Expection Type : \" + e.getMessage();\n\t\tactionResult.status = false;\n\t\t}\n\t}\t\n\n        ///////////////WORKSPACE END////////////////////////////////////////////////////////////////////////////////////////\n       //</Mandatory_lines>\n       // Return results in ActionResult object\n           return actionResult;\n       }\n   }\n //</Mandatory_lines>\n\n",
    "Type": 1,
    "OriginalProjectId": 0,
    "Exist": false,
    "SelectMessage": null,
    "Name": "GetThePolicyNumber_PayWithoutMembership",
    "Created": null,
    "Modified": null
  }
]